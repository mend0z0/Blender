/****************************************************************************************************
*
*   Project Name:       Blender
*   @Brief Description: Blending audio spec with light spectrum
*   File Status:	    DRAFT   (DRAFT , PRELIMINARY, CHECKED, RELEASED)
*
*	File Name:	xxxx.c
*	Version:	01
*	Revision:	01
*	Date:		2023/01/dd
*	License:	Open-source
*	******************************** Project Description *******************************************
*	@Detailed Description: The Blender project's purpose is to extract digitalized sound characteristics
*   like amplitude and frequency, which are transferring through the S/PDIF protocol, and display the amplitude
*   of different frequencies by the dominant color of the input VGA received signal. So the base color will be
*   determined by VGA input, and a spectrum of that color will be displayed over/on the DMX/WS2812 chip. Also,
*   the specification of the sound will be displayed on an OLED, and the sound will be played by a chip that has
*   an integrated DAC in it. The data to DAC will be transferred via the I2S protocol.
*
*	******************************** File Description *******************************************
*	@Detailed Description:
*
*
*	*********************************  Hardware Info  **********************************************
*   Name:       _HW_Blender
*   Version:    v1.0
*	*********************************  Processor Info **********************************************
*	Processor:          STM32F446RCT6 32-Bits
*	Clock Frequency:    180.000	MHz
*	RAM/SRAM Size:      128.00	KBytes
*	Flash Size:         256.00	KBytes
*	***********************************  Case Style  ***********************************************
*	Local Variables = camelCase			Global Variables = g_camelCase
*	Headers = SCREAMIN_SNAKE_CASE
*   Macros = SCREAMING_SNAKE_CASE
*   Const Variables = SCREAMING_SNAKE_CASE
*	Functions = PascalCase				Initialize Functions = _lower_case
*	Struct = lower_case					Struct.members = camelCase
*	Enum = lower_case					Enum Members = SNAKE_CASE
*	Pointer Variables = p_camelCase
*	*********************************** Contact Info ***********************************************
*	Author:	Siavash Taher Parvar
*	Github: github.com/Mend0z0
****************************************************************************************************/

/****************************************************************************************************
****************************       HEADERS DECLARATION       ****************************************
*****************************************************************************************************/
#include "_drv_ssd1306.h"

/****************************************************************************************************
****************************   GLOB. VARIABLES DECLARATION    ***************************************
*****************************************************************************************************/

/****************************************************************************************************
****************************   CONST VARIABLES DECLARATION    ***************************************
*****************************************************************************************************/

struct{
	uint8_t *mend0z0Logo;
	uint8_t *consolas_6pt;
}ssd1306;

// Bitmap sizes for mEND0Z0LOGO_simple
const uint8_t mend0z0Logo_simpleBitmapsWidthPages = 16;
const uint8_t mend0z0Logo_simpleBitmapsHeightPixels = 120;

//
//  Image data for mend0z0Logo_simpleBitmaps
//

const uint8_t mend0z0Logo_simpleBitmaps[] =
{
	0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x03, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                      ######           ##                      ######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x03, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #######           ##                      ######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x07, 0xE0, 0x00, 0x07, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #### ###         ######                  ###  ###
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x38, 0x07, 0xF0, 0x00, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ##    ###        #######                 ###   ##
	0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x07, 0xFC, 0x00, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #      ##        #########               ##    ##
	0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x07, 0xFF, 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #      ##        ###########             ##     #
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x0F, 0xFF, 0xC0, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //                                            ####     ##############           ##     #
	0x00, 0x00, 0x00, 0x00, 0x08, 0x1F, 0x0F, 0xFF, 0xE0, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #      #####    ###############          ##    ##
	0x00, 0x00, 0x00, 0x00, 0x08, 0x1F, 0x87, 0xFF, 0xEC, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #      ######    ############## ##       ###   ##
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x3F, 0xF0, 0xFF, 0xCF, 0x07, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ##    ##########    ##########  ####     ### ####
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF8, 0x7F, 0xCF, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #################    #########  ####     #######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF8, 0x7F, 0xCF, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #################    #########  ####     #######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x0F, 0xCF, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ####################    ######  ####     #######
	0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x07, 0x8F, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       ##################     ####   ####     ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xE0, 0x9F, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, //                                               #############     #  #####    #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x1F, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                #############       #####    #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x3E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                  #############    #####    #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x3E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                   ##############  #####    #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                      #################     #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                      #################     #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x7F, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           ###            #############    ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x7F, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           ####           ############     ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x0F, 0xF8, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          #######            #########    #######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x07, 0xF8, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          #########           ########    ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0xF8, 0x7E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ###########            #####    ###### ##
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x70, 0x7C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ############            ###     #####  ###
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x30, 0x7C, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          #############            ##     #####  ####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x00, 0x00, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, //                                            ###########                  ######  #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, //                                              #########                  #####   #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xF8, 0x00, 0x00, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ##    ######                   #####  ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF8, 0x00, 0x00, 0xF9, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ###    #####                   #####  #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xF8, 0x00, 0x01, 0xFB, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         ###### ######                  ###### ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xF8, 0x00, 0x01, 0xFB, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         #####  ######                  ###### ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xF0, 0x00, 0x03, 0xF3, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         #####  #####                  ######  ######
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xF0, 0x00, 0x03, 0xF7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         #####  #####                  ###### ######
	0x00, 0x00, 0x00, 0x00, 0x03, 0xF9, 0xF0, 0x00, 0x03, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       #######  #####                  #####  ######
	0x00, 0x00, 0x00, 0x00, 0x03, 0xF9, 0xF0, 0x00, 0x03, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       #######  #####                  #####  ######
	0x00, 0x00, 0x00, 0x00, 0x03, 0xF3, 0xF0, 0x00, 0x07, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       ######  ######                 ######  ######
	0x00, 0x00, 0x00, 0x00, 0x03, 0xF3, 0xF0, 0x00, 0x07, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       ######  ######                 ######  #####
	0x00, 0x00, 0x00, 0x00, 0x07, 0xF7, 0xF0, 0x00, 0x07, 0xE7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                      ####### #######                 ######  #####
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xF7, 0xE0, 0x00, 0x07, 0xCF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ######## ######                  #####  ######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xE7, 0xC0, 0x00, 0x07, 0xCF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #######  #####                   #####  ######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xE7, 0xC0, 0x00, 0x0F, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #######  #####                  #####   #####
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xEF, 0xC0, 0x00, 0x0F, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ####### ######                  #####    ###
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xEF, 0xC0, 0x00, 0x0F, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ####### ######                  ######     #
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0x80, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ######  #####                   #########
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0x80, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ######  #####                   ##########
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x9F, 0x87, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #####  ######    ###            ############
	0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0x07, 0x80, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       ###  #####     ####           ############
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0F, 0xF0, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                            #####    ########          ##########
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0F, 0xF8, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                            #####    #########           ########
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x0F, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           ######    ###########          #######
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0F, 0xFF, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           #####     ############           #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x0F, 0xFF, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ######     ###############          ###
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ######    #################
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x3F, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ######   ###### #############
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3F, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          #####    ###### ###############
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3F, 0x07, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          #####    ######     ############
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3F, 0x03, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                          ####     ######      #############
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3E, 0x78, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         #####     #####  ####   ##############  ###
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0xFC, 0x3F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         #####    #####  ######    ##################
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7C, 0xFC, 0x3F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         #####    #####  ######    ##################
	0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x7C, 0xFC, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       #######    #####  ######     #################
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x7C, 0xFF, 0x87, 0xFF, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #########    #####  #########    ###########  ###
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x78, 0xFF, 0xE3, 0xFF, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #########    ####   ###########   ##########   ##
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x18, 0x08, 0xFF, 0xF0, 0x7E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ####   ##       #   ############     ######     #
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x00, 0xFF, 0xF8, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ##     ##           #############      ####     #
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x1C, 0x00, 0x7F, 0xF8, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ##     ###           ############        ##     #
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x3F, 0xF8, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ##      ##            ###########        ##     #
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x00, 0x07, 0xF0, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ##     ##                #######         ###   ##
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x18, 0x00, 0x03, 0xF0, 0x07, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ####   ##                 ######         ###  ###
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0xF0, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     #########                   ####          ######
	0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x30, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, //                                     ########                      ##            ####
	0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                       #####
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                         ##
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                                     ##
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                                                     ###
	0xF8, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x03, 0xF8, 0x00, 0x00, 0x00, 0xFF, 0x00, // #####           ###                                                ####       #######                           ########
	0xF8, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x07, 0xF8, 0x00, 0x00, 0x01, 0xFF, 0x00, // #####           ####                                               ####      ########                          #########
	0xF8, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x07, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, // #####          #####                                               ####      ###########                      ##########
	0xF8, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x0F, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0x80, // #####         ######                                               ####     ############                     ############
	0xF8, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x0F, 0xFF, 0x00, 0x00, 0x07, 0xFF, 0x80, // #####         ######                                               ####     ############                     ############
	0xFC, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1F, 0xFF, 0x80, 0x00, 0x07, 0xFF, 0xE0, // ######        ######                                               ####    ##############                    ##############
	0xFE, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x1F, 0x1F, 0x80, 0x00, 0x07, 0xCF, 0xE0, // #######     ########                                               ####    #####   ######                    #####  #######
	0xFF, 0x8F, 0xF0, 0x0F, 0x80, 0x71, 0xC0, 0x03, 0xDE, 0x3F, 0x0F, 0x87, 0xFF, 0x87, 0x83, 0xE0, // #########   ########        #####        ###   ###            #### ####   ######    #####    ############    ####     #####
	0xFF, 0x9F, 0xF0, 0x1F, 0xF0, 0x7F, 0xF0, 0x07, 0xFE, 0x3F, 0x0F, 0x8F, 0xFF, 0xC7, 0x81, 0xE0, // #########  #########       #########     ###########         ##########   ######    #####   ##############   ####      ####
	0xFF, 0x9F, 0xF0, 0x3F, 0xF0, 0x7F, 0xF8, 0x1F, 0xFE, 0x3E, 0x0F, 0x8F, 0xFF, 0xCF, 0x81, 0xE0, // #########  #########      ##########     ############      ############   #####     #####   ##############  #####      ####
	0xFF, 0xBF, 0xF0, 0x3F, 0xF0, 0x7F, 0xF8, 0x1F, 0xFE, 0x3E, 0x0F, 0x8F, 0xFF, 0xCF, 0x81, 0xE0, // ######### ##########      ##########     ############      ############   #####     #####   ##############  #####      ####
	0xFF, 0xFF, 0xF0, 0x7F, 0xF0, 0x7F, 0xF8, 0x3F, 0xFE, 0x3E, 0x0F, 0x8F, 0xFF, 0xCF, 0x81, 0xE0, // ####################     ###########     ############     #############   #####     #####   ##############  #####      ####
	0xFF, 0xFC, 0xF0, 0x7C, 0xF0, 0x7F, 0xFC, 0x7F, 0xFE, 0x3E, 0x0F, 0x87, 0xFF, 0xCF, 0x81, 0xE0, // ##############  ####     #####  ####     #############   ##############   #####     #####    #############  #####      ####
	0xFF, 0xFC, 0xF0, 0xFC, 0x70, 0x7C, 0x7C, 0x7E, 0x3E, 0x3E, 0x0F, 0x80, 0x7F, 0x0F, 0x81, 0xE0, // ##############  ####    ######   ###     #####   #####   ######   #####   #####     #####        #######    #####      ####
	0xFB, 0xFC, 0xF0, 0xF8, 0x70, 0x78, 0x3C, 0x7C, 0x1E, 0x3E, 0x0F, 0x80, 0xFE, 0x0F, 0x81, 0xE0, // ##### ########  ####    #####    ###     ####     ####   #####     ####   #####     #####       #######     #####      ####
	0xF9, 0xF0, 0xF0, 0xFF, 0xF0, 0x78, 0x3C, 0x7C, 0x1E, 0x3F, 0x0F, 0x81, 0xFC, 0x07, 0x81, 0xE0, // #####  #####    ####    ############     ####     ####   #####     ####   ######    #####      #######       ####      ####
	0xF9, 0xF0, 0xF0, 0xFF, 0xF0, 0x78, 0x3C, 0x7C, 0x1E, 0x3F, 0x0F, 0x81, 0xF8, 0x07, 0x81, 0xE0, // #####  #####    ####    ############     ####     ####   #####     ####   ######    #####      ######        ####      ####
	0xF8, 0x60, 0xF0, 0xFC, 0x00, 0x78, 0x3C, 0x7E, 0x3E, 0x1F, 0x0F, 0x87, 0xE0, 0x07, 0xCF, 0xE0, // #####    ##     ####    ######           ####     ####   ######   #####    #####    #####    ######          #####  #######
	0xF8, 0x60, 0xF0, 0xFC, 0x00, 0x78, 0x3C, 0x7E, 0x3E, 0x1F, 0x0F, 0x87, 0xE0, 0x07, 0xCF, 0xE0, // #####    ##     ####    ######           ####     ####   ######   #####    #####    #####    ######          #####  #######
	0xF8, 0x40, 0xF0, 0xFC, 0x00, 0x78, 0x3C, 0x7E, 0x3E, 0x1F, 0x0F, 0x87, 0xE0, 0x07, 0xCF, 0xE0, // #####    #      ####    ######           ####     ####   ######   #####    #####    #####    ######          #####  #######
	0xF8, 0x00, 0xF0, 0x7C, 0x70, 0x78, 0x3C, 0x7F, 0xFE, 0x1F, 0xFF, 0x8F, 0xFF, 0xC7, 0xFF, 0xE0, // #####           ####     #####   ###     ####     ####   ##############    ##############   ##############   ##############
	0xF8, 0x00, 0xF0, 0x7F, 0xF0, 0x78, 0x3C, 0x3F, 0xFE, 0x1F, 0xFF, 0x8F, 0xFF, 0xC7, 0xFF, 0xC0, // #####           ####     ###########     ####     ####    #############    ##############   ##############   #############
	0xF8, 0x00, 0xF0, 0x7F, 0xF0, 0x78, 0x3C, 0x1F, 0xFE, 0x1F, 0xFF, 0x0F, 0xFF, 0xC7, 0xFF, 0x80, // #####           ####     ###########     ####     ####     ############    #############    ##############   ############
	0xF8, 0x00, 0xF0, 0x3F, 0xF0, 0x78, 0x3C, 0x1F, 0xFE, 0x0F, 0xFF, 0x0F, 0xFF, 0xC3, 0xFF, 0x00, // #####           ####      ##########     ####     ####     ############     ############    ##############    ##########
	0xF8, 0x00, 0xF0, 0x3F, 0xF0, 0x78, 0x3C, 0x07, 0xFE, 0x07, 0xFE, 0x0F, 0xFF, 0xC1, 0xFF, 0x00, // #####           ####      ##########     ####     ####       ##########      ##########     ##############     #########
	0xF0, 0x00, 0x60, 0x0F, 0xF0, 0x70, 0x3C, 0x03, 0xCC, 0x03, 0xF8, 0x07, 0xFF, 0xC0, 0xFF, 0x00, // ####             ##         ########     ###      ####        ####  ##        #######        #############      ########
	0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x30, 0x00, //                               ###                                               ###                               ##
};



//
//  Font data for Consolas 6pt
//

// Character bitmaps for Consolas 6pt
const uint8_t consolas_6ptBitmaps[] =
{
	// @0 '!' (1 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x00, //
	0x80, // #
	0x00, //
	0x00, //

	// @9 '"' (3 pixels wide)
	0x00, //
	0xA0, // # #
	0xA0, // # #
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //

	// @18 '#' (4 pixels wide)
	0x00, //
	0x00, //
	0x20, //   #
	0xF0, // ####
	0x20, //   #
	0xF0, // ####
	0x40, //  #
	0x00, //
	0x00, //

	// @27 '$' (4 pixels wide)
	0x00, //
	0x20, //   #
	0x70, //  ###
	0xA0, // # #
	0x60, //  ##
	0x50, //  # #
	0xF0, // ####
	0x40, //  #
	0x00, //

	// @36 '%' (5 pixels wide)
	0x00, //
	0xF0, // ####
	0xF0, // ####
	0x20, //   #
	0x40, //  #
	0x78, //  ####
	0xB8, // # ###
	0x00, //
	0x00, //

	// @45 '&' (4 pixels wide)
	0x00, //
	0xE0, // ###
	0xA0, // # #
	0xC0, // ##
	0xD0, // ## #
	0xA0, // # #
	0xF0, // ####
	0x00, //
	0x00, //

	// @54 ''' (1 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //

	// @63 '(' (3 pixels wide)
	0x00, //
	0x20, //   #
	0x40, //  #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x40, //  #
	0x20, //   #

	// @72 ')' (3 pixels wide)
	0x00, //
	0x80, // #
	0x40, //  #
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0x40, //  #
	0x80, // #

	// @81 '*' (1 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0x80, // #
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //

	// @90 '+' (5 pixels wide)
	0x00, //
	0x00, //
	0x20, //   #
	0x20, //   #
	0xF8, // #####
	0x20, //   #
	0x20, //   #
	0x00, //
	0x00, //

	// @99 ',' (2 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x40, //  #
	0xC0, // ##
	0x00, //

	// @108 '-' (2 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0xC0, // ##
	0x00, //
	0x00, //
	0x00, //
	0x00, //

	// @117 '.' (1 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x80, // #
	0x00, //
	0x00, //

	// @126 '/' (4 pixels wide)
	0x00, //
	0x10, //    #
	0x20, //   #
	0x20, //   #
	0x40, //  #
	0x40, //  #
	0x80, // #
	0x80, // #
	0x00, //

	// @135 '0' (4 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0xB0, // # ##
	0xF0, // ####
	0xD0, // ## #
	0x60, //  ##
	0x00, //
	0x00, //

	// @144 '1' (3 pixels wide)
	0x00, //
	0x00, //
	0xC0, // ##
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @153 '2' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0xA0, // # #
	0x20, //   #
	0x40, //  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @162 '3' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x20, //   #
	0x60, //  ##
	0x20, //   #
	0xE0, // ###
	0x00, //
	0x00, //

	// @171 '4' (4 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0x60, //  ##
	0xA0, // # #
	0xF0, // ####
	0x20, //   #
	0x00, //
	0x00, //

	// @180 '5' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x80, // #
	0xE0, // ###
	0x20, //   #
	0xC0, // ##
	0x00, //
	0x00, //

	// @189 '6' (4 pixels wide)
	0x00, //
	0x00, //
	0x70, //  ###
	0x80, // #
	0xF0, // ####
	0x90, // #  #
	0x60, //  ##
	0x00, //
	0x00, //

	// @198 '7' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x20, //   #
	0x40, //  #
	0x40, //  #
	0x80, // #
	0x00, //
	0x00, //

	// @207 '8' (4 pixels wide)
	0x00, //
	0x00, //
	0xF0, // ####
	0x90, // #  #
	0x60, //  ##
	0x90, // #  #
	0xF0, // ####
	0x00, //
	0x00, //

	// @216 '9' (4 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0x90, // #  #
	0xF0, // ####
	0x10, //    #
	0xE0, // ###
	0x00, //
	0x00, //

	// @225 ':' (1 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x80, // #
	0x00, //
	0x00, //
	0x80, // #
	0x00, //
	0x00, //

	// @234 ';' (2 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x40, //  #
	0x00, //
	0x00, //
	0x40, //  #
	0xC0, // ##
	0x00, //

	// @243 '<' (2 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x40, //  #
	0x80, // #
	0x80, // #
	0x40, //  #
	0x00, //
	0x00, //

	// @252 '=' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xE0, // ###
	0x00, //
	0xE0, // ###
	0x00, //
	0x00, //
	0x00, //

	// @261 '>' (2 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x80, // #
	0x40, //  #
	0x40, //  #
	0x80, // #
	0x00, //
	0x00, //

	// @270 '?' (3 pixels wide)
	0x00, //
	0xC0, // ##
	0x20, //   #
	0x20, //   #
	0xE0, // ###
	0x00, //
	0x80, // #
	0x00, //
	0x00, //

	// @279 '@' (5 pixels wide)
	0x00, //
	0x30, //   ##
	0x48, //  #  #
	0xB8, // # ###
	0xB8, // # ###
	0xB8, // # ###
	0xA8, // # # #
	0x80, // #
	0x70, //  ###

	// @288 'A' (4 pixels wide)
	0x00, //
	0x00, //
	0x20, //   #
	0x50, //  # #
	0x50, //  # #
	0x70, //  ###
	0x90, // #  #
	0x00, //
	0x00, //

	// @297 'B' (4 pixels wide)
	0x00, //
	0x00, //
	0xF0, // ####
	0x90, // #  #
	0xE0, // ###
	0x90, // #  #
	0xF0, // ####
	0x00, //
	0x00, //

	// @306 'C' (3 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0x80, // #
	0x80, // #
	0x80, // #
	0x60, //  ##
	0x00, //
	0x00, //

	// @315 'D' (4 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @324 'E' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x80, // #
	0xE0, // ###
	0x80, // #
	0xE0, // ###
	0x00, //
	0x00, //

	// @333 'F' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x80, // #
	0xE0, // ###
	0x80, // #
	0x80, // #
	0x00, //
	0x00, //

	// @342 'G' (4 pixels wide)
	0x00, //
	0x00, //
	0x70, //  ###
	0x80, // #
	0xB0, // # ##
	0x90, // #  #
	0x70, //  ###
	0x00, //
	0x00, //

	// @351 'H' (4 pixels wide)
	0x00, //
	0x00, //
	0x90, // #  #
	0x90, // #  #
	0xF0, // ####
	0x90, // #  #
	0x90, // #  #
	0x00, //
	0x00, //

	// @360 'I' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @369 'J' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0xE0, // ###
	0x00, //
	0x00, //

	// @378 'K' (3 pixels wide)
	0x00, //
	0x00, //
	0xA0, // # #
	0xC0, // ##
	0xC0, // ##
	0xC0, // ##
	0xA0, // # #
	0x00, //
	0x00, //

	// @387 'L' (3 pixels wide)
	0x00, //
	0x00, //
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0xE0, // ###
	0x00, //
	0x00, //

	// @396 'M' (4 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0x60, //  ##
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0x00, //
	0x00, //

	// @405 'N' (4 pixels wide)
	0x00, //
	0x00, //
	0x90, // #  #
	0xD0, // ## #
	0xD0, // ## #
	0xB0, // # ##
	0x90, // #  #
	0x00, //
	0x00, //

	// @414 'O' (4 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0x60, //  ##
	0x00, //
	0x00, //

	// @423 'P' (4 pixels wide)
	0x00, //
	0x00, //
	0xF0, // ####
	0x90, // #  #
	0xE0, // ###
	0x80, // #
	0x80, // #
	0x00, //
	0x00, //

	// @432 'Q' (4 pixels wide)
	0x00, //
	0x00, //
	0x60, //  ##
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0x60, //  ##
	0x30, //   ##
	0x00, //

	// @441 'R' (3 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0xA0, // # #
	0xC0, // ##
	0xA0, // # #
	0xA0, // # #
	0x00, //
	0x00, //

	// @450 'S' (4 pixels wide)
	0x00, //
	0x00, //
	0xF0, // ####
	0x80, // #
	0x60, //  ##
	0x10, //    #
	0xF0, // ####
	0x00, //
	0x00, //

	// @459 'T' (5 pixels wide)
	0x00, //
	0x00, //
	0xF8, // #####
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0x00, //
	0x00, //

	// @468 'U' (4 pixels wide)
	0x00, //
	0x00, //
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0xF0, // ####
	0x00, //
	0x00, //

	// @477 'V' (3 pixels wide)
	0x00, //
	0x00, //
	0xA0, // # #
	0xA0, // # #
	0xA0, // # #
	0xA0, // # #
	0x40, //  #
	0x00, //
	0x00, //

	// @486 'W' (4 pixels wide)
	0x00, //
	0x00, //
	0x90, // #  #
	0x90, // #  #
	0x90, // #  #
	0xF0, // ####
	0x90, // #  #
	0x00, //
	0x00, //

	// @495 'X' (4 pixels wide)
	0x00, //
	0x00, //
	0x90, // #  #
	0x60, //  ##
	0x20, //   #
	0x60, //  ##
	0x90, // #  #
	0x00, //
	0x00, //

	// @504 'Y' (5 pixels wide)
	0x00, //
	0x00, //
	0x88, // #   #
	0x50, //  # #
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0x00, //
	0x00, //

	// @513 'Z' (4 pixels wide)
	0x00, //
	0x00, //
	0xE0, // ###
	0x20, //   #
	0x40, //  #
	0x80, // #
	0xF0, // ####
	0x00, //
	0x00, //

	// @522 '[' (2 pixels wide)
	0x00, //
	0xC0, // ##
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0xC0, // ##

	// @531 '\' (4 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0x40, //  #
	0x40, //  #
	0x20, //   #
	0x20, //   #
	0x10, //    #
	0x00, //

	// @540 ']' (2 pixels wide)
	0x00, //
	0xC0, // ##
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0xC0, // ##

	// @549 '^' (3 pixels wide)
	0x00, //
	0x00, //
	0x40, //  #
	0xA0, // # #
	0xA0, // # #
	0x00, //
	0x00, //
	0x00, //
	0x00, //

	// @558 '_' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0xF0, // ####

	// @567 '`' (2 pixels wide)
	0x80, // #
	0x40, //  #
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0x00, //

	// @576 'a' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xF0, // ####
	0xF0, // ####
	0x90, // #  #
	0xF0, // ####
	0x00, //
	0x00, //

	// @585 'b' (4 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0xF0, // ####
	0x90, // #  #
	0x90, // #  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @594 'c' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x60, //  ##
	0x80, // #
	0x80, // #
	0xE0, // ###
	0x00, //
	0x00, //

	// @603 'd' (4 pixels wide)
	0x00, //
	0x10, //    #
	0x10, //    #
	0x70, //  ###
	0x90, // #  #
	0x90, // #  #
	0xF0, // ####
	0x00, //
	0x00, //

	// @612 'e' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x70, //  ###
	0xF0, // ####
	0x80, // #
	0x70, //  ###
	0x00, //
	0x00, //

	// @621 'f' (4 pixels wide)
	0x00, //
	0x70, //  ###
	0x40, //  #
	0xE0, // ###
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0x00, //
	0x00, //

	// @630 'g' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xF0, // ####
	0x90, // #  #
	0xF0, // ####
	0xF0, // ####
	0x90, // #  #
	0xE0, // ###

	// @639 'h' (3 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0xE0, // ###
	0xA0, // # #
	0xA0, // # #
	0xA0, // # #
	0x00, //
	0x00, //

	// @648 'i' (3 pixels wide)
	0x00, //
	0x40, //  #
	0x00, //
	0xC0, // ##
	0x40, //  #
	0x40, //  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @657 'j' (3 pixels wide)
	0x00, //
	0x20, //   #
	0x00, //
	0xE0, // ###
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0x20, //   #
	0xE0, // ###

	// @666 'k' (4 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0xA0, // # #
	0xC0, // ##
	0xA0, // # #
	0x90, // #  #
	0x00, //
	0x00, //

	// @675 'l' (3 pixels wide)
	0x00, //
	0xC0, // ##
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @684 'm' (5 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xF8, // #####
	0xA8, // # # #
	0xA8, // # # #
	0xA8, // # # #
	0x00, //
	0x00, //

	// @693 'n' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xE0, // ###
	0xA0, // # #
	0xA0, // # #
	0xA0, // # #
	0x00, //
	0x00, //

	// @702 'o' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x60, //  ##
	0x90, // #  #
	0x90, // #  #
	0x60, //  ##
	0x00, //
	0x00, //

	// @711 'p' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xE0, // ###
	0xA0, // # #
	0xA0, // # #
	0xE0, // ###
	0x80, // #
	0x80, // #

	// @720 'q' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x70, //  ###
	0x90, // #  #
	0x90, // #  #
	0xF0, // ####
	0x10, //    #
	0x10, //    #

	// @729 'r' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xF0, // ####
	0x90, // #  #
	0x80, // #
	0x80, // #
	0x00, //
	0x00, //

	// @738 's' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xE0, // ###
	0x80, // #
	0x60, //  ##
	0xE0, // ###
	0x00, //
	0x00, //

	// @747 't' (4 pixels wide)
	0x00, //
	0x00, //
	0x40, //  #
	0xF0, // ####
	0x40, //  #
	0x40, //  #
	0x70, //  ###
	0x00, //
	0x00, //

	// @756 'u' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xA0, // # #
	0xA0, // # #
	0xA0, // # #
	0xE0, // ###
	0x00, //
	0x00, //

	// @765 'v' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xA0, // # #
	0xA0, // # #
	0xA0, // # #
	0x40, //  #
	0x00, //
	0x00, //

	// @774 'w' (5 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x88, // #   #
	0xB0, // # ##
	0x70, //  ###
	0x50, //  # #
	0x00, //
	0x00, //

	// @783 'x' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x90, // #  #
	0x60, //  ##
	0x60, //  ##
	0x90, // #  #
	0x00, //
	0x00, //

	// @792 'y' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x50, //  # #
	0x50, //  # #
	0x50, //  # #
	0x20, //   #
	0x20, //   #
	0xC0, // ##

	// @801 'z' (3 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0xE0, // ###
	0x40, //  #
	0x40, //  #
	0xE0, // ###
	0x00, //
	0x00, //

	// @810 '{' (3 pixels wide)
	0x00, //
	0x60, //  ##
	0x40, //  #
	0x40, //  #
	0x80, // #
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0x60, //  ##

	// @819 '|' (1 pixels wide)
	0x00, //
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #
	0x80, // #

	// @828 '}' (3 pixels wide)
	0x00, //
	0xC0, // ##
	0x40, //  #
	0x40, //  #
	0x20, //   #
	0x40, //  #
	0x40, //  #
	0x40, //  #
	0xC0, // ##

	// @837 '~' (4 pixels wide)
	0x00, //
	0x00, //
	0x00, //
	0x00, //
	0xD0, // ## #
	0xB0, // # ##
	0x00, //
	0x00, //
	0x00, //
};

// Character descriptors for Consolas 6pt
// { [Char width in bits], [Offset into consolas_6ptCharBitmaps in bytes] }
const uint16_t consolas_6ptDescriptors[][] =
{
	{1, 0}, 		// !
	{3, 9}, 		// "
	{4, 18}, 		// #
	{4, 27}, 		// $
	{5, 36}, 		// %
	{4, 45}, 		// &
	{1, 54}, 		// '
	{3, 63}, 		// (
	{3, 72}, 		// )
	{1, 81}, 		// *
	{5, 90}, 		// +
	{2, 99}, 		// ,
	{2, 108}, 		// -
	{1, 117}, 		// .
	{4, 126}, 		// /
	{4, 135}, 		// 0
	{3, 144}, 		// 1
	{3, 153}, 		// 2
	{3, 162}, 		// 3
	{4, 171}, 		// 4
	{3, 180}, 		// 5
	{4, 189}, 		// 6
	{3, 198}, 		// 7
	{4, 207}, 		// 8
	{4, 216}, 		// 9
	{1, 225}, 		// :
	{2, 234}, 		// ;
	{2, 243}, 		// <
	{3, 252}, 		// =
	{2, 261}, 		// >
	{3, 270}, 		// ?
	{5, 279}, 		// @
	{4, 288}, 		// A
	{4, 297}, 		// B
	{3, 306}, 		// C
	{4, 315}, 		// D
	{3, 324}, 		// E
	{3, 333}, 		// F
	{4, 342}, 		// G
	{4, 351}, 		// H
	{3, 360}, 		// I
	{3, 369}, 		// J
	{3, 378}, 		// K
	{3, 387}, 		// L
	{4, 396}, 		// M
	{4, 405}, 		// N
	{4, 414}, 		// O
	{4, 423}, 		// P
	{4, 432}, 		// Q
	{3, 441}, 		// R
	{4, 450}, 		// S
	{5, 459}, 		// T
	{4, 468}, 		// U
	{3, 477}, 		// V
	{4, 486}, 		// W
	{4, 495}, 		// X
	{5, 504}, 		// Y
	{4, 513}, 		// Z
	{2, 522}, 		// [
	{4, 531}, 		// '\'
	{2, 540}, 		// ]
	{3, 549}, 		// ^
	{4, 558}, 		// _
	{2, 567}, 		// `
	{4, 576}, 		// a
	{4, 585}, 		// b
	{3, 594}, 		// c
	{4, 603}, 		// d
	{4, 612}, 		// e
	{4, 621}, 		// f
	{4, 630}, 		// g
	{3, 639}, 		// h
	{3, 648}, 		// i
	{3, 657}, 		// j
	{4, 666}, 		// k
	{3, 675}, 		// l
	{5, 684}, 		// m
	{3, 693}, 		// n
	{4, 702}, 		// o
	{3, 711}, 		// p
	{4, 720}, 		// q
	{4, 729}, 		// r
	{3, 738}, 		// s
	{4, 747}, 		// t
	{3, 756}, 		// u
	{3, 765}, 		// v
	{5, 774}, 		// w
	{4, 783}, 		// x
	{4, 792}, 		// y
	{3, 801}, 		// z
	{3, 810}, 		// {
	{1, 819}, 		// |
	{3, 828}, 		// }
	{4, 837}, 		// ~
};

/*	Hardware constants		*/
const uint8_t SSD1306_I2C_ADDR = 0X3C;

const uint8_t SSD1306_CTRL_BYTE = 0b10000000;
const uint8_t SSD1306_DATA_BYTE = 0b01000000;

/*Fundamental Command Table*/
const uint8_t SET_CONTRAST_CTRL = 0X81;                     //
const uint8_t ENTIRE_DISPLAY_ON = 0XA4;                     //
const uint8_t ENTIRE_DISPLAY_ON_HOME = 0XA5;                //
const uint8_t SET_NORMAL_DISPLAY = 0XA6;                    //
const uint8_t SET_INVERSE_DISPLAY = 0XA7;                   //
const uint8_t SET_DISPLAY_ON = 0XAF;                        //
const uint8_t SET_DISPLAY_OFF = 0XAE;                       //

/*Hardware Configuration (Panel resolution & layout related) Command Table*/
const uint8_t SET_MUX_RATIO = 0XA8;
const uint8_t SET_DISPLAY_START_LINE = 0X40;                //
const uint8_t SET_SEGMENT_REMAP_COL_0 = 0XA0;               //
const uint8_t SET_SEGMENT_REMAP_COL_127 = 0XA1;             //
const uint8_t SET_COM_OUTPUT_SCAN_DIR_UP_DOWN = 0XC0;       //
const uint8_t SET_COM_OUTPUT_SCAN_DIR_DOWN_UP = 0XC8;       //
const uint8_t SET_DISPLAY_OFFSET = 0XD3;                    //
const uint8_t SET_COM_PINS_HARDWARE_CONFIG = 0XDA;          //

/*Timing & Driving Scheme Setting Command Table*/
const uint8_t SET_DISPLAY_CLOCK_RATIO = 0XD5;               //
const uint8_t SET_PRECHARGE_PERIOD = 0XD9;                  //
const uint8_t SET_VCOMH_DESELECT_LEVEL = 0XDB;              //
const uint8_t NOP = 0XE3;                                   //

/*Charge Pump Command Table */
const uint8_t SET_CHARGE_PUMP = 0X8D;                       //
/*
 * Note:    The Charge Pump must be enabled by the following command:
            8Dh ; Charge Pump Setting
            14h ; Enable Charge Pump
            AFh; Display ON
*/

const uint8_t	CMD_TEMP_BUFF = 100;
const uint16_t	DATA_TEMP_BUFF = 4000;

/****************************************************************************************************
***********************     STATIC/LOCAL FUNCTIONS DECLARATION      *********************************
*****************************************************************************************************/
static void SSD1306InitProcedure( void );
static int8_t SSD1306ScrollText( void );
static int8_t SSD1306ClearDisplay( void );
static int8_t SSD1306SendData( uint8_t *data, uint32_t buffSize);
static int8_t SSD1306SendCommand( uint8_t *command, uint8_t buffSize);

/****************************************************************************************************
****************************         GLOBAL FUNTIONS         ****************************************
*****************************************************************************************************/
void _init_SSD1306( void )
{
	ssd1306.mend0z0Logo = &mend0z0Logo_simpleBitmaps[0];
	ssd1306.consolas_6pt = &consolas_6ptBitmaps[0];

	SSD1306InitProcedure();

    //Display scrolling Mend0z0 Logo
    while(1){

    }
}

int8_t SSD1306TypeTxt( char *txt, uint8_t locX, uint8_t locY)
{

}

int8_t SSD1306DisplayPic( uint8_t pictureIndex, uint8_t locX, uint8_t locY)
{

}




/****************************************************************************************************
****************************         STATIC FUNTIONS         ****************************************
*****************************************************************************************************/
static void SSD1306InitProcedure( void )
{
	uint8_t initCmd[20];
	const TickType_t xDelay500ms = pdMS_TO_TICKS( 500UL );

	initCmd[0] = SET_MUX_RATIO;
	initCmd[1] = 0X3F;
	initCmd[2] = SET_DISPLAY_OFFSET;
	initCmd[3] = 0X00;
	initCmd[4] = SET_DISPLAY_START_LINE;
	initCmd[5] = SET_SEGMENT_REMAP_COL_0;
	initCmd[6] = SET_COM_OUTPUT_SCAN_DIR_UP_DOWN;
	initCmd[7] = SET_COM_PINS_HARDWARE_CONFIG;
	initCmd[8] = 0X02;
	initCmd[9] = SET_CONTRAST_CTRL;
	initCmd[10] = 0X7F;
	initCmd[11] = ENTIRE_DISPLAY_ON;
	initCmd[12] = SET_NORMAL_DISPLAY;
	initCmd[13] = SET_DISPLAY_CLOCK_RATIO;
	initCmd[14] = 0X80;
	initCmd[15] = SET_DISPLAY_OFFSET;
	initCmd[16] = 0X00;
	initCmd[17] = SET_CHARGE_PUMP;
	initCmd[18] = 0X14;
	initCmd[19] = SET_DISPLAY_ON;

    //Keep the module in reset state
    CLR_PIN( SSD1306_PORT_RST, SSD1306_PIN_RST);

    vTaskDelay( xDelay500ms );

    //Enable the module by pulling high the reset pin.
    SET_PIN( SSD1306_PORT_RST, SSD1306_PIN_RST);

    //Configure the internal registers of SSD1306
    SSD1306SendCommand( initCmd, 20);
}

static int8_t SSD1306SendData( uint8_t *data, uint16_t buffSize){
    uint16_t cnt = 0;
    uint8_t tempBuffer[DATA_TEMP_BUFF];
    int8_t i2cStatus = 0;

    // We need to define the type of data for each data byte,
    // So in this for loop we fill each byte with it's type.
    for(cnt = buffSize; cnt > 1; cnt - 2)
    {
        tempBuff[(cnt - 1)] = SSD1306_DATA_BYTE;
        tempBuff[(cnt - 2)] = *data++;				//load the tempBuff and increase the pointer value by 1
    }

    i2cStatus = FMPI2C1DataTx( SSD1306_I2C_ADDR, tempBuffer, (buffSize * 2));

    //if we received NACk, we'll try to init OLED repeatedly until it backs to normal condition.
    if(i2cStatus < pdFALSE){
    	SSD1306InitProcedure();
    }

    return i2cStatus;
}

static int8_t SSD1306SendCommand( uint8_t *command, uint8_t buffSize){
    uint8_t cnt = 0;
    uint8_t tempBuffer[CMD_TEMP_BUFF];

    // We need to define the type of data for each data byte,
    // So in this for loop we fill each byte with it's type.
    for(cnt = buffSize; cnt > 1; cnt - 2)
    {
    	tempBuff[(cnt - 1)] = SSD1306_CTRL_BYTE;
    	tempBuff[(cnt - 2)] = *command++;			//load the tempBuff and increase the pointer value by 1
    }

    while(1)
    {
    	//we'll keep sending the data, if a value more than 0
    	//(which means the number of data that has been sent) returned. It means the data has been sent and it was successful.
    	if(FMPI2C1DataTx( SSD1306_I2C_ADDR, tempBuffer, (buffSize * 2)) > 0){
    		break;
    	}
    }
    return pdTRUE;
}

/***************************************************************************************************/
/**********************************                             ************************************/
/********************                     END OF THE CODE                         ******************/
/**********************************                             ************************************/
/***************************************************************************************************/

/*                                   GLOBAL FUNCTION TEMPLATE                                      */

/****************************************************************************************************
*   @Brief Description:
*   Function Status: 	DRAFT   (DRAFT , PRILIMINARY, CHECKED, RELEASED)
*
*	************************************************************************************************
*	Function Name:
*	Function Scope:			Global
*	Function Parameters:
*	Function Return Type:
*	************************************************************************************************
*	@Detailed Description: (Do numbering and tag the number to each part of code)
*	(1)
*	(2)
*	(3)
*	.
*	.
*	.
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/

/*                               STATIC/LOCAL FUNCTION TEMPLATE                                    */

/****************************************************************************************************
*   @Brief Description:
*   Function Status: 	DRAFT   (DRAFT , PRELIMINARY, CHECKED, RELEASED)
*
*	************************************************************************************************
*	Function Name:
*	Function Scope:         Local(static)
*	Function Parameters:
*	Function Return Type:
*	************************************************************************************************
*	@Detailed Description: (Do numbering and tag the number to each part of code)
*	(1)
*	(2)
*	(3)
*	.
*	.
*	.
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/

/************************************     END OF THE FILE      *************************************/
