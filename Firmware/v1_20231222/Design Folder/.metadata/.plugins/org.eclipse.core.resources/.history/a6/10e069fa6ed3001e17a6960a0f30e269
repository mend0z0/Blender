/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

#define	LED_IND_PIN	GPIO_ODR_OD2
#define	LED_IND_PORT	GPIOD->ODR

#define	EXT_LDO_EN_PIN	GPIO_ODR_OD0
#define	EXT_LDO_EN_PORT	GPIOC->ODR

#define	DMX_RESET_VALUE_R	1U	// Reset value for the color R that the variable will be set with
#define	DMX_RESET_VALUE_G	1U	// Reset value for the color G that the variable will be set with
#define	DMX_RESET_VALUE_B	1U	// Reset value for the color B that the variable will be set with

#define	DMX_CONSTANT_VALUE_R	0x01	// Constant value for the color R to be added to the variable value
#define	DMX_CONSTANT_VALUE_G	0x02	// Constant value for the color G to be added to the variable value
#define	DMX_CONSTANT_VALUE_B	0x04	// Constant value for the color B to be added to the variable value

#define	DMX_MAX_HEAD		2U	// Maximum number of DMX receivers (Head light)


struct dmx_colors{			// A structure of RGB (8/8/8) colors for DMX receivers.
  uint8_t colorRed;
  uint8_t colorGreen;
  uint8_t colorBlue;
}dmx_head[DMX_MAX_HEAD];

struct dmx_channel{
  uint8_t startCode;
  struct dmx_colors dmx_head[DMX_MAX_HEAD];
};

uint8_t uartFinishedFlag = false;
uint8_t outputStr[] = "Hello World";

static void _init_RCC( void );
static void _init_GPIO( void );
static void _init_DMA( void );
static void DMAEnable( uint16_t numOfTransfer);
static void DMADisable( void );
static void _init_UART1( void );

void _init_DMX( void );
int8_t DMXHeadUpdate( uint8_t *colors, uint32_t numOfHead);

int32_t UART1DataTx( uint8_t *data, uint16_t buffSize);

void DMA2_Stream7_IRQHandler( void )
{
  DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
  DMA2_Stream7->CR &= ~DMA_SxCR_EN;
  uartFinishedFlag = true;
}


/*
void UARTSimpleTransfer( void )
{
  uint8_t data[] = "Hello world";
  for(uint8_t cnt = 0; cnt < 11; ++cnt)
    {
      USART1->DR = data[cnt];
      while(!(USART1->SR & USART_SR_TC));
      USART1->SR &= ~USART_SR_TC;
    }
}
*/

int main(void)
{
  _init_RCC();
  _init_GPIO();

  SET_BIT( EXT_LDO_EN_PORT, EXT_LDO_EN_PIN);	//Enable the LDO power to turn the modules on

  while (1)
    {
      UART1DataTx( &outputStr[0], 5);
      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
	{
	  CLEAR_BIT(LED_IND_PORT, LED_IND_PIN);	// (5)
  	}
      else
	{
  	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
  	}
      for(uint32_t i = 0; i < 1800000; ++i);
    }
}

static void _init_RCC( void )
{

  ////--------------Enabling the HSE
  RCC->CR |= RCC_CR_HSEON;				// (1)
  while((RCC->CR & RCC_CR_HSERDY) == 0)			// (2)
    {
      //maybe add a time out later
    }

  ////--------------Configuration for PLLs
  RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;			// (3)

  // Fosc_in = 16 MHz
  // PLLM = 6
  // PLLN = 120
  // PLLP = 2
  // Fpll = (16 * (240 / 6)) / 4 = 160 MHz

  RCC->PLLCFGR |= 0x06 | (0xF0 << 6);
  RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;	// DIVIDE BY 4

  RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_1;			// (5)


  RCC->CR |= RCC_CR_PLLON;				// (6)

  while((RCC->CR & RCC_CR_PLLRDY) == 0)			// (7)
    {
      //maybe add a time out later
    }

  RCC->CFGR |= RCC_CFGR_HPRE_3;				// 80MHz
  RCC->CFGR |= RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_2; 	// 40MHz
  RCC->CFGR |= RCC_CFGR_PPRE2_2;			// 80MHz

  RCC->CFGR |= RCC_CFGR_SW_1;				// (8)
  while((RCC->CFGR & RCC_CFGR_SWS_1) != RCC_CFGR_SWS_1)	// (9)
    {
      //maybe add a time out later
    }

  RCC->AHB1ENR |= (	RCC_AHB1ENR_GPIOAEN |		// (13)
			RCC_AHB1ENR_GPIOBEN |		// (14)
			RCC_AHB1ENR_GPIOCEN |		// (15)
			RCC_AHB1ENR_GPIODEN		// (16)
  );

  RCC->AHB1ENR |= (	RCC_AHB1ENR_DMA1EN	| 	// (17)
			RCC_AHB1ENR_DMA2EN		// (18)
  );

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;			// (27)
}

static void _init_GPIO( void )
{
  /*		MODER REGs		*/
  GPIOA->MODER |= (	GPIO_MODER_MODER4_0  | GPIO_MODER_MODER4_1 |				// (1)
			GPIO_MODER_MODER6_0  |							// (2)
			GPIO_MODER_MODER0_0  | GPIO_MODER_MODER0_1 |  				// (3)
			GPIO_MODER_MODER1_0  | GPIO_MODER_MODER1_1 |  				// (4)
			GPIO_MODER_MODER2_0  | GPIO_MODER_MODER2_1 |  				// (5)
			GPIO_MODER_MODER9_1  |							// (6)
			GPIO_MODER_MODER10_1 |							// (7)
			GPIO_MODER_MODER3_1  |							// (8)
			GPIO_MODER_MODER5_1  |							// (9)
			GPIO_MODER_MODER15_1							// (10)
  );

  GPIOB->MODER |= (	GPIO_MODER_MODER13_0 |							// (11)
			GPIO_MODER_MODER14_0 |							// (12)
			GPIO_MODER_MODER15_0 |							// (13)
			GPIO_MODER_MODER3_1  |							// (14)
			GPIO_MODER_MODER5_1  |							// (15)
			GPIO_MODER_MODER0_1  |							// (16)
			GPIO_MODER_MODER1_1  |							// (17)
			GPIO_MODER_MODER7_1	 						// (18)
  );

  GPIOC->MODER |= (	GPIO_MODER_MODER0_0  |							// (19)
			GPIO_MODER_MODER8_0  |							// (20)
			GPIO_MODER_MODER9_0  |							// (21)
			GPIO_MODER_MODER4_1  |							// (22)
			GPIO_MODER_MODER6_1	 |						// (23)
			GPIO_MODER_MODER7_1							// (24)
  );

  GPIOD->MODER |= GPIO_MODER_MODER2_0;								// (25)

  /*		OSPEEDR	REGs	*/
  GPIOA->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (26)
			GPIO_OSPEEDR_OSPEED5_0	|						// (27)
			GPIO_OSPEEDR_OSPEED15_0	|
			GPIO_OSPEEDR_OSPEED9_0  | GPIO_OSPEEDR_OSPEED9_1
  );

  GPIOB->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (29)
			GPIO_OSPEEDR_OSPEED5_0	|						// (30)
			GPIO_OSPEEDR_OSPEED0_0	| GPIO_OSPEEDR_OSPEED0_1 |			// (31)
			GPIO_OSPEEDR_OSPEED1_0	|						// (32)
			GPIO_OSPEEDR_OSPEED7_0							// (33)
  );
  /*		AFRL REGs		*/
  GPIOA->AFR[0] |= (	GPIO_AFRL_AFSEL3_0   |							// (34)
			GPIO_AFRL_AFSEL5_0	 						// (35)
  );

  GPIOA->AFR[1] |= (	(GPIO_AFRH_AFSEL9_0  | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2) |	// (36)
			(GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2) |	// (37)
			(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2)				// (38)
  );

  GPIOB->AFR[0] |= (	(GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_2) |				// (39)
			(GPIO_AFRL_AFSEL5_0 | GPIO_AFRL_AFSEL5_2) |				// (40)
			GPIO_AFRL_AFSEL0_1 	|						// (41)
			GPIO_AFRL_AFSEL1_1 	|						// (42)
			GPIO_AFRL_AFSEL7_3							// (43)
  );

  GPIOC->AFR[0] |= (	GPIO_AFRL_AFSEL6_2	|						// (44)
			GPIO_AFRL_AFSEL7_2							// (45)
  );

  /*	RESET VALUE	*/
  GPIOA->ODR = 0;																				// (46)
  GPIOB->ODR = 0;																				// (47)
  GPIOC->ODR = 0;																				// (48)
  GPIOD->ODR = 0;																				// (49)
}

static void _init_DMA( void )
{
  static bool initFlag = false;	// To check if it's already initialized!
  if(initFlag == true)		// if it's been initialized
    {
      return;				// simply return from the function
    }

  DMA2_Stream7->CR |= DMA_SxCR_CHSEL_2	|				// (7)
		      DMA_SxCR_MINC	|				// (8)
		      DMA_SxCR_DIR_0	|				// (9)
		      DMA_SxCR_TCIE	|
		      DMA_SxCR_PL_0	| DMA_SxCR_PL_1;// |
		      //DMA_SxCR_PFCTRL;	 				// (10)

  DMA2_Stream7->PAR = (uint32_t)&USART1->DR;
  DMA2_Stream7->M0AR = &outputStr[0];		// (11)

  NVIC_SetPriority( DMA2_Stream7_IRQn, 0);	// Set Interrupts priority.
  NVIC_EnableIRQ( DMA2_Stream7_IRQn);					// Enable Required Interrupts.

  DMA2_Stream7->CR &= ~DMA_SxCR_EN;

  initFlag = true;
}

static void DMAEnable(uint16_t numOfTransfer )
{
  _init_DMA();

  DMA2_Stream7->NDTR = numOfTransfer;
  DMA2->HIFCR |= DMA_HIFCR_CTCIF7;	// clearing the DMA flag before enabling the DMA
  DMA2_Stream7->CR |= DMA_SxCR_EN;

}

static void DMADisable( void )
{
  DMA2_Stream7->CR &= ~DMA_SxCR_EN;	// (2)
}

static void _init_UART1( void )
{
  static bool initFlag = false;
  if(initFlag == true)
    {
      return;
    }

  USART1->BRR = (0x209 << 4);				// (1)
  USART1->CR2 |= USART_CR2_STOP_1;			// (2)
  USART1->CR3 |= USART_CR3_DMAT;			// (3)
  USART1->CR1 |= USART_CR1_TE;				// (4)
  //NVIC_SetPriority(USART1_IRQn, USART1_IRQ_PRIORITY);	// Set Interrupts priority.
  //NVIC_EnableIRQ(USART1_IRQn);				// Enable Required Interrupts.

  initFlag = true;
}

int32_t UART1DataTx( uint8_t *data, uint16_t buffSize)
{
  __IO int32_t status = 0;

  _init_UART1();

  DMAEnable(buffSize);

  USART1->CR1 |= USART_CR1_UE;// | USART_CR1_TCIE;
  USART1->SR &= ~USART_SR_TC;


  while(1)
    {
      // (USART1->SR & USART_SR_TC) == USART_SR_TC
      // (DMA2->HISR & DMA_HISR_TCIF7) == DMA_HISR_TCIF7
      /*if(uartFinishedFlag)
	{
	  DMADisable();
	  uartFinishedFlag = false;
	  USART1->SR &= ~USART_SR_TC;
	  status = (int32_t)buffSize;
	  break;
	}*/
      while((USART1->SR & USART_SR_TC) != USART_SR_TC);
      uartFinishedFlag = false;
      USART1->SR &= ~USART_SR_TC;
      status = (int32_t)buffSize;
      break;
    }

  //UARTSimpleTransfer();

  USART1->CR1 &= ~USART_CR1_UE;
  return status;
}

void _init_DMX( void )
{
  static uint8_t cnt = 0;

  static struct dmx_channel dmx_ch_1;

  //	(1)
  dmx_ch_1.startCode = 0X00;
  dmx_ch_1.dmx_head[cnt].colorRed = (dmx_head[cnt].colorRed << 1) | DMX_CONSTANT_VALUE_R;	// (3)
  dmx_ch_1.dmx_head[cnt].colorGreen = (dmx_head[cnt].colorGreen << 1) | DMX_CONSTANT_VALUE_G;	// (4)
  dmx_ch_1.dmx_head[cnt].colorBlue = (dmx_head[cnt].colorBlue << 1) | DMX_CONSTANT_VALUE_B;	// (5)

  cnt++;																				// (6)

  if(cnt == DMX_MAX_HEAD)																// (7)
    {
      cnt = 0;
      for(cnt = 0; cnt < DMX_MAX_HEAD; ++cnt)
        {
	  dmx_ch_1.dmx_head[cnt].colorRed = DMX_RESET_VALUE_R;
	  dmx_ch_1.dmx_head[cnt].colorGreen = DMX_RESET_VALUE_G;
	  dmx_ch_1.dmx_head[cnt].colorBlue = DMX_RESET_VALUE_B;
        }
      return;
    }

  DMXHeadUpdate( &dmx_ch_1.startCode, (4));				// (9)
}

int8_t DMXHeadUpdate( uint8_t *colors, uint32_t numOfHead)
{
	return (int8_t)UART1DataTx( "Hello World", 10);	// (1)
}
