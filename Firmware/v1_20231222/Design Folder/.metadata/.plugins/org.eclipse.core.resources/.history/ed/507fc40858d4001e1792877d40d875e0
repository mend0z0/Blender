/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

#define	LED_IND_PIN	GPIO_ODR_OD2
#define	LED_IND_PORT	GPIOD->ODR

#define	EXT_LDO_EN_PIN	GPIO_ODR_OD0
#define	EXT_LDO_EN_PORT	GPIOC->ODR

#define	DMA_TRANSFER_NO		48U

#define	WS2812_T_0H		6U			// IT SHOULD BE AROUND 0.4 usec
#define	WS2812_T_1H		11U			// IT SHOULD BE AROUND 0.8 usec
#define	WS2812_T_BIT		18U			// IT SHOULD BE 1.25 usec
#define	WS2812_T_RES		(48 *  WS2812_T_BIT)UL	// IT SHOULD BE MORE THAN 50 usec

#define	WS2812_MAX_PIXEL_NO	7U
#define	WS2812_COLOR_BITS	8U

struct ws2812_bits
{
    uint16_t green[WS2812_COLOR_BITS];
    uint16_t red[WS2812_COLOR_BITS];
    uint16_t blue[WS2812_COLOR_BITS];
}ws2812_pixel[2];

struct ws2812_color
{
  uint8_t colorGreen;
  uint8_t colorRed;
  uint8_t colorBlue;
}ws2812_string[WS2812_MAX_PIXEL_NO];

void DMA1_Stream7_IRQHandler( void )
{
  static uint8_t ws2812PixelCnt = 0;
  static uint8_t ws2812ResetCnt = 0;
  static bool ws2812PixelIndex = 0;
  uint8_t cnt;

  if(DMA1->HISR & DMA_HISR_HTIF7)
    {
      DMA1->HIFCR |= DMA_HIFCR_CHTIF7;
    }
  else if(DMA1->HISR & DMA_HISR_TCIF7)
    {
      DMA1->HIFCR |= DMA_HIFCR_CTCIF7;
    }

  ws2812PixelCnt++;

  if((ws2812PixelCnt == WS2812_MAX_PIXEL_NO) && (ws2812ResetCnt != 2))
    {
      /*
       * do something that takes more than 50usec
       */
      for(cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt)
	{
	  ws2812_pixel[0].green[cnt] = 0;
	  ws2812_pixel[0].red[cnt] = 0;
	  ws2812_pixel[0].blue[cnt] = 0;
	  ws2812_pixel[1].green[cnt] = 0;
	  ws2812_pixel[1].red[cnt] = 0;
	  ws2812_pixel[1].blue[cnt] = 0;
	}

      ws2812ResetCnt++;
      if(ws2812ResetCnt == 2)
	{
	  ws2812PixelCnt = 0;
	}
      return;

    }


  ws2812PixelIndex ^= 1;	// toggle the index between odd and evens.
  ws2812ResetCnt = 0;

  for(cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt)
    {
      ws2812_pixel[ws2812PixelIndex].green[cnt] = WS2812_T_0H;
      ws2812_pixel[ws2812PixelIndex].red[cnt] = WS2812_T_0H;
      ws2812_pixel[ws2812PixelIndex].blue[cnt] = WS2812_T_0H;
      if((ws2812_string[ws2812PixelCnt].colorGreen & (1 << (7 - cnt))) == (1 << (7 - cnt)))
	{
	  ws2812_pixel[ws2812PixelIndex].green[cnt] = WS2812_T_1H;
	}
      if((ws2812_string[ws2812PixelCnt].colorRed & (1 << (7 - cnt))) == (1 << (7 - cnt)))
	{
	  ws2812_pixel[ws2812PixelIndex].red[cnt] = WS2812_T_1H;
	}
      if((ws2812_string[ws2812PixelCnt].colorBlue & (1 << (7 - cnt))) == (1 << (7 - cnt)))
	{
	  ws2812_pixel[ws2812PixelIndex].blue[cnt] = WS2812_T_1H;
	}
    }
}

static void _init_RCC( void );
static void _init_GPIO( void );

void _init_WS2812( void );

int main(void)
{
  _init_RCC();
  _init_GPIO();

  SET_BIT( EXT_LDO_EN_PORT, EXT_LDO_EN_PIN);	//Enable the LDO power to turn the modules on

  while (1)
  {
      _init_WS2812();

      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
	{
	  CLEAR_BIT(LED_IND_PORT, LED_IND_PIN);	// (5)
  	}
      else
	{
  	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
  	}
      for(uint32_t i = 0; i < 90000000; ++i);
  }
}

static void _init_RCC( void )
{

  ////--------------Enabling the HSE
  RCC->CR |= RCC_CR_HSEON;				// (1)
  while((RCC->CR & RCC_CR_HSERDY) == 0)			// (2)
    {
      //maybe add a time out later
    }

  ////--------------Configuration for PLLs
  RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;			// (3)

  // Fosc_in = 16 MHz
  // PLLM = 10
  // PLLN = 200
  // PLLP = 2
  // Fpll = (16 * (240 / 6)) / 4 = 160 MHz

  RCC->PLLCFGR |= 0x0A | (0xC8 << 6);
  //RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;	// DIVIDE BY 4

  RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_1;			// (5)


  RCC->CR |= RCC_CR_PLLON;				// (6)

  while((RCC->CR & RCC_CR_PLLRDY) == 0)			// (7)
    {
      //maybe add a time out later
    }

  RCC->CFGR |= RCC_CFGR_HPRE_3;				// 80MHz
  RCC->CFGR |= RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_2; 	// 40MHz
  RCC->CFGR |= RCC_CFGR_PPRE2_2;			// 80MHz

  RCC->CFGR |= RCC_CFGR_SW_1;				// (8)
  while((RCC->CFGR & RCC_CFGR_SWS_1) != RCC_CFGR_SWS_1)	// (9)
    {
      //maybe add a time out later
    }

  RCC->AHB1ENR |= (	RCC_AHB1ENR_GPIOAEN |		// (13)
			RCC_AHB1ENR_GPIOBEN |		// (14)
			RCC_AHB1ENR_GPIOCEN |		// (15)
			RCC_AHB1ENR_GPIODEN		// (16)
  );

  RCC->AHB1ENR |= (	RCC_AHB1ENR_DMA1EN	| 	// (17)
			RCC_AHB1ENR_DMA2EN		// (18)
  );

  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;			// (25)
}

static void _init_GPIO( void )
{
  /*		MODER REGs		*/
  GPIOA->MODER |= (	GPIO_MODER_MODER4_0  | GPIO_MODER_MODER4_1 |				// (1)
			GPIO_MODER_MODER6_0  |							// (2)
			GPIO_MODER_MODER0_0  | GPIO_MODER_MODER0_1 |  				// (3)
			GPIO_MODER_MODER1_0  | GPIO_MODER_MODER1_1 |  				// (4)
			GPIO_MODER_MODER2_0  | GPIO_MODER_MODER2_1 |  				// (5)
			GPIO_MODER_MODER9_1  |							// (6)
			GPIO_MODER_MODER10_1 |							// (7)
			GPIO_MODER_MODER3_1  |							// (8)
			GPIO_MODER_MODER5_1  |							// (9)
			GPIO_MODER_MODER15_1							// (10)
  );

  GPIOB->MODER |= (	GPIO_MODER_MODER13_0 |							// (11)
			GPIO_MODER_MODER14_0 |							// (12)
			GPIO_MODER_MODER15_0 |							// (13)
			GPIO_MODER_MODER3_1  |							// (14)
			GPIO_MODER_MODER5_1  |							// (15)
			GPIO_MODER_MODER0_1  |							// (16)
			GPIO_MODER_MODER1_1  |							// (17)
			GPIO_MODER_MODER7_1	 						// (18)
  );

  GPIOC->MODER |= (	GPIO_MODER_MODER0_0  |							// (19)
			GPIO_MODER_MODER8_0  |							// (20)
			GPIO_MODER_MODER9_0  |							// (21)
			GPIO_MODER_MODER4_1  |							// (22)
			GPIO_MODER_MODER6_1	 |						// (23)
			GPIO_MODER_MODER7_1							// (24)
  );

  GPIOD->MODER |= GPIO_MODER_MODER2_0;								// (25)

  /*		OSPEEDR	REGs	*/
  GPIOA->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (26)
			GPIO_OSPEEDR_OSPEED5_0	|						// (27)
			GPIO_OSPEEDR_OSPEED15_0	|
			GPIO_OSPEEDR_OSPEED9_0  | GPIO_OSPEEDR_OSPEED9_1
  );

  GPIOB->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (29)
			GPIO_OSPEEDR_OSPEED5_0	|						// (30)
			GPIO_OSPEEDR_OSPEED0_0	| GPIO_OSPEEDR_OSPEED0_1 |			// (31)
			GPIO_OSPEEDR_OSPEED1_0	|						// (32)
			GPIO_OSPEEDR_OSPEED7_0							// (33)
  );

  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR9_1;	// internal pull down resistor


  /*		AFRL REGs		*/
  GPIOA->AFR[0] |= (	GPIO_AFRL_AFSEL3_0   |							// (34)
			GPIO_AFRL_AFSEL5_0	 						// (35)
  );

  GPIOA->AFR[1] |= (	(GPIO_AFRH_AFSEL9_0  | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2) |	// (36)
			(GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2) |	// (37)
			(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2)				// (38)
  );

  GPIOB->AFR[0] |= (	(GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_2) |				// (39)
			(GPIO_AFRL_AFSEL5_0 | GPIO_AFRL_AFSEL5_2) |				// (40)
			GPIO_AFRL_AFSEL0_1 	|						// (41)
			GPIO_AFRL_AFSEL1_1 	|						// (42)
			GPIO_AFRL_AFSEL7_3							// (43)
  );

  GPIOC->AFR[0] |= (	GPIO_AFRL_AFSEL6_2	|						// (44)
			GPIO_AFRL_AFSEL7_2							// (45)
  );

  /*	RESET VALUE	*/
  GPIOA->ODR = 0;										// (46)
  GPIOB->ODR = 0;										// (47)
  GPIOC->ODR = 0;										// (48)
  GPIOD->ODR = 0;										// (49)
}

void _init_DMA( void )
{
  static bool initFlag = false;	// To check if it's already initialized!
  if(initFlag == true)		// if it's been initialized
    {
      return;				// simply return from the function
    }

  for(uint8_t cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt){
      ws2812_pixel[0].green[cnt] = WS2812_T_0H;
      ws2812_pixel[0].red[cnt] = WS2812_T_0H;
      ws2812_pixel[0].blue[cnt] = WS2812_T_0H;
      ws2812_pixel[1].green[cnt] = WS2812_T_0H;
      ws2812_pixel[1].red[cnt] = WS2812_T_0H;
      ws2812_pixel[1].blue[cnt] = WS2812_T_0H;
  }

  DMA1_Stream7->CR |= DMA_SxCR_CHSEL_2	| DMA_SxCR_CHSEL_0 |
		      DMA_SxCR_PL_0	| DMA_SxCR_PL_1	   |
		      DMA_SxCR_MSIZE_0	|
		      DMA_SxCR_PSIZE_0	|
		      DMA_SxCR_MINC	|
		      DMA_SxCR_CIRC	|
  		      DMA_SxCR_DIR_0	|
		      DMA_SxCR_TCIE	|
		      DMA_SxCR_HTIE;

  DMA1_Stream7->PAR = (uint32_t)&TIM3->DMAR;
  DMA1_Stream7->M0AR = (uint32_t)&ws2812_pixel[0].green[0];	// (11)
  DMA1_Stream7->NDTR = DMA_TRANSFER_NO;				// 2 pixels would be 48 transfers

  NVIC_SetPriority(DMA1_Stream7_IRQn, 1);			// Set Interrupts priority.
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);

  DMA1->HIFCR |= DMA_HIFCR_CTCIF7 | DMA_HIFCR_CHTIF7;		// clearing the DMA flag before enabling the DMA

  DMA1_Stream7->CR |= DMA_SxCR_EN;

  initFlag = true;
}

static void _init_TIM3( void )
{
  static bool initFlag = false;

  if(initFlag == true)
    {
      return;
    }

  TIM3->CR1 |= TIM_CR1_ARPE;					// (6)

  TIM3->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 |		// PWM Mode 1
		  TIM_CCMR2_OC3PE				// (2)
  );


  TIM3->CCER |= TIM_CCER_CC3E;					// (3)

  TIM3->ARR = WS2812_T_BIT;					// (4)
  //TIM3->CCR3 = 10U;						// (5)

  TIM3->DCR = (uint8_t)((((uint32_t)(&TIM3->CCR3)) - ((uint32_t)(&TIM3->CR1))) >> 2);	// 1 transfer and the base is TIM3->CCR3 (it's the 14th register from TIMx->CR1)

  TIM3->CR2 |= TIM_CR2_CCDS;					// CCx DMA requests sent when update event occurs

  TIM3->DIER |= TIM_DIER_CC3DE;					// CC3 DMA request enabled.

  _init_DMA();

  TIM3->CR1 |= TIM_CR1_CEN;	// (2)

  initFlag = true;
}

void WS2812UpdatePixels( __IO uint32_t *colors, uint8_t numOfPixels)
{
  ws2812_string[numOfPixels].colorGreen = (*colors & 0X0000FF00) >> 8;
  ws2812_string[numOfPixels].colorRed = (*colors & 0X00FF0000) >> 16;
  ws2812_string[numOfPixels].colorBlue = (*colors & 0X000000FF);
}

void _init_WS2812( void )
{
  __IO static uint32_t color = 0x000000;

  _init_TIM3();

  for(uint8_t cnt = 0; cnt < WS2812_MAX_PIXEL_NO; ++cnt)
    {
      WS2812UpdatePixels( &color, cnt);
    }

  color = (color << 1) | 0X0A;
}
