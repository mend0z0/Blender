
_FW_Blender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001b78  08001b78  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001b78  08001b78  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08001b78  08001b78  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b78  08001b78  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b78  08001b78  00011b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b7c  08001b7c  00011b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08001b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004220  20000058  08001bd8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004278  08001bd8  00024278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a79  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165a  00000000  00000000  00027b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000291a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000533  00000000  00000000  00029890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e2f  00000000  00000000  00029dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002ed1  00000000  00000000  0002fbf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00001b94  00000000  00000000  00032ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  00034658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b60 	.word	0x08001b60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	08001b60 	.word	0x08001b60

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	; (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	db0a      	blt.n	8000276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	b2da      	uxtb	r2, r3
 8000264:	490c      	ldr	r1, [pc, #48]	; (8000298 <__NVIC_SetPriority+0x4c>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	e00a      	b.n	800028c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4908      	ldr	r1, [pc, #32]	; (800029c <__NVIC_SetPriority+0x50>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	f003 030f 	and.w	r3, r3, #15
 8000282:	3b04      	subs	r3, #4
 8000284:	0112      	lsls	r2, r2, #4
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	440b      	add	r3, r1
 800028a:	761a      	strb	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	e000e100 	.word	0xe000e100
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <_init_ISR>:

/****************************************************************************************************
****************************         GLOBAL FUNTIONS         ****************************************
*****************************************************************************************************/
void _init_ISR( void )
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	// Set Interrupts priority.
	NVIC_SetPriority(DMA1_Stream4_IRQn	, DMA1_Stream4_IRQ_PRIORITY);
 80002a4:	2355      	movs	r3, #85	; 0x55
 80002a6:	4619      	mov	r1, r3
 80002a8:	200f      	movs	r0, #15
 80002aa:	f7ff ffcf 	bl	800024c <__NVIC_SetPriority>
	NVIC_SetPriority(DMA2_Stream6_IRQn	, DMA2_Stream6_IRQ_PRIORITY);
 80002ae:	2355      	movs	r3, #85	; 0x55
 80002b0:	4619      	mov	r1, r3
 80002b2:	2045      	movs	r0, #69	; 0x45
 80002b4:	f7ff ffca 	bl	800024c <__NVIC_SetPriority>
	NVIC_SetPriority(TIM3_IRQn		, TIM3_IRQ_PRIORITY);
 80002b8:	2355      	movs	r3, #85	; 0x55
 80002ba:	4619      	mov	r1, r3
 80002bc:	201d      	movs	r0, #29
 80002be:	f7ff ffc5 	bl	800024c <__NVIC_SetPriority>
	NVIC_SetPriority(FMPI2C1_EV_IRQn	, FMPI2C1_EV_IRQ_PRIORITY);
 80002c2:	2355      	movs	r3, #85	; 0x55
 80002c4:	4619      	mov	r1, r3
 80002c6:	205f      	movs	r0, #95	; 0x5f
 80002c8:	f7ff ffc0 	bl	800024c <__NVIC_SetPriority>
	NVIC_SetPriority(USART1_IRQn		, USART1_IRQ_PRIORITY);
 80002cc:	2355      	movs	r3, #85	; 0x55
 80002ce:	4619      	mov	r1, r3
 80002d0:	2025      	movs	r0, #37	; 0x25
 80002d2:	f7ff ffbb 	bl	800024c <__NVIC_SetPriority>

	// Enable Required Interrupts.
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80002d6:	200f      	movs	r0, #15
 80002d8:	f7ff ff9a 	bl	8000210 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80002dc:	2045      	movs	r0, #69	; 0x45
 80002de:	f7ff ff97 	bl	8000210 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 80002e2:	201d      	movs	r0, #29
 80002e4:	f7ff ff94 	bl	8000210 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 80002e8:	205f      	movs	r0, #95	; 0x5f
 80002ea:	f7ff ff91 	bl	8000210 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(USART1_IRQn);
 80002ee:	2025      	movs	r0, #37	; 0x25
 80002f0:	f7ff ff8e 	bl	8000210 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(SysTick_IRQn);
 80002f4:	f04f 30ff 	mov.w	r0, #4294967295
 80002f8:	f7ff ff8a 	bl	8000210 <__NVIC_EnableIRQ>

	//If you are using an STM32 with the STM32 driver library then ensure
	//all the priority bits are assigned to be preempt priority bits by
	//calling NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 ); before the RTOS is started.
	//NVIC_SetPriorityGrouping( 4 );
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <SysTick_Handler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void SysTick_Handler( void )
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  ledIndCnt--;					// (1)
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <SysTick_Handler+0x50>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a11      	ldr	r2, [pc, #68]	; (8000350 <SysTick_Handler+0x50>)
 800030c:	6013      	str	r3, [r2, #0]
  if(ledIndCnt == 0)				// (2)
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <SysTick_Handler+0x50>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d116      	bne.n	8000344 <SysTick_Handler+0x44>
    {
      ledIndCnt = LED_IND_DELAY;		// (3)
 8000316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <SysTick_Handler+0x50>)
 800031c:	601a      	str	r2, [r3, #0]
      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <SysTick_Handler+0x54>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	2b00      	cmp	r3, #0
 8000328:	d006      	beq.n	8000338 <SysTick_Handler+0x38>
	{
	  CLEAR_BIT(LED_IND_PORT, LED_IND_PIN);	// (5)
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <SysTick_Handler+0x54>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <SysTick_Handler+0x54>)
 8000330:	f023 0304 	bic.w	r3, r3, #4
 8000334:	6153      	str	r3, [r2, #20]
      else
	{
	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
	}
    }
}
 8000336:	e005      	b.n	8000344 <SysTick_Handler+0x44>
	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <SysTick_Handler+0x54>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a05      	ldr	r2, [pc, #20]	; (8000354 <SysTick_Handler+0x54>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6153      	str	r3, [r2, #20]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	40020c00 	.word	0x40020c00

08000358 <DMA1_Stream0_IRQHandler>:
/*			General-purpose I/Os								*/


/*			Direct memory access controller						*/
void DMA1_Stream0_IRQHandler( void )
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler( void )
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler( void )
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler( void )
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <DMA1_Stream4_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void DMA1_Stream4_IRQHandler( void )
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  DMA1_Stream5->CR &= ~DMA_SxCR_TCIE;				// (1)
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <DMA1_Stream4_IRQHandler+0x2c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a08      	ldr	r2, [pc, #32]	; (80003bc <DMA1_Stream4_IRQHandler+0x2c>)
 800039a:	f023 0310 	bic.w	r3, r3, #16
 800039e:	6013      	str	r3, [r2, #0]
  FMPI2C1->CR2 |= FMPI2C_CR2_STOP;				// (2)
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <DMA1_Stream4_IRQHandler+0x30>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <DMA1_Stream4_IRQHandler+0x30>)
 80003a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003aa:	6053      	str	r3, [r2, #4]
  xSemaphoreGiveFromISR( FMPI2CBinarySemaphore, pdFALSE);	// (3)
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <DMA1_Stream4_IRQHandler+0x34>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fd2d 	bl	8000e12 <xQueueGiveFromISR>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40026088 	.word	0x40026088
 80003c0:	40006000 	.word	0x40006000
 80003c4:	20000074 	.word	0x20000074

080003c8 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler( void )
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler( void )
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler( void )
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler( void )
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler( void )
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler( void )
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler( void )
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler( void )
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <DMA2_Stream6_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void DMA2_Stream6_IRQHandler( void )
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  DMA2->HIFCR |= DMA_HIFCR_CTCIF7;	// (1)
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <DMA2_Stream6_IRQHandler+0x28>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <DMA2_Stream6_IRQHandler+0x28>)
 8000442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000446:	60d3      	str	r3, [r2, #12]
  DMA2_Stream7->CR &= ~DMA_SxCR_TCIE;	// (2)
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <DMA2_Stream6_IRQHandler+0x2c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <DMA2_Stream6_IRQHandler+0x2c>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40026400 	.word	0x40026400
 8000464:	400264b8 	.word	0x400264b8

08000468 <TIM3_IRQHandler>:
*	(2) Giving back the semaphore
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void TIM3_IRQHandler( void ){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
  TIM3->SR &= ~TIM_SR_UIF;				// (1)
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <TIM3_IRQHandler+0x44>)
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <TIM3_IRQHandler+0x44>)
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6113      	str	r3, [r2, #16]
  xSemaphoreGiveFromISR( TIM3BinarySemaphore, &xHigherPriorityTaskWoken);	// (2)
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <TIM3_IRQHandler+0x48>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	1d3a      	adds	r2, r7, #4
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fcc3 	bl	8000e12 <xQueueGiveFromISR>
  /* Yield if xHigherPriorityTaskWoken is true.  The
    actual macro used here is port specific. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d007      	beq.n	80004a2 <TIM3_IRQHandler+0x3a>
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <TIM3_IRQHandler+0x4c>)
 8000494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	f3bf 8f4f 	dsb	sy
 800049e:	f3bf 8f6f 	isb	sy
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40000400 	.word	0x40000400
 80004b0:	2000007c 	.word	0x2000007c
 80004b4:	e000ed04 	.word	0xe000ed04

080004b8 <FMPI2C1_EV_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void FMPI2C1_EV_IRQHandler( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  if((FMPI2C1->ISR & FMPI2C_ISR_NACKF) == FMPI2C_ISR_NACKF)	// (1)
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0310 	and.w	r3, r3, #16
 80004c4:	2b10      	cmp	r3, #16
 80004c6:	d10c      	bne.n	80004e2 <FMPI2C1_EV_IRQHandler+0x2a>
    {
      FMPI2C1->CR1 &= ~FMPI2C_CR1_NACKIE;			// (2)
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0f      	ldr	r2, [pc, #60]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004ce:	f023 0310 	bic.w	r3, r3, #16
 80004d2:	6013      	str	r3, [r2, #0]
      xSemaphoreGiveFromISR( FMPI2CBinarySemaphore, pdFALSE);	// (3)
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <FMPI2C1_EV_IRQHandler+0x58>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fc99 	bl	8000e12 <xQueueGiveFromISR>
  else if((FMPI2C1->ISR & FMPI2C_ISR_TXIS) == FMPI2C_ISR_TXIS)	// (4)
    {
      FMPI2C1->CR1 |= FMPI2C_CR1_TXDMAEN;			// (5)
      FMPI2C1->CR1 &= ~FMPI2C_CR1_TXIE;				// (6)
    }
}
 80004e0:	e011      	b.n	8000506 <FMPI2C1_EV_IRQHandler+0x4e>
  else if((FMPI2C1->ISR & FMPI2C_ISR_TXIS) == FMPI2C_ISR_TXIS)	// (4)
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d10b      	bne.n	8000506 <FMPI2C1_EV_IRQHandler+0x4e>
      FMPI2C1->CR1 |= FMPI2C_CR1_TXDMAEN;			// (5)
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f8:	6013      	str	r3, [r2, #0]
      FMPI2C1->CR1 &= ~FMPI2C_CR1_TXIE;				// (6)
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a03      	ldr	r2, [pc, #12]	; (800050c <FMPI2C1_EV_IRQHandler+0x54>)
 8000500:	f023 0302 	bic.w	r3, r3, #2
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40006000 	.word	0x40006000
 8000510:	20000074 	.word	0x20000074

08000514 <FMPI2C1_ER_IRQHandler>:

void FMPI2C1_ER_IRQHandler( void )
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <USART1_IRQHandler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void USART1_IRQHandler( void )
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
  USART1->CR1 &= ~USART_CR1_TCIE;				// (1)
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <USART1_IRQHandler+0x44>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <USART1_IRQHandler+0x44>)
 8000534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000538:	60d3      	str	r3, [r2, #12]
  xSemaphoreGiveFromISR( USART1BinarySemaphore, &xHigherPriorityTaskWoken);	// (2)
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <USART1_IRQHandler+0x48>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1d3a      	adds	r2, r7, #4
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fc65 	bl	8000e12 <xQueueGiveFromISR>
  /* Yield if xHigherPriorityTaskWoken is true.  The
      actual macro used here is port specific. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d007      	beq.n	800055e <USART1_IRQHandler+0x3a>
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <USART1_IRQHandler+0x4c>)
 8000550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	f3bf 8f4f 	dsb	sy
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40011000 	.word	0x40011000
 800056c:	20000078 	.word	0x20000078
 8000570:	e000ed04 	.word	0xe000ed04

08000574 <main>:

/****************************************************************************************************
****************************         STATIC FUNTIONS         ****************************************
*****************************************************************************************************/
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* 	----------------------   		MCU Configuration				----------------------------
	----------------------   Initialize all configured peripherals  ----------------------------*/
  _init_Peripherals();
 8000578:	f000 f8d6 	bl	8000728 <_init_Peripherals>
  _init_ISR();
 800057c:	f7ff fe90 	bl	80002a0 <_init_ISR>
  /* ----------------------   	  Modules Configuration 			----------------------------*/
  SET_BIT( EXT_LDO_EN_PORT, EXT_LDO_EN_PIN);	//Enable the LDO power to turn the modules on
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <main+0x20>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <main+0x20>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6153      	str	r3, [r2, #20]
  _init_PAM8003();
 800058c:	f000 f83f 	bl	800060e <_init_PAM8003>
  while(1);
 8000590:	e7fe      	b.n	8000590 <main+0x1c>
 8000592:	bf00      	nop
 8000594:	40020800 	.word	0x40020800

08000598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005c0:	f7ff ffea 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f001 fa95 	bl	8001b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f7ff ffc1 	bl	8000574 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000600:	08001b80 	.word	0x08001b80
  ldr r2, =_sbss
 8000604:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000608:	20004278 	.word	0x20004278

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>

0800060e <_init_PAM8003>:

/****************************************************************************************************
****************************         GLOBAL FUNTIONS         ****************************************
*****************************************************************************************************/
void _init_PAM8003( void )
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	PAM8003Mute( PAM8003_CMD_UNMUTE );
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f806 	bl	8000624 <PAM8003Mute>
	PAM8003SetVolume( PAM8003_VOL_VAL_DEFAULT );
 8000618:	2314      	movs	r3, #20
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f822 	bl	8000664 <PAM8003SetVolume>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <PAM8003Mute>:

void PAM8003Mute( uint8_t cmd )
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if(cmd == PAM8003_CMD_MUTE)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d106      	bne.n	8000642 <PAM8003Mute+0x1e>
	{
		SET_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <PAM8003Mute+0x3c>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <PAM8003Mute+0x3c>)
 800063a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063e:	6153      	str	r3, [r2, #20]
	}
	else if( cmd == PAM8003_CMD_UNMUTE )
	{
		CLEAR_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
	}
}
 8000640:	e008      	b.n	8000654 <PAM8003Mute+0x30>
	else if( cmd == PAM8003_CMD_UNMUTE )
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d105      	bne.n	8000654 <PAM8003Mute+0x30>
		CLEAR_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <PAM8003Mute+0x3c>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <PAM8003Mute+0x3c>)
 800064e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000652:	6153      	str	r3, [r2, #20]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40020000 	.word	0x40020000

08000664 <PAM8003SetVolume>:

void PAM8003SetVolume( uint8_t value /*Percent like 0% to 100%*/)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	//just checking the min and max of input.
	if((value > PAM8003_VOL_VAL_MAX) || (value < PAM8003_VOL_VAL_MIN)){
 800066e:	2264      	movs	r2, #100	; 0x64
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4293      	cmp	r3, r2
 8000674:	d808      	bhi.n	8000688 <PAM8003SetVolume+0x24>
 8000676:	2200      	movs	r2, #0
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4293      	cmp	r3, r2
 800067c:	d304      	bcc.n	8000688 <PAM8003SetVolume+0x24>
		return;
	}
	DACUpdate( value );
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f875 	bl	8000770 <DACUpdate>
 8000686:	e000      	b.n	800068a <PAM8003SetVolume+0x26>
		return;
 8000688:	bf00      	nop
}
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <__NVIC_SetPriority>:
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f7ff ffc2 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <_init_Peripherals>:
*	(1) Init all the required peripherals.
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void _init_Peripherals( void ){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	//_init_PWR();
	_init_RCC();
 800072c:	f000 f84e 	bl	80007cc <_init_RCC>
	_init_GPIO();
 8000730:	f000 f8e6 	bl	8000900 <_init_GPIO>
	_init_DMA();
 8000734:	f000 f94c 	bl	80009d0 <_init_DMA>
	_init_ADC1();
 8000738:	f000 f97e 	bl	8000a38 <_init_ADC1>
	_init_ADC2();
 800073c:	f000 f983 	bl	8000a46 <_init_ADC2>
	_init_ADC3();
 8000740:	f000 f988 	bl	8000a54 <_init_ADC3>
	_init_DAC();
 8000744:	f000 f98e 	bl	8000a64 <_init_DAC>
	_init_TIM1();
 8000748:	f000 f9a4 	bl	8000a94 <_init_TIM1>
	_init_TIM2();
 800074c:	f000 f9a9 	bl	8000aa2 <_init_TIM2>
	_init_TIM3();
 8000750:	f000 f9ae 	bl	8000ab0 <_init_TIM3>
	_init_RTC();
 8000754:	f000 f9d4 	bl	8000b00 <_init_RTC>
	_init_FMPI2C1();
 8000758:	f000 f9da 	bl	8000b10 <_init_FMPI2C1>
	_init_UART1();
 800075c:	f000 fa02 	bl	8000b64 <_init_UART1>
	_init_I2S();
 8000760:	f000 fa28 	bl	8000bb4 <_init_I2S>
	_init_SPDIF();
 8000764:	f000 fa2d 	bl	8000bc2 <_init_SPDIF>
	_init_SysTick();
 8000768:	f000 f820 	bl	80007ac <_init_SysTick>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <DACUpdate>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void DACUpdate( uint8_t dacValue)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	__IO uint16_t tempDACValue = dacValue * DAC_CONSTANT;	// (1)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	b29b      	uxth	r3, r3
 800077e:	2228      	movs	r2, #40	; 0x28
 8000780:	fb13 f302 	smulbb	r3, r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	81fb      	strh	r3, [r7, #14]
	DAC1->DHR12R1 = tempDACValue;							// (2)
 8000788:	89fb      	ldrh	r3, [r7, #14]
 800078a:	b29a      	uxth	r2, r3
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <DACUpdate+0x38>)
 800078e:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;					// (3)
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <DACUpdate+0x38>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <DACUpdate+0x38>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6053      	str	r3, [r2, #4]

	//No interrupt, it'll work probably :D
	//I can read the DAC1->DOR1 to make sure it's been registered, but maybe later...
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40007400 	.word	0x40007400

080007ac <_init_SysTick>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_SysTick( void )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	SysTick_Config(SysTickInputClock / 1000);		// (1)
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <_init_SysTick+0x18>)
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <_init_SysTick+0x1c>)
 80007b4:	fba3 2302 	umull	r2, r3, r3, r2
 80007b8:	099b      	lsrs	r3, r3, #6
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff92 	bl	80006e4 <SysTick_Config>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	00aba950 	.word	0x00aba950
 80007c8:	10624dd3 	.word	0x10624dd3

080007cc <_init_RCC>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_RCC( void )
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	////--------------Enabling the HSE
	RCC->CR |= RCC_CR_HSEON;								// (1)
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <_init_RCC+0x130>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a49      	ldr	r2, [pc, #292]	; (80008fc <_init_RCC+0x130>)
 80007d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007da:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY) == 0)					// (2)
 80007dc:	bf00      	nop
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <_init_RCC+0x130>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <_init_RCC+0x12>
	{
		//maybe add a time out later
	}

	////--------------Configuration for PLLs
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;						// (3)
 80007ea:	4b44      	ldr	r3, [pc, #272]	; (80008fc <_init_RCC+0x130>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a43      	ldr	r2, [pc, #268]	; (80008fc <_init_RCC+0x130>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f4:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR |= ((	RCC_PLLCFGR_PLLN_2 	|				// (4)
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <_init_RCC+0x130>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4a40      	ldr	r2, [pc, #256]	; (80008fc <_init_RCC+0x130>)
 80007fc:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6053      	str	r3, [r2, #4]
						RCC_PLLCFGR_PLLN_4 	|
						RCC_PLLCFGR_PLLN_5 	|
						RCC_PLLCFGR_PLLN_7) |
						RCC_PLLCFGR_PLLM_3);

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_1;						// (5)
 8000806:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <_init_RCC+0x130>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <_init_RCC+0x130>)
 800080c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000810:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// (6)
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <_init_RCC+0x130>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a39      	ldr	r2, [pc, #228]	; (80008fc <_init_RCC+0x130>)
 8000818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0)					// (7)
 800081e:	bf00      	nop
 8000820:	4b36      	ldr	r3, [pc, #216]	; (80008fc <_init_RCC+0x130>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <_init_RCC+0x54>
	{
		//maybe add a time out later
	}

	RCC->CFGR |= RCC_CFGR_SW_1;								// (8)
 800082c:	4b33      	ldr	r3, [pc, #204]	; (80008fc <_init_RCC+0x130>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a32      	ldr	r2, [pc, #200]	; (80008fc <_init_RCC+0x130>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS_1) != RCC_CFGR_SWS_1)	// (9)
 8000838:	bf00      	nop
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <_init_RCC+0x130>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	2b08      	cmp	r3, #8
 8000844:	d1f9      	bne.n	800083a <_init_RCC+0x6e>
	{
		//maybe add a time out later
	}

	RCC->CFGR |= RCC_CFGR_HPRE_3;							// (10)
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <_init_RCC+0x130>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <_init_RCC+0x130>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_2; 		// (11)
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <_init_RCC+0x130>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	4a29      	ldr	r2, [pc, #164]	; (80008fc <_init_RCC+0x130>)
 8000858:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800085c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_2;							// (12)
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <_init_RCC+0x130>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <_init_RCC+0x130>)
 8000864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000868:	6093      	str	r3, [r2, #8]


	RCC->AHB1ENR |= (	RCC_AHB1ENR_GPIOAEN |				// (13)
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <_init_RCC+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <_init_RCC+0x130>)
 8000870:	f043 030f 	orr.w	r3, r3, #15
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
						RCC_AHB1ENR_GPIOBEN |				// (14)
						RCC_AHB1ENR_GPIOCEN |				// (15)
						RCC_AHB1ENR_GPIODEN					// (16)
					);
	;
	RCC->AHB1ENR |= (	RCC_AHB1ENR_DMA1EN	| 				// (17)
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <_init_RCC+0x130>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a20      	ldr	r2, [pc, #128]	; (80008fc <_init_RCC+0x130>)
 800087c:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
					 	RCC_AHB1ENR_DMA2EN					// (18)
					);
	//RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;					// (19)
	//RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;					// (20)
	//RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;					// (21)
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;						// (22)
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <_init_RCC+0x130>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <_init_RCC+0x130>)
 8000888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;						// (23)
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <_init_RCC+0x130>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <_init_RCC+0x130>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;						// (24)
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <_init_RCC+0x130>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <_init_RCC+0x130>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;						// (25)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_init_RCC+0x130>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <_init_RCC+0x130>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_FMPI2C1EN;					// (26)
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <_init_RCC+0x130>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <_init_RCC+0x130>)
 80008b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;					// (27)
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <_init_RCC+0x130>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <_init_RCC+0x130>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;						// (28)
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <_init_RCC+0x130>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <_init_RCC+0x130>)
 80008d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_SPDIFRXSEL;				// (29)
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <_init_RCC+0x130>)
 80008d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <_init_RCC+0x130>)
 80008de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80008e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	RCC->APB1ENR |= RCC_APB1ENR_SPDIFRXEN;					// (30)
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <_init_RCC+0x130>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <_init_RCC+0x130>)
 80008ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40023800 	.word	0x40023800

08000900 <_init_GPIO>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_GPIO( void )
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
	/*		MODER REGs		*/
	GPIOA->MODER |= (	GPIO_MODER_MODER4_0  | GPIO_MODER_MODER4_1 |							// (1)
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <_init_GPIO+0xb0>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4929      	ldr	r1, [pc, #164]	; (80009b0 <_init_GPIO+0xb0>)
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <_init_GPIO+0xb4>)
 800090c:	4313      	orrs	r3, r2
 800090e:	600b      	str	r3, [r1, #0]
						GPIO_MODER_MODER3_1  |													// (8)
						GPIO_MODER_MODER5_1  |													// (9)
						GPIO_MODER_MODER15_1													// (10)
					);

	GPIOB->MODER |= (	GPIO_MODER_MODER13_0 |													// (11)
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <_init_GPIO+0xb8>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4928      	ldr	r1, [pc, #160]	; (80009b8 <_init_GPIO+0xb8>)
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <_init_GPIO+0xbc>)
 8000918:	4313      	orrs	r3, r2
 800091a:	600b      	str	r3, [r1, #0]
						GPIO_MODER_MODER0_1	 |													// (16)
						GPIO_MODER_MODER1_1  |													// (17)
						GPIO_MODER_MODER7_1	 													// (18)
					);

	GPIOC->MODER |= (	GPIO_MODER_MODER0_0  |													// (19)
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <_init_GPIO+0xc0>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4927      	ldr	r1, [pc, #156]	; (80009c0 <_init_GPIO+0xc0>)
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <_init_GPIO+0xc4>)
 8000924:	4313      	orrs	r3, r2
 8000926:	600b      	str	r3, [r1, #0]
						GPIO_MODER_MODER4_1  |													// (22)
						GPIO_MODER_MODER6_1	 |													// (23)
						GPIO_MODER_MODER7_1														// (24)
					);

	GPIOD->MODER |= GPIO_MODER_MODER2_0;														// (25)
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <_init_GPIO+0xc8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <_init_GPIO+0xc8>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]

	/*		OSPEEDR	REGs	*/
	GPIOA->OSPEEDR |=	(	GPIO_OSPEEDR_OSPEED3_0	|											// (26)
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <_init_GPIO+0xb0>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <_init_GPIO+0xb0>)
 800093a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800093e:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8000942:	6093      	str	r3, [r2, #8]
							GPIO_OSPEEDR_OSPEED5_0	|											// (27)
							GPIO_OSPEEDR_OSPEED15_0												// (28)
						);

	GPIOB->OSPEEDR |=	(	GPIO_OSPEEDR_OSPEED3_0	|											// (29)
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <_init_GPIO+0xb8>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <_init_GPIO+0xb8>)
 800094a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800094e:	f043 0345 	orr.w	r3, r3, #69	; 0x45
 8000952:	6093      	str	r3, [r2, #8]
							GPIO_OSPEEDR_OSPEED0_0	|											// (31)
							GPIO_OSPEEDR_OSPEED1_0	|											// (32)
							GPIO_OSPEEDR_OSPEED7_0												// (33)
						);
	/*		AFRL REGs		*/
	GPIOA->AFR[0] |= 	(	GPIO_AFRL_AFSEL3_0   |												// (34)
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <_init_GPIO+0xb0>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <_init_GPIO+0xb0>)
 800095a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800095e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000962:	6213      	str	r3, [r2, #32]
							GPIO_AFRL_AFSEL5_0	 												// (35)
						);

	GPIOA->AFR[1] |= 	(	(GPIO_AFRH_AFSEL9_0  | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2) |	// (36)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <_init_GPIO+0xb0>)
 8000966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <_init_GPIO+0xb0>)
 800096a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800096e:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000972:	6253      	str	r3, [r2, #36]	; 0x24
							(GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2) |	// (37)
							(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2)							// (38)
						);

	GPIOB->AFR[0] |= 	(	(GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_2) |							// (39)
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_init_GPIO+0xb8>)
 8000976:	6a1a      	ldr	r2, [r3, #32]
 8000978:	490f      	ldr	r1, [pc, #60]	; (80009b8 <_init_GPIO+0xb8>)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <_init_GPIO+0xcc>)
 800097c:	4313      	orrs	r3, r2
 800097e:	620b      	str	r3, [r1, #32]
							GPIO_AFRL_AFSEL0_1 	|												// (41)
							GPIO_AFRL_AFSEL1_1 	|												// (42)
							GPIO_AFRL_AFSEL7_3													// (43)
						);

	GPIOC->AFR[0] |= 	(	GPIO_AFRL_AFSEL6_2	|												// (44)
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <_init_GPIO+0xc0>)
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <_init_GPIO+0xc0>)
 8000986:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800098a:	6213      	str	r3, [r2, #32]
							GPIO_AFRL_AFSEL7_2													// (45)
						);

	/*	RESET VALUE	*/
	GPIOA->ODR = 0;																				// (46)
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_init_GPIO+0xb0>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = 0;																				// (47)
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <_init_GPIO+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = 0;																				// (48)
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <_init_GPIO+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
	GPIOD->ODR = 0;																				// (49)
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <_init_GPIO+0xc8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40020000 	.word	0x40020000
 80009b4:	80281bbf 	.word	0x80281bbf
 80009b8:	40020400 	.word	0x40020400
 80009bc:	5400888a 	.word	0x5400888a
 80009c0:	40020800 	.word	0x40020800
 80009c4:	0005a201 	.word	0x0005a201
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	80505022 	.word	0x80505022

080009d0 <_init_DMA>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_DMA( void )
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	// (1)
	DMA1_Stream5->CR |= (	DMA_SxCR_CHSEL_1 |						// (2)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <_init_DMA+0x50>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <_init_DMA+0x50>)
 80009da:	f043 2304 	orr.w	r3, r3, #67109888	; 0x4000400
 80009de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80009e2:	6013      	str	r3, [r2, #0]
							DMA_SxCR_MINC	 |						// (3)
							DMA_SxCR_DIR_0	 |						// (4)
							DMA_SxCR_PFCTRL							// (5)
						);

	DMA1_Stream5->PAR = &FMPI2C1->TXDR;								// (6)
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <_init_DMA+0x50>)
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <_init_DMA+0x54>)
 80009e8:	609a      	str	r2, [r3, #8]

	DMA2_Stream7->CR |= (	DMA_SxCR_CHSEL_2 |						// (7)
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <_init_DMA+0x58>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <_init_DMA+0x58>)
 80009f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009f4:	f443 638c 	orr.w	r3, r3, #1120	; 0x460
 80009f8:	6013      	str	r3, [r2, #0]
							DMA_SxCR_MINC	 |						// (8)
							DMA_SxCR_DIR_0	 |						// (9)
							DMA_SxCR_PFCTRL	 						// (10)
						);

	DMA2_Stream7->PAR = &USART1->DR;								// (11)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <_init_DMA+0x58>)
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <_init_DMA+0x5c>)
 80009fe:	609a      	str	r2, [r3, #8]


	DMA2_Stream3->CR |= (	DMA_SxCR_CHSEL_0 | DMA_SxCR_CHSEL_1 |	// (12)
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <_init_DMA+0x60>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <_init_DMA+0x60>)
 8000a06:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000a0a:	f443 638c 	orr.w	r3, r3, #1120	; 0x460
 8000a0e:	6013      	str	r3, [r2, #0]
							DMA_SxCR_MINC	 |						// (13)
							DMA_SxCR_DIR_0	 |						// (14)
							DMA_SxCR_PFCTRL	 						// (15)
						);

	DMA2_Stream3->PAR = &SPI1->DR;									// (16)
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_init_DMA+0x60>)
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <_init_DMA+0x64>)
 8000a14:	609a      	str	r2, [r3, #8]
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40026088 	.word	0x40026088
 8000a24:	40006028 	.word	0x40006028
 8000a28:	400264b8 	.word	0x400264b8
 8000a2c:	40011004 	.word	0x40011004
 8000a30:	40026458 	.word	0x40026458
 8000a34:	4001300c 	.word	0x4001300c

08000a38 <_init_ADC1>:
	}
}

/*			Analog-to-digital converter	1						*/
static void _init_ADC1( void )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_init_ADC2>:

/*			Analog-to-digital converter	2						*/
static void _init_ADC2( void )
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_init_ADC3>:

/*			Analog-to-digital converter	3						*/
static void _init_ADC3( void )
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <_init_DAC>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_DAC( void )
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	//There is not much of configuration, but the DAC will trigger by software.
	DAC1->CR |= DAC_CR_EN1;					// (1)
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <_init_DAC+0x2c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <_init_DAC+0x2c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
	DAC1->DHR12R1 = 0;						// (2)
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <_init_DAC+0x2c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;	// (3)
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <_init_DAC+0x2c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <_init_DAC+0x2c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40007400 	.word	0x40007400

08000a94 <_init_TIM1>:

/*			Advanced-control timers (TIM1)						*/
static void _init_TIM1( void )
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_init_TIM2>:

/*			General-purpose timers (TIMER2)						*/
static void _init_TIM2( void )
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_init_TIM3>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_TIM3( void )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  TIM3->CCMR2 |= (TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_1 |		// (1)
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_init_TIM3+0x4c>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <_init_TIM3+0x4c>)
 8000aba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000abe:	61d3      	str	r3, [r2, #28]
		  TIM_CCMR2_OC3PE				// (2)
  );

  TIM3->CCER |= TIM_CCER_CC3E;					// (3)
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <_init_TIM3+0x4c>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <_init_TIM3+0x4c>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6213      	str	r3, [r2, #32]
  TIM3->ARR = 56;												// (4)
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <_init_TIM3+0x4c>)
 8000ace:	2238      	movs	r2, #56	; 0x38
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR3 = 0;												// (5)
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <_init_TIM3+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CR1 |= TIM_CR1_URS;					// (6)
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_init_TIM3+0x4c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <_init_TIM3+0x4c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DIER_UIE;					// (7)
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <_init_TIM3+0x4c>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <_init_TIM3+0x4c>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40000400 	.word	0x40000400

08000b00 <_init_RTC>:

/*			Real-time clock										*/
static void _init_RTC( void )
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_init_FMPI2C1>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_FMPI2C1( void )
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	//Setting the clock to 400KHz
	FMPI2C1->TIMINGR |= (	(10 << 28) 	|				// (1)
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b16:	691a      	ldr	r2, [r3, #16]
 8000b18:	4910      	ldr	r1, [pc, #64]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_init_FMPI2C1+0x50>)
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	610b      	str	r3, [r1, #16]
							(1 << 16) 	| 				// (3)
							(1 << 8) 	|				// (4)
							(4 << 0)					// (5)
						);

	FMPI2C1->CR2 |= FMPI2C_CR2_RELOAD;					// (6)
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b2a:	6053      	str	r3, [r2, #4]
	FMPI2C1->CR2 |= (1 << FMPI2C_CR2_NBYTES_Pos);		// (7)
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6053      	str	r3, [r2, #4]

	//Enable interrupts
	FMPI2C1->CR1 |= (	FMPI2C_CR1_TCIE 	| 			// (8)
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b3e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000b42:	6013      	str	r3, [r2, #0]
						FMPI2C_CR1_ERRIE 	| 			// (9)
						FMPI2C_CR1_NACKIE				// (10)
					);

	FMPI2C1->CR1 |= FMPI2C_CR1_PE;						// (11)
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <_init_FMPI2C1+0x4c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40006000 	.word	0x40006000
 8000b60:	a0110104 	.word	0xa0110104

08000b64 <_init_UART1>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_UART1( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  USART1->BRR |= (0X16 << 4);				// (1)
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_init_UART1+0x48>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <_init_UART1+0x48>)
 8000b6e:	f443 73b0 	orr.w	r3, r3, #352	; 0x160
 8000b72:	6093      	str	r3, [r2, #8]
  USART1->CR2 |= USART_CR2_STOP_1;			// (2)
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <_init_UART1+0x48>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <_init_UART1+0x48>)
 8000b7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b7e:	6113      	str	r3, [r2, #16]
  USART1->CR3 |= USART_CR3_DMAT;			// (3)
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <_init_UART1+0x48>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <_init_UART1+0x48>)
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	6153      	str	r3, [r2, #20]
  USART1->CR1 |= USART_CR1_TE;				// (4)
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_init_UART1+0x48>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <_init_UART1+0x48>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	60d3      	str	r3, [r2, #12]
  USART1BinarySemaphore = xSemaphoreCreateBinary();	// (1)
 8000b98:	2203      	movs	r2, #3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 f8c7 	bl	8000d30 <xQueueGenericCreate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a02      	ldr	r2, [pc, #8]	; (8000bb0 <_init_UART1+0x4c>)
 8000ba6:	6013      	str	r3, [r2, #0]
  //xSemaphoreGive(USART1BinarySemaphore);		//once the binary semaphore is created with vSemaphore.. we should give the semaphore first.
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	20000078 	.word	0x20000078

08000bb4 <_init_I2S>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_I2S( void )
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	//audio freq. sample =
	//Master mode
	//Data format = 16-bit right justified
	//Packet frame = ?
	//Clock polarity = ?
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_init_SPDIF>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_SPDIF( void )
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
	/*
	 * 	Connect the SPDIFRX_IN input to an external interrupt event block in order to detect
		transitions of SPDIFRX_IN line. When activity is detected, then SPDIFRXEN can be
		set to 01 or 11.
	 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f103 0208 	add.w	r2, r3, #8
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f103 0208 	add.w	r2, r3, #8
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f103 0208 	add.w	r2, r3, #8
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c3a:	bf00      	nop
 8000c3c:	e7fe      	b.n	8000c3c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d05d      	beq.n	8000d00 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d059      	beq.n	8000d00 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c54:	2100      	movs	r1, #0
 8000c56:	fba3 2302 	umull	r2, r3, r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d000      	beq.n	8000c60 <xQueueGenericReset+0x50>
 8000c5e:	2101      	movs	r1, #1
 8000c60:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14c      	bne.n	8000d00 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000c66:	f000 fd17 	bl	8001698 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c72:	6939      	ldr	r1, [r7, #16]
 8000c74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c76:	fb01 f303 	mul.w	r3, r1, r3
 8000c7a:	441a      	add	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	2200      	movs	r2, #0
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6939      	ldr	r1, [r7, #16]
 8000c9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ca0:	441a      	add	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d114      	bne.n	8000ce6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d01a      	beq.n	8000cfa <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	3310      	adds	r3, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fbd9 	bl	8001480 <xTaskRemoveFromEventList>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d012      	beq.n	8000cfa <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <xQueueGenericReset+0x11c>)
 8000cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	f3bf 8f6f 	isb	sy
 8000ce4:	e009      	b.n	8000cfa <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3310      	adds	r3, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff70 	bl	8000bd0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	3324      	adds	r3, #36	; 0x24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff6b 	bl	8000bd0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000cfa:	f000 fcfd 	bl	80016f8 <vPortExitCritical>
 8000cfe:	e001      	b.n	8000d04 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10a      	bne.n	8000d20 <xQueueGenericReset+0x110>
	__asm volatile
 8000d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	f3bf 8f6f 	isb	sy
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	60bb      	str	r3, [r7, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	e7fe      	b.n	8000d1e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000d20:	697b      	ldr	r3, [r7, #20]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000ed04 	.word	0xe000ed04

08000d30 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d02e      	beq.n	8000da6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000d48:	2100      	movs	r1, #0
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d000      	beq.n	8000d58 <xQueueGenericCreate+0x28>
 8000d56:	2101      	movs	r1, #1
 8000d58:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d123      	bne.n	8000da6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000d66:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000d6a:	d81c      	bhi.n	8000da6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	3350      	adds	r3, #80	; 0x50
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fd5c 	bl	8001838 <pvPortMalloc>
 8000d80:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d01c      	beq.n	8000dc2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3350      	adds	r3, #80	; 0x50
 8000d90:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f814 	bl	8000dcc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000da4:	e00d      	b.n	8000dc2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10a      	bne.n	8000dc2 <xQueueGenericCreate+0x92>
	__asm volatile
 8000dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db0:	f383 8811 	msr	BASEPRI, r3
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	613b      	str	r3, [r7, #16]
}
 8000dbe:	bf00      	nop
 8000dc0:	e7fe      	b.n	8000dc0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
    }
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d103      	bne.n	8000de8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e002      	b.n	8000dee <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	69b8      	ldr	r0, [r7, #24]
 8000dfe:	f7ff ff07 	bl	8000c10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	78fa      	ldrb	r2, [r7, #3]
 8000e06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b090      	sub	sp, #64	; 0x40
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10a      	bne.n	8000e3c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8000e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e2a:	f383 8811 	msr	BASEPRI, r3
 8000e2e:	f3bf 8f6f 	isb	sy
 8000e32:	f3bf 8f4f 	dsb	sy
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000e38:	bf00      	nop
 8000e3a:	e7fe      	b.n	8000e3a <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00a      	beq.n	8000e5a <xQueueGiveFromISR+0x48>
	__asm volatile
 8000e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	623b      	str	r3, [r7, #32]
}
 8000e56:	bf00      	nop
 8000e58:	e7fe      	b.n	8000e58 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <xQueueGiveFromISR+0x58>
 8000e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <xQueueGiveFromISR+0x5c>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <xQueueGiveFromISR+0x5e>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10a      	bne.n	8000e8a <xQueueGiveFromISR+0x78>
	__asm volatile
 8000e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e78:	f383 8811 	msr	BASEPRI, r3
 8000e7c:	f3bf 8f6f 	isb	sy
 8000e80:	f3bf 8f4f 	dsb	sy
 8000e84:	61fb      	str	r3, [r7, #28]
}
 8000e86:	bf00      	nop
 8000e88:	e7fe      	b.n	8000e88 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e8a:	f000 fc95 	bl	80017b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8000e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e96:	f383 8811 	msr	BASEPRI, r3
 8000e9a:	f3bf 8f6f 	isb	sy
 8000e9e:	f3bf 8f4f 	dsb	sy
 8000ea2:	61ba      	str	r2, [r7, #24]
 8000ea4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000ea6:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d242      	bcs.n	8000f40 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d112      	bne.n	8000efc <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02d      	beq.n	8000f3a <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee0:	3324      	adds	r3, #36	; 0x24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 facc 	bl	8001480 <xTaskRemoveFromEventList>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d025      	beq.n	8000f3a <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d022      	beq.n	8000f3a <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e01e      	b.n	8000f3a <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000efc:	f000 f938 	bl	8001170 <uxTaskGetNumberOfTasks>
 8000f00:	62b8      	str	r0, [r7, #40]	; 0x28
 8000f02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d916      	bls.n	8000f3a <xQueueGiveFromISR+0x128>
 8000f0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f10:	2b7f      	cmp	r3, #127	; 0x7f
 8000f12:	d10a      	bne.n	8000f2a <xQueueGiveFromISR+0x118>
	__asm volatile
 8000f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f18:	f383 8811 	msr	BASEPRI, r3
 8000f1c:	f3bf 8f6f 	isb	sy
 8000f20:	f3bf 8f4f 	dsb	sy
 8000f24:	613b      	str	r3, [r7, #16]
}
 8000f26:	bf00      	nop
 8000f28:	e7fe      	b.n	8000f28 <xQueueGiveFromISR+0x116>
 8000f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f3e:	e001      	b.n	8000f44 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000f4e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3740      	adds	r7, #64	; 0x40
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <vTaskSuspendAll+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <vTaskSuspendAll+0x18>)
 8000f68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	2000051c 	.word	0x2000051c

08000f78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000f86:	4b71      	ldr	r3, [pc, #452]	; (800114c <xTaskResumeAll+0x1d4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8000f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f92:	f383 8811 	msr	BASEPRI, r3
 8000f96:	f3bf 8f6f 	isb	sy
 8000f9a:	f3bf 8f4f 	dsb	sy
 8000f9e:	607b      	str	r3, [r7, #4]
}
 8000fa0:	bf00      	nop
 8000fa2:	e7fe      	b.n	8000fa2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000fa4:	f000 fb78 	bl	8001698 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000fa8:	4b68      	ldr	r3, [pc, #416]	; (800114c <xTaskResumeAll+0x1d4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a67      	ldr	r2, [pc, #412]	; (800114c <xTaskResumeAll+0x1d4>)
 8000fb0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fb2:	4b66      	ldr	r3, [pc, #408]	; (800114c <xTaskResumeAll+0x1d4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 80c1 	bne.w	800113e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000fbc:	4b64      	ldr	r3, [pc, #400]	; (8001150 <xTaskResumeAll+0x1d8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80bc 	beq.w	800113e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fc6:	e08b      	b.n	80010e0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fc8:	4b62      	ldr	r3, [pc, #392]	; (8001154 <xTaskResumeAll+0x1dc>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	6a12      	ldr	r2, [r2, #32]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	69d2      	ldr	r2, [r2, #28]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3318      	adds	r3, #24
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d103      	bne.n	8000ffe <xTaskResumeAll+0x86>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	6a1a      	ldr	r2, [r3, #32]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	68d2      	ldr	r2, [r2, #12]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	6892      	ldr	r2, [r2, #8]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	3304      	adds	r3, #4
 8001030:	429a      	cmp	r2, r3
 8001032:	d103      	bne.n	800103c <xTaskResumeAll+0xc4>
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001050:	4b41      	ldr	r3, [pc, #260]	; (8001158 <xTaskResumeAll+0x1e0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d903      	bls.n	8001060 <xTaskResumeAll+0xe8>
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <xTaskResumeAll+0x1e0>)
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001064:	493d      	ldr	r1, [pc, #244]	; (800115c <xTaskResumeAll+0x1e4>)
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3304      	adds	r3, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	3204      	adds	r2, #4
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	1d1a      	adds	r2, r3, #4
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4a2e      	ldr	r2, [pc, #184]	; (800115c <xTaskResumeAll+0x1e4>)
 80010a4:	441a      	add	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ae:	492b      	ldr	r1, [pc, #172]	; (800115c <xTaskResumeAll+0x1e4>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	1c59      	adds	r1, r3, #1
 80010be:	4827      	ldr	r0, [pc, #156]	; (800115c <xTaskResumeAll+0x1e4>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4403      	add	r3, r0
 80010ca:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <xTaskResumeAll+0x1e8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d302      	bcc.n	80010e0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <xTaskResumeAll+0x1ec>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <xTaskResumeAll+0x1dc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f af6f 	bne.w	8000fc8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80010f0:	f000 fa9e 	bl	8001630 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <xTaskResumeAll+0x1f0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d010      	beq.n	8001122 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001100:	f000 f842 	bl	8001188 <xTaskIncrementTick>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <xTaskResumeAll+0x1ec>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3b01      	subs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f1      	bne.n	8001100 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <xTaskResumeAll+0x1f0>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <xTaskResumeAll+0x1ec>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <xTaskResumeAll+0x1f4>)
 8001130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800113e:	f000 fadb 	bl	80016f8 <vPortExitCritical>

    return xAlreadyYielded;
 8001142:	69bb      	ldr	r3, [r7, #24]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000051c 	.word	0x2000051c
 8001150:	20000500 	.word	0x20000500
 8001154:	200004ec 	.word	0x200004ec
 8001158:	20000508 	.word	0x20000508
 800115c:	20000084 	.word	0x20000084
 8001160:	20000080 	.word	0x20000080
 8001164:	20000510 	.word	0x20000510
 8001168:	2000050c 	.word	0x2000050c
 800116c:	e000ed04 	.word	0xe000ed04

08001170 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <uxTaskGetNumberOfTasks+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000500 	.word	0x20000500

08001188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001192:	4b7e      	ldr	r3, [pc, #504]	; (800138c <xTaskIncrementTick+0x204>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80ed 	bne.w	8001376 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800119c:	4b7c      	ldr	r3, [pc, #496]	; (8001390 <xTaskIncrementTick+0x208>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80011a4:	4a7a      	ldr	r2, [pc, #488]	; (8001390 <xTaskIncrementTick+0x208>)
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d120      	bne.n	80011f2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80011b0:	4b78      	ldr	r3, [pc, #480]	; (8001394 <xTaskIncrementTick+0x20c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80011ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011be:	f383 8811 	msr	BASEPRI, r3
 80011c2:	f3bf 8f6f 	isb	sy
 80011c6:	f3bf 8f4f 	dsb	sy
 80011ca:	607b      	str	r3, [r7, #4]
}
 80011cc:	bf00      	nop
 80011ce:	e7fe      	b.n	80011ce <xTaskIncrementTick+0x46>
 80011d0:	4b70      	ldr	r3, [pc, #448]	; (8001394 <xTaskIncrementTick+0x20c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <xTaskIncrementTick+0x210>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6e      	ldr	r2, [pc, #440]	; (8001394 <xTaskIncrementTick+0x20c>)
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <xTaskIncrementTick+0x210>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <xTaskIncrementTick+0x214>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a6c      	ldr	r2, [pc, #432]	; (800139c <xTaskIncrementTick+0x214>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	f000 fa1f 	bl	8001630 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80011f2:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <xTaskIncrementTick+0x218>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6a3a      	ldr	r2, [r7, #32]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f0c0 80a7 	bcc.w	800134c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011fe:	4b65      	ldr	r3, [pc, #404]	; (8001394 <xTaskIncrementTick+0x20c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d104      	bne.n	8001212 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001208:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <xTaskIncrementTick+0x218>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	601a      	str	r2, [r3, #0]
                    break;
 8001210:	e09c      	b.n	800134c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001212:	4b60      	ldr	r3, [pc, #384]	; (8001394 <xTaskIncrementTick+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001222:	6a3a      	ldr	r2, [r7, #32]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	429a      	cmp	r2, r3
 8001228:	d203      	bcs.n	8001232 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <xTaskIncrementTick+0x218>)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001230:	e08c      	b.n	800134c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	68d2      	ldr	r2, [r2, #12]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	6892      	ldr	r2, [r2, #8]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3304      	adds	r3, #4
 8001254:	429a      	cmp	r2, r3
 8001256:	d103      	bne.n	8001260 <xTaskIncrementTick+0xd8>
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	2b00      	cmp	r3, #0
 8001276:	d01e      	beq.n	80012b6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	6a12      	ldr	r2, [r2, #32]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	69d2      	ldr	r2, [r2, #28]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3318      	adds	r3, #24
 800129a:	429a      	cmp	r2, r3
 800129c:	d103      	bne.n	80012a6 <xTaskIncrementTick+0x11e>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6a1a      	ldr	r2, [r3, #32]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2200      	movs	r2, #0
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <xTaskIncrementTick+0x21c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d903      	bls.n	80012ca <xTaskIncrementTick+0x142>
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <xTaskIncrementTick+0x21c>)
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ce:	4936      	ldr	r1, [pc, #216]	; (80013a8 <xTaskIncrementTick+0x220>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3304      	adds	r3, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	3204      	adds	r2, #4
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	1d1a      	adds	r2, r3, #4
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <xTaskIncrementTick+0x220>)
 800130e:	441a      	add	r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	4923      	ldr	r1, [pc, #140]	; (80013a8 <xTaskIncrementTick+0x220>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1c59      	adds	r1, r3, #1
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <xTaskIncrementTick+0x220>)
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4403      	add	r3, r0
 8001334:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <xTaskIncrementTick+0x224>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	429a      	cmp	r2, r3
 8001342:	f67f af5c 	bls.w	80011fe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800134a:	e758      	b.n	80011fe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <xTaskIncrementTick+0x224>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001352:	4915      	ldr	r1, [pc, #84]	; (80013a8 <xTaskIncrementTick+0x220>)
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d901      	bls.n	8001368 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001364:	2301      	movs	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <xTaskIncrementTick+0x228>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001370:	2301      	movs	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	e004      	b.n	8001380 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <xTaskIncrementTick+0x22c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <xTaskIncrementTick+0x22c>)
 800137e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001382:	4618      	mov	r0, r3
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000051c 	.word	0x2000051c
 8001390:	20000504 	.word	0x20000504
 8001394:	200004e4 	.word	0x200004e4
 8001398:	200004e8 	.word	0x200004e8
 800139c:	20000514 	.word	0x20000514
 80013a0:	20000518 	.word	0x20000518
 80013a4:	20000508 	.word	0x20000508
 80013a8:	20000084 	.word	0x20000084
 80013ac:	20000080 	.word	0x20000080
 80013b0:	20000510 	.word	0x20000510
 80013b4:	2000050c 	.word	0x2000050c

080013b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <vTaskSwitchContext+0xb0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <vTaskSwitchContext+0xb4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80013cc:	e046      	b.n	800145c <vTaskSwitchContext+0xa4>
        xYieldPending = pdFALSE;
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <vTaskSwitchContext+0xb4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <vTaskSwitchContext+0xb8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e010      	b.n	80013fe <vTaskSwitchContext+0x46>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80013e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	f3bf 8f6f 	isb	sy
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	607b      	str	r3, [r7, #4]
}
 80013f4:	bf00      	nop
 80013f6:	e7fe      	b.n	80013f6 <vTaskSwitchContext+0x3e>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	491d      	ldr	r1, [pc, #116]	; (8001474 <vTaskSwitchContext+0xbc>)
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0e4      	beq.n	80013dc <vTaskSwitchContext+0x24>
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4a15      	ldr	r2, [pc, #84]	; (8001474 <vTaskSwitchContext+0xbc>)
 800141e:	4413      	add	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3308      	adds	r3, #8
 8001434:	429a      	cmp	r2, r3
 8001436:	d104      	bne.n	8001442 <vTaskSwitchContext+0x8a>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <vTaskSwitchContext+0xc0>)
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4a08      	ldr	r2, [pc, #32]	; (8001470 <vTaskSwitchContext+0xb8>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <vTaskSwitchContext+0xc0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3354      	adds	r3, #84	; 0x54
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <vTaskSwitchContext+0xc4>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	2000051c 	.word	0x2000051c
 800146c:	20000510 	.word	0x20000510
 8001470:	20000508 	.word	0x20000508
 8001474:	20000084 	.word	0x20000084
 8001478:	20000080 	.word	0x20000080
 800147c:	20000054 	.word	0x20000054

08001480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001480:	b480      	push	{r7}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10a      	bne.n	80014ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149a:	f383 8811 	msr	BASEPRI, r3
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	f3bf 8f4f 	dsb	sy
 80014a6:	60fb      	str	r3, [r7, #12]
}
 80014a8:	bf00      	nop
 80014aa:	e7fe      	b.n	80014aa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	6a12      	ldr	r2, [r2, #32]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	69d2      	ldr	r2, [r2, #28]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	3318      	adds	r3, #24
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d103      	bne.n	80014da <xTaskRemoveFromEventList+0x5a>
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014ea:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <xTaskRemoveFromEventList+0x198>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d15f      	bne.n	80015b2 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	68d2      	ldr	r2, [r2, #12]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	6a3a      	ldr	r2, [r7, #32]
 8001508:	6892      	ldr	r2, [r2, #8]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	3304      	adds	r3, #4
 8001514:	429a      	cmp	r2, r3
 8001516:	d103      	bne.n	8001520 <xTaskRemoveFromEventList+0xa0>
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <xTaskRemoveFromEventList+0x19c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d903      	bls.n	8001544 <xTaskRemoveFromEventList+0xc4>
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	4a36      	ldr	r2, [pc, #216]	; (800161c <xTaskRemoveFromEventList+0x19c>)
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001548:	4935      	ldr	r1, [pc, #212]	; (8001620 <xTaskRemoveFromEventList+0x1a0>)
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	6a3a      	ldr	r2, [r7, #32]
 800156e:	3204      	adds	r2, #4
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	1d1a      	adds	r2, r3, #4
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4a26      	ldr	r2, [pc, #152]	; (8001620 <xTaskRemoveFromEventList+0x1a0>)
 8001588:	441a      	add	r2, r3
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	4923      	ldr	r1, [pc, #140]	; (8001620 <xTaskRemoveFromEventList+0x1a0>)
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1c59      	adds	r1, r3, #1
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <xTaskRemoveFromEventList+0x1a0>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	6019      	str	r1, [r3, #0]
 80015b0:	e01b      	b.n	80015ea <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <xTaskRemoveFromEventList+0x1a4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	61da      	str	r2, [r3, #28]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	621a      	str	r2, [r3, #32]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	6a3a      	ldr	r2, [r7, #32]
 80015cc:	3218      	adds	r2, #24
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f103 0218 	add.w	r2, r3, #24
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <xTaskRemoveFromEventList+0x1a4>)
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <xTaskRemoveFromEventList+0x1a4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <xTaskRemoveFromEventList+0x1a4>)
 80015e8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <xTaskRemoveFromEventList+0x1a8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d905      	bls.n	8001604 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <xTaskRemoveFromEventList+0x1ac>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e001      	b.n	8001608 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800160a:	4618      	mov	r0, r3
 800160c:	372c      	adds	r7, #44	; 0x2c
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2000051c 	.word	0x2000051c
 800161c:	20000508 	.word	0x20000508
 8001620:	20000084 	.word	0x20000084
 8001624:	200004ec 	.word	0x200004ec
 8001628:	20000080 	.word	0x20000080
 800162c:	20000510 	.word	0x20000510

08001630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <prvResetNextTaskUnblockTime+0x30>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <prvResetNextTaskUnblockTime+0x34>)
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001646:	e005      	b.n	8001654 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <prvResetNextTaskUnblockTime+0x30>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <prvResetNextTaskUnblockTime+0x34>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200004e4 	.word	0x200004e4
 8001664:	20000518 	.word	0x20000518
	...

08001670 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <pxCurrentTCBConst2>)
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	6808      	ldr	r0, [r1, #0]
 8001676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167a:	f380 8809 	msr	PSP, r0
 800167e:	f3bf 8f6f 	isb	sy
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f380 8811 	msr	BASEPRI, r0
 800168a:	4770      	bx	lr
 800168c:	f3af 8000 	nop.w

08001690 <pxCurrentTCBConst2>:
 8001690:	20000080 	.word	0x20000080
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop

08001698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
	__asm volatile
 800169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	f3bf 8f6f 	isb	sy
 80016aa:	f3bf 8f4f 	dsb	sy
 80016ae:	607b      	str	r3, [r7, #4]
}
 80016b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <vPortEnterCritical+0x58>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <vPortEnterCritical+0x58>)
 80016ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <vPortEnterCritical+0x58>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10f      	bne.n	80016e4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <vPortEnterCritical+0x5c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <vPortEnterCritical+0x4c>
	__asm volatile
 80016ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	603b      	str	r3, [r7, #0]
}
 80016e0:	bf00      	nop
 80016e2:	e7fe      	b.n	80016e2 <vPortEnterCritical+0x4a>
	}
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000004 	.word	0x20000004
 80016f4:	e000ed04 	.word	0xe000ed04

080016f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <vPortExitCritical+0x50>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <vPortExitCritical+0x24>
	__asm volatile
 8001706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170a:	f383 8811 	msr	BASEPRI, r3
 800170e:	f3bf 8f6f 	isb	sy
 8001712:	f3bf 8f4f 	dsb	sy
 8001716:	607b      	str	r3, [r7, #4]
}
 8001718:	bf00      	nop
 800171a:	e7fe      	b.n	800171a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <vPortExitCritical+0x50>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <vPortExitCritical+0x50>)
 8001724:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <vPortExitCritical+0x50>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <vPortExitCritical+0x42>
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f383 8811 	msr	BASEPRI, r3
}
 8001738:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000004 	.word	0x20000004
 800174c:	00000000 	.word	0x00000000

08001750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001750:	f3ef 8009 	mrs	r0, PSP
 8001754:	f3bf 8f6f 	isb	sy
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <pxCurrentTCBConst>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f01e 0f10 	tst.w	lr, #16
 8001760:	bf08      	it	eq
 8001762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176a:	6010      	str	r0, [r2, #0]
 800176c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001774:	f380 8811 	msr	BASEPRI, r0
 8001778:	f3bf 8f4f 	dsb	sy
 800177c:	f3bf 8f6f 	isb	sy
 8001780:	f7ff fe1a 	bl	80013b8 <vTaskSwitchContext>
 8001784:	f04f 0000 	mov.w	r0, #0
 8001788:	f380 8811 	msr	BASEPRI, r0
 800178c:	bc09      	pop	{r0, r3}
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	6808      	ldr	r0, [r1, #0]
 8001792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001796:	f01e 0f10 	tst.w	lr, #16
 800179a:	bf08      	it	eq
 800179c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80017a0:	f380 8809 	msr	PSP, r0
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	f3af 8000 	nop.w

080017b0 <pxCurrentTCBConst>:
 80017b0:	20000080 	.word	0x20000080
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop

080017b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80017be:	f3ef 8305 	mrs	r3, IPSR
 80017c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d914      	bls.n	80017f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <vPortValidateInterruptPriority+0x70>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <vPortValidateInterruptPriority+0x74>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	7afa      	ldrb	r2, [r7, #11]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d20a      	bcs.n	80017f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	607b      	str	r3, [r7, #4]
}
 80017f0:	bf00      	nop
 80017f2:	e7fe      	b.n	80017f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <vPortValidateInterruptPriority+0x78>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <vPortValidateInterruptPriority+0x7c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d90a      	bls.n	800181a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	603b      	str	r3, [r7, #0]
}
 8001816:	bf00      	nop
 8001818:	e7fe      	b.n	8001818 <vPortValidateInterruptPriority+0x60>
	}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e3f0 	.word	0xe000e3f0
 800182c:	20000520 	.word	0x20000520
 8001830:	e000ed0c 	.word	0xe000ed0c
 8001834:	20000524 	.word	0x20000524

08001838 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001844:	f7ff fb8a 	bl	8000f5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <pvPortMalloc+0x160>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001850:	f000 f8ac 	bl	80019ac <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d012      	beq.n	8001880 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800185a:	2208      	movs	r2, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	3308      	adds	r3, #8
 8001866:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	43db      	mvns	r3, r3
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d804      	bhi.n	800187c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	4413      	add	r3, r2
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	e001      	b.n	8001880 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db70      	blt.n	8001968 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d06d      	beq.n	8001968 <pvPortMalloc+0x130>
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <pvPortMalloc+0x164>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d868      	bhi.n	8001968 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001896:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <pvPortMalloc+0x168>)
 8001898:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <pvPortMalloc+0x168>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018a0:	e004      	b.n	80018ac <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d903      	bls.n	80018be <pvPortMalloc+0x86>
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f1      	bne.n	80018a2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <pvPortMalloc+0x160>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d04f      	beq.n	8001968 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2208      	movs	r2, #8
 80018ce:	4413      	add	r3, r2
 80018d0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	2308      	movs	r3, #8
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d91f      	bls.n	800192a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00a      	beq.n	8001912 <pvPortMalloc+0xda>
	__asm volatile
 80018fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001900:	f383 8811 	msr	BASEPRI, r3
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	613b      	str	r3, [r7, #16]
}
 800190e:	bf00      	nop
 8001910:	e7fe      	b.n	8001910 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1ad2      	subs	r2, r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001924:	6978      	ldr	r0, [r7, #20]
 8001926:	f000 f89d 	bl	8001a64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <pvPortMalloc+0x164>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <pvPortMalloc+0x164>)
 8001936:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <pvPortMalloc+0x164>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <pvPortMalloc+0x16c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d203      	bcs.n	800194c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <pvPortMalloc+0x164>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <pvPortMalloc+0x16c>)
 800194a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <pvPortMalloc+0x170>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <pvPortMalloc+0x170>)
 8001966:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001968:	f7ff fb06 	bl	8000f78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <pvPortMalloc+0x154>
	__asm volatile
 8001976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197a:	f383 8811 	msr	BASEPRI, r3
 800197e:	f3bf 8f6f 	isb	sy
 8001982:	f3bf 8f4f 	dsb	sy
 8001986:	60fb      	str	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	e7fe      	b.n	800198a <pvPortMalloc+0x152>
    return pvReturn;
 800198c:	69fb      	ldr	r3, [r7, #28]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20004130 	.word	0x20004130
 800199c:	20004134 	.word	0x20004134
 80019a0:	20004128 	.word	0x20004128
 80019a4:	20004138 	.word	0x20004138
 80019a8:	2000413c 	.word	0x2000413c

080019ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80019b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <prvHeapInit+0xa4>)
 80019ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3307      	adds	r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <prvHeapInit+0xa4>)
 80019dc:	4413      	add	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <prvHeapInit+0xa8>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <prvHeapInit+0xa8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80019f8:	2208      	movs	r2, #8
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 0307 	bic.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <prvHeapInit+0xac>)
 8001a0c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <prvHeapInit+0xac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <prvHeapInit+0xac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	1ad2      	subs	r2, r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <prvHeapInit+0xac>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <prvHeapInit+0xb0>)
 8001a3a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <prvHeapInit+0xb4>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20000528 	.word	0x20000528
 8001a54:	20004128 	.word	0x20004128
 8001a58:	20004130 	.word	0x20004130
 8001a5c:	20004138 	.word	0x20004138
 8001a60:	20004134 	.word	0x20004134

08001a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <prvInsertBlockIntoFreeList+0xac>)
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e002      	b.n	8001a78 <prvInsertBlockIntoFreeList+0x14>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d8f7      	bhi.n	8001a72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d108      	bne.n	8001aa6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d118      	bne.n	8001aec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <prvInsertBlockIntoFreeList+0xb0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d00d      	beq.n	8001ae2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e008      	b.n	8001af4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <prvInsertBlockIntoFreeList+0xb0>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e003      	b.n	8001af4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d002      	beq.n	8001b02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20004128 	.word	0x20004128
 8001b14:	20004130 	.word	0x20004130

08001b18 <__libc_init_array>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4d0d      	ldr	r5, [pc, #52]	; (8001b50 <__libc_init_array+0x38>)
 8001b1c:	4c0d      	ldr	r4, [pc, #52]	; (8001b54 <__libc_init_array+0x3c>)
 8001b1e:	1b64      	subs	r4, r4, r5
 8001b20:	10a4      	asrs	r4, r4, #2
 8001b22:	2600      	movs	r6, #0
 8001b24:	42a6      	cmp	r6, r4
 8001b26:	d109      	bne.n	8001b3c <__libc_init_array+0x24>
 8001b28:	4d0b      	ldr	r5, [pc, #44]	; (8001b58 <__libc_init_array+0x40>)
 8001b2a:	4c0c      	ldr	r4, [pc, #48]	; (8001b5c <__libc_init_array+0x44>)
 8001b2c:	f000 f818 	bl	8001b60 <_init>
 8001b30:	1b64      	subs	r4, r4, r5
 8001b32:	10a4      	asrs	r4, r4, #2
 8001b34:	2600      	movs	r6, #0
 8001b36:	42a6      	cmp	r6, r4
 8001b38:	d105      	bne.n	8001b46 <__libc_init_array+0x2e>
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
 8001b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b40:	4798      	blx	r3
 8001b42:	3601      	adds	r6, #1
 8001b44:	e7ee      	b.n	8001b24 <__libc_init_array+0xc>
 8001b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4a:	4798      	blx	r3
 8001b4c:	3601      	adds	r6, #1
 8001b4e:	e7f2      	b.n	8001b36 <__libc_init_array+0x1e>
 8001b50:	08001b78 	.word	0x08001b78
 8001b54:	08001b78 	.word	0x08001b78
 8001b58:	08001b78 	.word	0x08001b78
 8001b5c:	08001b7c 	.word	0x08001b7c

08001b60 <_init>:
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	bf00      	nop
 8001b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b66:	bc08      	pop	{r3}
 8001b68:	469e      	mov	lr, r3
 8001b6a:	4770      	bx	lr

08001b6c <_fini>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr
