
_FW_Blender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003668  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003868  08003868  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004300  20000064  080038d4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004364  080038d4  00024364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000967c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5e  00000000  00000000  00029753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c9  00000000  00000000  0002bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ff6  00000000  00000000  0002c489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003b07  00000000  00000000  0003447f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000026e4  00000000  00000000  00037f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  0003a66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003820 	.word	0x08003820

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08003820 	.word	0x08003820

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:

/****************************************************************************************************
****************************         STATIC FUNTIONS         ****************************************
*****************************************************************************************************/
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 f8d0 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f804 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Start the created tasks running. */
  vTaskStartScheduler();
 8000518:	f001 fc42 	bl	8001da0 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x10>
	...

08000520 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f88c 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <SystemClock_Config+0xb8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <SystemClock_Config+0xb8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <SystemClock_Config+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <SystemClock_Config+0xbc>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <SystemClock_Config+0xbc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 031c 	add.w	r3, r7, #28
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fc61 	bl	8000e5c <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a0:	f000 f81e 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f9bc 	bl	800093c <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ca:	f000 f809 	bl	80005e0 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_MspInit+0x4c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <HAL_MspInit+0x4c>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_MspInit+0x4c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_MspInit+0x4c>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_MspInit+0x4c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	; 0x40
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_MspInit+0x4c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <SystemInit+0x20>)
 8000642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <SystemInit+0x20>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000698 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000664:	f7ff ffea 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800068e:	f003 f83b 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000692:	f7ff ff3b 	bl	800050c <main>
  bx  lr    
 8000696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006a4:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 80006a8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006ac:	20004364 	.word	0x20004364

080006b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_Init+0x40>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <HAL_Init+0x40>)
 80006be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_Init+0x40>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_Init+0x40>)
 80006ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_Init+0x40>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_Init+0x40>)
 80006d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f8f9 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f000 f808 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e8:	f7ff ff80 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023c00 	.word	0x40023c00

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f903 	bl	8000922 <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 f8d9 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000080 	.word	0x20000080

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff47 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff5c 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff8e 	bl	8000828 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffb0 	bl	8000890 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d101      	bne.n	8000950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e0cc      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000950:	4b68      	ldr	r3, [pc, #416]	; (8000af4 <HAL_RCC_ClockConfig+0x1b8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d90c      	bls.n	8000978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800095e:	4b65      	ldr	r3, [pc, #404]	; (8000af4 <HAL_RCC_ClockConfig+0x1b8>)
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000966:	4b63      	ldr	r3, [pc, #396]	; (8000af4 <HAL_RCC_ClockConfig+0x1b8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d001      	beq.n	8000978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e0b8      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d020      	beq.n	80009c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	d005      	beq.n	800099c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000990:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4a58      	ldr	r2, [pc, #352]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800099a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 0308 	and.w	r3, r3, #8
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009a8:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	4a52      	ldr	r2, [pc, #328]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 80009ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80009b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009b4:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	494d      	ldr	r1, [pc, #308]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 80009c2:	4313      	orrs	r3, r2
 80009c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d044      	beq.n	8000a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d107      	bne.n	80009ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d119      	bne.n	8000a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e07f      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d003      	beq.n	80009fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d107      	bne.n	8000a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d109      	bne.n	8000a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e06f      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e067      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f023 0203 	bic.w	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4934      	ldr	r1, [pc, #208]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a2c:	f7ff fe94 	bl	8000758 <HAL_GetTick>
 8000a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a32:	e00a      	b.n	8000a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a34:	f7ff fe90 	bl	8000758 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d901      	bls.n	8000a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000a46:	2303      	movs	r3, #3
 8000a48:	e04f      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f003 020c 	and.w	r2, r3, #12
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d1eb      	bne.n	8000a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <HAL_RCC_ClockConfig+0x1b8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d20c      	bcs.n	8000a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <HAL_RCC_ClockConfig+0x1b8>)
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <HAL_RCC_ClockConfig+0x1b8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d001      	beq.n	8000a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e032      	b.n	8000aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4916      	ldr	r1, [pc, #88]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d009      	beq.n	8000ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	490e      	ldr	r1, [pc, #56]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ac2:	f000 f821 	bl	8000b08 <HAL_RCC_GetSysClockFreq>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_RCC_ClockConfig+0x1bc>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	490a      	ldr	r1, [pc, #40]	; (8000afc <HAL_RCC_ClockConfig+0x1c0>)
 8000ad4:	5ccb      	ldrb	r3, [r1, r3]
 8000ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <HAL_RCC_ClockConfig+0x1c4>)
 8000adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_RCC_ClockConfig+0x1c8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe08 	bl	80006f8 <HAL_InitTick>

  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00
 8000af8:	40023800 	.word	0x40023800
 8000afc:	08003850 	.word	0x08003850
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b0c:	b0a6      	sub	sp, #152	; 0x98
 8000b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b2e:	4bc8      	ldr	r3, [pc, #800]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b0c      	cmp	r3, #12
 8000b38:	f200 817e 	bhi.w	8000e38 <HAL_RCC_GetSysClockFreq+0x330>
 8000b3c:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b42:	bf00      	nop
 8000b44:	08000b79 	.word	0x08000b79
 8000b48:	08000e39 	.word	0x08000e39
 8000b4c:	08000e39 	.word	0x08000e39
 8000b50:	08000e39 	.word	0x08000e39
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000e39 	.word	0x08000e39
 8000b5c:	08000e39 	.word	0x08000e39
 8000b60:	08000e39 	.word	0x08000e39
 8000b64:	08000b89 	.word	0x08000b89
 8000b68:	08000e39 	.word	0x08000e39
 8000b6c:	08000e39 	.word	0x08000e39
 8000b70:	08000e39 	.word	0x08000e39
 8000b74:	08000cf3 	.word	0x08000cf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b78:	4bb6      	ldr	r3, [pc, #728]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8000b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8000b7e:	e15f      	b.n	8000e40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000b80:	4bb5      	ldr	r3, [pc, #724]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x350>)
 8000b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000b86:	e15b      	b.n	8000e40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b88:	4bb1      	ldr	r3, [pc, #708]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b94:	4bae      	ldr	r3, [pc, #696]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d031      	beq.n	8000c04 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba0:	4bab      	ldr	r3, [pc, #684]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	099b      	lsrs	r3, r3, #6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8000baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8000bb8:	4ba7      	ldr	r3, [pc, #668]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x350>)
 8000bba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000bbe:	462a      	mov	r2, r5
 8000bc0:	fb03 f202 	mul.w	r2, r3, r2
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	fb01 f303 	mul.w	r3, r1, r3
 8000bcc:	4413      	add	r3, r2
 8000bce:	4aa2      	ldr	r2, [pc, #648]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x350>)
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	fba1 1202 	umull	r1, r2, r1, r2
 8000bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000bd8:	460a      	mov	r2, r1
 8000bda:	67ba      	str	r2, [r7, #120]	; 0x78
 8000bdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000bde:	4413      	add	r3, r2
 8000be0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000be6:	2200      	movs	r2, #0
 8000be8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000bec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000bf0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000bf4:	f7ff fb0c 	bl	8000210 <__aeabi_uldivmod>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c02:	e064      	b.n	8000cce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c04:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	099b      	lsrs	r3, r3, #6
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8000c0e:	657a      	str	r2, [r7, #84]	; 0x54
 8000c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000c20:	4622      	mov	r2, r4
 8000c22:	462b      	mov	r3, r5
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	f04f 0100 	mov.w	r1, #0
 8000c2c:	0159      	lsls	r1, r3, #5
 8000c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c32:	0150      	lsls	r0, r2, #5
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4621      	mov	r1, r4
 8000c3a:	1a51      	subs	r1, r2, r1
 8000c3c:	6139      	str	r1, [r7, #16]
 8000c3e:	4629      	mov	r1, r5
 8000c40:	eb63 0301 	sbc.w	r3, r3, r1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000c52:	4659      	mov	r1, fp
 8000c54:	018b      	lsls	r3, r1, #6
 8000c56:	4651      	mov	r1, sl
 8000c58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000c5c:	4651      	mov	r1, sl
 8000c5e:	018a      	lsls	r2, r1, #6
 8000c60:	4651      	mov	r1, sl
 8000c62:	ebb2 0801 	subs.w	r8, r2, r1
 8000c66:	4659      	mov	r1, fp
 8000c68:	eb63 0901 	sbc.w	r9, r3, r1
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c80:	4690      	mov	r8, r2
 8000c82:	4699      	mov	r9, r3
 8000c84:	4623      	mov	r3, r4
 8000c86:	eb18 0303 	adds.w	r3, r8, r3
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	462b      	mov	r3, r5
 8000c8e:	eb49 0303 	adc.w	r3, r9, r3
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	028b      	lsls	r3, r1, #10
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000caa:	4621      	mov	r1, r4
 8000cac:	028a      	lsls	r2, r1, #10
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8000cba:	647a      	str	r2, [r7, #68]	; 0x44
 8000cbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000cc0:	f7ff faa6 	bl	8000210 <__aeabi_uldivmod>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4613      	mov	r3, r2
 8000cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	0c1b      	lsrs	r3, r3, #16
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	3301      	adds	r3, #1
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8000ce0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000cf0:	e0a6      	b.n	8000e40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cf2:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d02a      	beq.n	8000d60 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d0a:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	099b      	lsrs	r3, r3, #6
 8000d10:	2200      	movs	r2, #0
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x350>)
 8000d20:	fb03 f201 	mul.w	r2, r3, r1
 8000d24:	2300      	movs	r3, #0
 8000d26:	fb00 f303 	mul.w	r3, r0, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x350>)
 8000d2e:	fba0 1202 	umull	r1, r2, r0, r2
 8000d32:	677a      	str	r2, [r7, #116]	; 0x74
 8000d34:	460a      	mov	r2, r1
 8000d36:	673a      	str	r2, [r7, #112]	; 0x70
 8000d38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d3a:	4413      	add	r3, r2
 8000d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8000d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d42:	2200      	movs	r2, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
 8000d46:	637a      	str	r2, [r7, #52]	; 0x34
 8000d48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000d4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000d50:	f7ff fa5e 	bl	8000210 <__aeabi_uldivmod>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d5e:	e05b      	b.n	8000e18 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	099b      	lsrs	r3, r3, #6
 8000d66:	2200      	movs	r2, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
 8000d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	f04f 0000 	mov.w	r0, #0
 8000d84:	f04f 0100 	mov.w	r1, #0
 8000d88:	0159      	lsls	r1, r3, #5
 8000d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000d8e:	0150      	lsls	r0, r2, #5
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4641      	mov	r1, r8
 8000d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000db4:	ebb2 040a 	subs.w	r4, r2, sl
 8000db8:	eb63 050b 	sbc.w	r5, r3, fp
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	00eb      	lsls	r3, r5, #3
 8000dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dca:	00e2      	lsls	r2, r4, #3
 8000dcc:	4614      	mov	r4, r2
 8000dce:	461d      	mov	r5, r3
 8000dd0:	4643      	mov	r3, r8
 8000dd2:	18e3      	adds	r3, r4, r3
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	eb45 0303 	adc.w	r3, r5, r3
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000dea:	4629      	mov	r1, r5
 8000dec:	028b      	lsls	r3, r1, #10
 8000dee:	4621      	mov	r1, r4
 8000df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000df4:	4621      	mov	r1, r4
 8000df6:	028a      	lsls	r2, r1, #10
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e00:	2200      	movs	r2, #0
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	61fa      	str	r2, [r7, #28]
 8000e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e0a:	f7ff fa01 	bl	8000210 <__aeabi_uldivmod>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4613      	mov	r3, r2
 8000e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	0f1b      	lsrs	r3, r3, #28
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8000e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000e36:	e003      	b.n	8000e40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8000e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8000e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3798      	adds	r7, #152	; 0x98
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	00f42400 	.word	0x00f42400
 8000e58:	017d7840 	.word	0x017d7840

08000e5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e28d      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8083 	beq.w	8000f82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e7c:	4b94      	ldr	r3, [pc, #592]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 030c 	and.w	r3, r3, #12
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d019      	beq.n	8000ebc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e88:	4b91      	ldr	r3, [pc, #580]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e94:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ea0:	d00c      	beq.n	8000ebc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ea2:	4b8b      	ldr	r3, [pc, #556]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000eaa:	2b0c      	cmp	r3, #12
 8000eac:	d112      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eae:	4b88      	ldr	r3, [pc, #544]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eba:	d10b      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	4b84      	ldr	r3, [pc, #528]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d05b      	beq.n	8000f80 <HAL_RCC_OscConfig+0x124>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d157      	bne.n	8000f80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e25a      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d106      	bne.n	8000eec <HAL_RCC_OscConfig+0x90>
 8000ede:	4b7c      	ldr	r3, [pc, #496]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7b      	ldr	r2, [pc, #492]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01d      	b.n	8000f28 <HAL_RCC_OscConfig+0xcc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0xb4>
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a75      	ldr	r2, [pc, #468]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a72      	ldr	r2, [pc, #456]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0xcc>
 8000f10:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a6e      	ldr	r2, [pc, #440]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a6b      	ldr	r2, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc12 	bl	8000758 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fc0e 	bl	8000758 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e21f      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0xdc>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fbfe 	bl	8000758 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fbfa 	bl	8000758 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e20b      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x104>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d06f      	beq.n	800106e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f8e:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d017      	beq.n	8000fca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d105      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d11c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fbe:	4b44      	ldr	r3, [pc, #272]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d116      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fca:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x186>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d001      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e1d3      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4937      	ldr	r1, [pc, #220]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	e03a      	b.n	800106e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d020      	beq.n	8001042 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_RCC_OscConfig+0x278>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fba7 	bl	8000758 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fba3 	bl	8000758 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e1b4      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4925      	ldr	r1, [pc, #148]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
 8001040:	e015      	b.n	800106e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_RCC_OscConfig+0x278>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fb86 	bl	8000758 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001050:	f7ff fb82 	bl	8000758 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e193      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d036      	beq.n	80010e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d016      	beq.n	80010b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_RCC_OscConfig+0x27c>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001088:	f7ff fb66 	bl	8000758 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001090:	f7ff fb62 	bl	8000758 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e173      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_OscConfig+0x274>)
 80010a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0x234>
 80010ae:	e01b      	b.n	80010e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_RCC_OscConfig+0x27c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb4f 	bl	8000758 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010bc:	e00e      	b.n	80010dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fb4b 	bl	8000758 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d907      	bls.n	80010dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e15c      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
 80010d0:	40023800 	.word	0x40023800
 80010d4:	42470000 	.word	0x42470000
 80010d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	4b8a      	ldr	r3, [pc, #552]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80010de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ea      	bne.n	80010be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8097 	beq.w	8001224 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fa:	4b83      	ldr	r3, [pc, #524]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10f      	bne.n	8001126 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001122:	2301      	movs	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001126:	4b79      	ldr	r3, [pc, #484]	; (800130c <HAL_RCC_OscConfig+0x4b0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d118      	bne.n	8001164 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x4b0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a75      	ldr	r2, [pc, #468]	; (800130c <HAL_RCC_OscConfig+0x4b0>)
 8001138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800113e:	f7ff fb0b 	bl	8000758 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001146:	f7ff fb07 	bl	8000758 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e118      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	4b6c      	ldr	r3, [pc, #432]	; (800130c <HAL_RCC_OscConfig+0x4b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d106      	bne.n	800117a <HAL_RCC_OscConfig+0x31e>
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 800116e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001170:	4a65      	ldr	r2, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6713      	str	r3, [r2, #112]	; 0x70
 8001178:	e01c      	b.n	80011b4 <HAL_RCC_OscConfig+0x358>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0x340>
 8001182:	4b61      	ldr	r3, [pc, #388]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001186:	4a60      	ldr	r2, [pc, #384]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6713      	str	r3, [r2, #112]	; 0x70
 800118e:	4b5e      	ldr	r3, [pc, #376]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001192:	4a5d      	ldr	r2, [pc, #372]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6713      	str	r3, [r2, #112]	; 0x70
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0x358>
 800119c:	4b5a      	ldr	r3, [pc, #360]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 800119e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a0:	4a59      	ldr	r2, [pc, #356]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	6713      	str	r3, [r2, #112]	; 0x70
 80011a8:	4b57      	ldr	r3, [pc, #348]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80011aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ac:	4a56      	ldr	r2, [pc, #344]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d015      	beq.n	80011e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff facc 	bl	8000758 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c2:	e00a      	b.n	80011da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff fac8 	bl	8000758 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e0d7      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011da:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0ee      	beq.n	80011c4 <HAL_RCC_OscConfig+0x368>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fab6 	bl	8000758 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ee:	e00a      	b.n	8001206 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f0:	f7ff fab2 	bl	8000758 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e0c1      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ee      	bne.n	80011f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d105      	bne.n	8001224 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001218:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a3a      	ldr	r2, [pc, #232]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 800121e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80ad 	beq.w	8001388 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b08      	cmp	r3, #8
 8001238:	d060      	beq.n	80012fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d145      	bne.n	80012ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <HAL_RCC_OscConfig+0x4b4>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fa86 	bl	8000758 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fa82 	bl	8000758 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e093      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69da      	ldr	r2, [r3, #28]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	085b      	lsrs	r3, r3, #1
 8001286:	3b01      	subs	r3, #1
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	061b      	lsls	r3, r3, #24
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	071b      	lsls	r3, r3, #28
 800129a:	491b      	ldr	r1, [pc, #108]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_RCC_OscConfig+0x4b4>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fa57 	bl	8000758 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff fa53 	bl	8000758 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e064      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x452>
 80012cc:	e05c      	b.n	8001388 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_RCC_OscConfig+0x4b4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fa40 	bl	8000758 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fa3c 	bl	8000758 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e04d      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_RCC_OscConfig+0x4ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x480>
 80012fa:	e045      	b.n	8001388 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d107      	bne.n	8001314 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e040      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000
 8001310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_RCC_OscConfig+0x538>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d030      	beq.n	8001384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800132c:	429a      	cmp	r2, r3
 800132e:	d129      	bne.n	8001384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	429a      	cmp	r2, r3
 800133c:	d122      	bne.n	8001384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001344:	4013      	ands	r3, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800134a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800134c:	4293      	cmp	r3, r2
 800134e:	d119      	bne.n	8001384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	3b01      	subs	r3, #1
 800135e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001360:	429a      	cmp	r2, r3
 8001362:	d10f      	bne.n	8001384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d107      	bne.n	8001384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0208 	add.w	r2, r3, #8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f103 0208 	add.w	r2, r3, #8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f103 0208 	add.w	r2, r3, #8
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d103      	bne.n	8001412 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e00c      	b.n	800142c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3308      	adds	r3, #8
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e002      	b.n	8001420 <vListInsert+0x2e>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	429a      	cmp	r2, r3
 800142a:	d2f6      	bcs.n	800141a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6892      	ldr	r2, [r2, #8]
 800147a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6852      	ldr	r2, [r2, #4]
 8001484:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d103      	bne.n	8001498 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1e5a      	subs	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10a      	bne.n	80014e6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d4:	f383 8811 	msr	BASEPRI, r3
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014e2:	bf00      	nop
 80014e4:	e7fe      	b.n	80014e4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d05d      	beq.n	80015a8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d059      	beq.n	80015a8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fc:	2100      	movs	r1, #0
 80014fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d000      	beq.n	8001508 <xQueueGenericReset+0x50>
 8001506:	2101      	movs	r1, #1
 8001508:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d14c      	bne.n	80015a8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800150e:	f001 fe11 	bl	8003134 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151a:	6939      	ldr	r1, [r7, #16]
 800151c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	441a      	add	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2200      	movs	r2, #0
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	3b01      	subs	r3, #1
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	441a      	add	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	22ff      	movs	r2, #255	; 0xff
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	22ff      	movs	r2, #255	; 0xff
 800155a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d114      	bne.n	800158e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01a      	beq.n	80015a2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	3310      	adds	r3, #16
 8001570:	4618      	mov	r0, r3
 8001572:	f000 ff6f 	bl	8002454 <xTaskRemoveFromEventList>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <xQueueGenericReset+0x11c>)
 800157e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f3bf 8f4f 	dsb	sy
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	e009      	b.n	80015a2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3310      	adds	r3, #16
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff00 	bl	8001398 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3324      	adds	r3, #36	; 0x24
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fefb 	bl	8001398 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80015a2:	f001 fdf7 	bl	8003194 <vPortExitCritical>
 80015a6:	e001      	b.n	80015ac <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10a      	bne.n	80015c8 <xQueueGenericReset+0x110>
	__asm volatile
 80015b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b6:	f383 8811 	msr	BASEPRI, r3
 80015ba:	f3bf 8f6f 	isb	sy
 80015be:	f3bf 8f4f 	dsb	sy
 80015c2:	60bb      	str	r3, [r7, #8]
}
 80015c4:	bf00      	nop
 80015c6:	e7fe      	b.n	80015c6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000ed04 	.word	0xe000ed04

080015d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	4613      	mov	r3, r2
 80015e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d02e      	beq.n	800164e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80015f0:	2100      	movs	r1, #0
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	fba3 2302 	umull	r2, r3, r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d000      	beq.n	8001600 <xQueueGenericCreate+0x28>
 80015fe:	2101      	movs	r1, #1
 8001600:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d123      	bne.n	800164e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800160e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001612:	d81c      	bhi.n	800164e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3350      	adds	r3, #80	; 0x50
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fe46 	bl	80032b4 <pvPortMalloc>
 8001628:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01c      	beq.n	800166a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3350      	adds	r3, #80	; 0x50
 8001638:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f814 	bl	8001674 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800164c:	e00d      	b.n	800166a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10a      	bne.n	800166a <xQueueGenericCreate+0x92>
	__asm volatile
 8001654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001658:	f383 8811 	msr	BASEPRI, r3
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	f3bf 8f4f 	dsb	sy
 8001664:	613b      	str	r3, [r7, #16]
}
 8001666:	bf00      	nop
 8001668:	e7fe      	b.n	8001668 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800166a:	69fb      	ldr	r3, [r7, #28]
    }
 800166c:	4618      	mov	r0, r3
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e002      	b.n	8001696 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016a2:	2101      	movs	r1, #1
 80016a4:	69b8      	ldr	r0, [r7, #24]
 80016a6:	f7ff ff07 	bl	80014b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <xQueueReceive+0x30>
	__asm volatile
 80016d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016da:	f383 8811 	msr	BASEPRI, r3
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f3bf 8f4f 	dsb	sy
 80016e6:	623b      	str	r3, [r7, #32]
}
 80016e8:	bf00      	nop
 80016ea:	e7fe      	b.n	80016ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <xQueueReceive+0x3e>
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <xQueueReceive+0x42>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <xQueueReceive+0x44>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10a      	bne.n	800171a <xQueueReceive+0x5e>
	__asm volatile
 8001704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001708:	f383 8811 	msr	BASEPRI, r3
 800170c:	f3bf 8f6f 	isb	sy
 8001710:	f3bf 8f4f 	dsb	sy
 8001714:	61fb      	str	r3, [r7, #28]
}
 8001716:	bf00      	nop
 8001718:	e7fe      	b.n	8001718 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800171a:	f001 f8b5 	bl	8002888 <xTaskGetSchedulerState>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <xQueueReceive+0x6e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <xQueueReceive+0x72>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <xQueueReceive+0x74>
 800172e:	2300      	movs	r3, #0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <xQueueReceive+0x8e>
	__asm volatile
 8001734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001738:	f383 8811 	msr	BASEPRI, r3
 800173c:	f3bf 8f6f 	isb	sy
 8001740:	f3bf 8f4f 	dsb	sy
 8001744:	61bb      	str	r3, [r7, #24]
}
 8001746:	bf00      	nop
 8001748:	e7fe      	b.n	8001748 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800174a:	f001 fcf3 	bl	8003134 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	2b00      	cmp	r3, #0
 8001758:	d01f      	beq.n	800179a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800175e:	f000 f88d 	bl	800187c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	3310      	adds	r3, #16
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fe6c 	bl	8002454 <xTaskRemoveFromEventList>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <xQueueReceive+0x1bc>)
 8001784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001792:	f001 fcff 	bl	8003194 <vPortExitCritical>
                return pdPASS;
 8001796:	2301      	movs	r3, #1
 8001798:	e069      	b.n	800186e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80017a0:	f001 fcf8 	bl	8003194 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e062      	b.n	800186e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 ff26 	bl	8002604 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80017bc:	f001 fcea 	bl	8003194 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80017c0:	f000 fb48 	bl	8001e54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80017c4:	f001 fcb6 	bl	8003134 <vPortEnterCritical>
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d103      	bne.n	80017de <xQueueReceive+0x122>
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ea:	d103      	bne.n	80017f4 <xQueueReceive+0x138>
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017f4:	f001 fcce 	bl	8003194 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017f8:	1d3a      	adds	r2, r7, #4
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f000 ff15 	bl	8002630 <xTaskCheckForTimeOut>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d123      	bne.n	8001854 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800180c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800180e:	f000 f8ad 	bl	800196c <prvIsQueueEmpty>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181a:	3324      	adds	r3, #36	; 0x24
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fdad 	bl	8002380 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001828:	f000 f84e 	bl	80018c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800182c:	f000 fb20 	bl	8001e70 <xTaskResumeAll>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d189      	bne.n	800174a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <xQueueReceive+0x1bc>)
 8001838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f3bf 8f4f 	dsb	sy
 8001842:	f3bf 8f6f 	isb	sy
 8001846:	e780      	b.n	800174a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800184a:	f000 f83d 	bl	80018c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800184e:	f000 fb0f 	bl	8001e70 <xTaskResumeAll>
 8001852:	e77a      	b.n	800174a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001856:	f000 f837 	bl	80018c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800185a:	f000 fb09 	bl	8001e70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800185e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001860:	f000 f884 	bl	800196c <prvIsQueueEmpty>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f43f af6f 	beq.w	800174a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800186c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800186e:	4618      	mov	r0, r3
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d018      	beq.n	80018c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	441a      	add	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d303      	bcc.n	80018b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68d9      	ldr	r1, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	461a      	mov	r2, r3
 80018ba:	6838      	ldr	r0, [r7, #0]
 80018bc:	f001 ff4a 	bl	8003754 <memcpy>
    }
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80018d0:	f001 fc30 	bl	8003134 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018dc:	e011      	b.n	8001902 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d012      	beq.n	800190c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3324      	adds	r3, #36	; 0x24
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fdb2 	bl	8002454 <xTaskRemoveFromEventList>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80018f6:	f000 ff01 	bl	80026fc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	dce9      	bgt.n	80018de <prvUnlockQueue+0x16>
 800190a:	e000      	b.n	800190e <prvUnlockQueue+0x46>
                    break;
 800190c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001916:	f001 fc3d 	bl	8003194 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800191a:	f001 fc0b 	bl	8003134 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001924:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001926:	e011      	b.n	800194c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d012      	beq.n	8001956 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3310      	adds	r3, #16
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fd8d 	bl	8002454 <xTaskRemoveFromEventList>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001940:	f000 fedc 	bl	80026fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001944:	7bbb      	ldrb	r3, [r7, #14]
 8001946:	3b01      	subs	r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800194c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dce9      	bgt.n	8001928 <prvUnlockQueue+0x60>
 8001954:	e000      	b.n	8001958 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001956:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001960:	f001 fc18 	bl	8003194 <vPortExitCritical>
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001974:	f001 fbde 	bl	8003134 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001980:	2301      	movs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e001      	b.n	800198a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800198a:	f001 fc03 	bl	8003194 <vPortExitCritical>

    return xReturn;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10a      	bne.n	80019c2 <vQueueAddToRegistry+0x2a>
	__asm volatile
 80019ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b0:	f383 8811 	msr	BASEPRI, r3
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	60fb      	str	r3, [r7, #12]
}
 80019be:	bf00      	nop
 80019c0:	e7fe      	b.n	80019c0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d024      	beq.n	8001a12 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e01e      	b.n	8001a0c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <vQueueAddToRegistry+0x98>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d105      	bne.n	80019ea <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <vQueueAddToRegistry+0x98>)
 80019e4:	4413      	add	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
                    break;
 80019e8:	e013      	b.n	8001a12 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <vQueueAddToRegistry+0x6e>
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <vQueueAddToRegistry+0x98>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <vQueueAddToRegistry+0x98>)
 8001a02:	4413      	add	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	d9dd      	bls.n	80019ce <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000084 	.word	0x20000084

08001a34 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001a44:	f001 fb76 	bl	8003134 <vPortEnterCritical>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d103      	bne.n	8001a5e <vQueueWaitForMessageRestricted+0x2a>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6a:	d103      	bne.n	8001a74 <vQueueWaitForMessageRestricted+0x40>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a74:	f001 fb8e 	bl	8003194 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3324      	adds	r3, #36	; 0x24
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fc9d 	bl	80023c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff1a 	bl	80018c8 <prvUnlockQueue>
    }
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 fbff 	bl	80032b4 <pvPortMalloc>
 8001ab6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d013      	beq.n	8001ae6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001abe:	20a8      	movs	r0, #168	; 0xa8
 8001ac0:	f001 fbf8 	bl	80032b4 <pvPortMalloc>
 8001ac4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001acc:	22a8      	movs	r2, #168	; 0xa8
 8001ace:	2100      	movs	r1, #0
 8001ad0:	69f8      	ldr	r0, [r7, #28]
 8001ad2:	f001 fdbb 	bl	800364c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
 8001adc:	e005      	b.n	8001aea <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f001 fca2 	bl	8003428 <vPortFree>
 8001ae4:	e001      	b.n	8001aea <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9303      	str	r3, [sp, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f80e 	bl	8001b28 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001b0c:	69f8      	ldr	r0, [r7, #28]
 8001b0e:	f000 f8af 	bl	8001c70 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e002      	b.n	8001b1e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
    }
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	461a      	mov	r2, r3
 8001b40:	21a5      	movs	r1, #165	; 0xa5
 8001b42:	f001 fd83 	bl	800364c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b50:	3b01      	subs	r3, #1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f023 0307 	bic.w	r3, r3, #7
 8001b5e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8001b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6e:	f383 8811 	msr	BASEPRI, r3
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	f3bf 8f4f 	dsb	sy
 8001b7a:	617b      	str	r3, [r7, #20]
}
 8001b7c:	bf00      	nop
 8001b7e:	e7fe      	b.n	8001b7e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01e      	beq.n	8001bc4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e012      	b.n	8001bb2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	7819      	ldrb	r1, [r3, #0]
 8001b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3334      	adds	r3, #52	; 0x34
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d9e9      	bls.n	8001b8c <prvInitialiseNewTask+0x64>
 8001bb8:	e000      	b.n	8001bbc <prvInitialiseNewTask+0x94>
            {
                break;
 8001bba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	2b37      	cmp	r3, #55	; 0x37
 8001bc8:	d90a      	bls.n	8001be0 <prvInitialiseNewTask+0xb8>
	__asm volatile
 8001bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bce:	f383 8811 	msr	BASEPRI, r3
 8001bd2:	f3bf 8f6f 	isb	sy
 8001bd6:	f3bf 8f4f 	dsb	sy
 8001bda:	613b      	str	r3, [r7, #16]
}
 8001bdc:	bf00      	nop
 8001bde:	e7fe      	b.n	8001bde <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	2b37      	cmp	r3, #55	; 0x37
 8001be4:	d901      	bls.n	8001bea <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001be6:	2337      	movs	r3, #55	; 0x37
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fbec 	bl	80013d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	3318      	adds	r3, #24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbe7 	bl	80013d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c18:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8001c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c22:	3354      	adds	r3, #84	; 0x54
 8001c24:	224c      	movs	r2, #76	; 0x4c
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fd0f 	bl	800364c <memset>
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <prvInitialiseNewTask+0x13c>)
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <prvInitialiseNewTask+0x140>)
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <prvInitialiseNewTask+0x144>)
 8001c3e:	661a      	str	r2, [r3, #96]	; 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	69b8      	ldr	r0, [r7, #24]
 8001c46:	f001 f94b 	bl	8002ee0 <pxPortInitialiseStack>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <prvInitialiseNewTask+0x134>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20004224 	.word	0x20004224
 8001c68:	2000428c 	.word	0x2000428c
 8001c6c:	200042f4 	.word	0x200042f4

08001c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001c78:	f001 fa5c 	bl	8003134 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <prvAddNewTaskToReadyList+0x114>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a40      	ldr	r2, [pc, #256]	; (8001d84 <prvAddNewTaskToReadyList+0x114>)
 8001c84:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <prvAddNewTaskToReadyList+0x118>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <prvAddNewTaskToReadyList+0x118>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <prvAddNewTaskToReadyList+0x114>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d110      	bne.n	8001cbe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c9c:	f000 fd52 	bl	8002744 <prvInitialiseTaskLists>
 8001ca0:	e00d      	b.n	8001cbe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <prvAddNewTaskToReadyList+0x11c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <prvAddNewTaskToReadyList+0x118>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d802      	bhi.n	8001cbe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001cb8:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <prvAddNewTaskToReadyList+0x118>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <prvAddNewTaskToReadyList+0x120>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <prvAddNewTaskToReadyList+0x120>)
 8001cc6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <prvAddNewTaskToReadyList+0x120>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <prvAddNewTaskToReadyList+0x124>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d903      	bls.n	8001ce4 <prvAddNewTaskToReadyList+0x74>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	4a2c      	ldr	r2, [pc, #176]	; (8001d94 <prvAddNewTaskToReadyList+0x124>)
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <prvAddNewTaskToReadyList+0x128>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	3204      	adds	r2, #4
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1d1a      	adds	r2, r3, #4
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <prvAddNewTaskToReadyList+0x128>)
 8001d28:	441a      	add	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d32:	4919      	ldr	r1, [pc, #100]	; (8001d98 <prvAddNewTaskToReadyList+0x128>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	1c59      	adds	r1, r3, #1
 8001d42:	4815      	ldr	r0, [pc, #84]	; (8001d98 <prvAddNewTaskToReadyList+0x128>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4403      	add	r3, r0
 8001d4e:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001d50:	f001 fa20 	bl	8003194 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <prvAddNewTaskToReadyList+0x11c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <prvAddNewTaskToReadyList+0x118>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d207      	bcs.n	8001d7a <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <prvAddNewTaskToReadyList+0x12c>)
 8001d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f3bf 8f4f 	dsb	sy
 8001d76:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000598 	.word	0x20000598
 8001d88:	200000c4 	.word	0x200000c4
 8001d8c:	200005a4 	.word	0x200005a4
 8001d90:	200005b4 	.word	0x200005b4
 8001d94:	200005a0 	.word	0x200005a0
 8001d98:	200000c8 	.word	0x200000c8
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <vTaskStartScheduler+0x90>)
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2300      	movs	r3, #0
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	4920      	ldr	r1, [pc, #128]	; (8001e34 <vTaskStartScheduler+0x94>)
 8001db4:	4820      	ldr	r0, [pc, #128]	; (8001e38 <vTaskStartScheduler+0x98>)
 8001db6:	f7ff fe71 	bl	8001a9c <xTaskCreate>
 8001dba:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001dc2:	f000 fded 	bl	80029a0 <xTimerCreateTimerTask>
 8001dc6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d11b      	bne.n	8001e06 <vTaskStartScheduler+0x66>
	__asm volatile
 8001dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd2:	f383 8811 	msr	BASEPRI, r3
 8001dd6:	f3bf 8f6f 	isb	sy
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	60bb      	str	r3, [r7, #8]
}
 8001de0:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <vTaskStartScheduler+0x9c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3354      	adds	r3, #84	; 0x54
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <vTaskStartScheduler+0xa0>)
 8001dea:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <vTaskStartScheduler+0xa4>)
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295
 8001df2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <vTaskStartScheduler+0xa8>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <vTaskStartScheduler+0xac>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001e00:	f001 f8f6 	bl	8002ff0 <xPortStartScheduler>
 8001e04:	e00e      	b.n	8001e24 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d10a      	bne.n	8001e24 <vTaskStartScheduler+0x84>
	__asm volatile
 8001e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e12:	f383 8811 	msr	BASEPRI, r3
 8001e16:	f3bf 8f6f 	isb	sy
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	607b      	str	r3, [r7, #4]
}
 8001e20:	bf00      	nop
 8001e22:	e7fe      	b.n	8001e22 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <vTaskStartScheduler+0xb0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200005bc 	.word	0x200005bc
 8001e34:	08003838 	.word	0x08003838
 8001e38:	08002715 	.word	0x08002715
 8001e3c:	200000c4 	.word	0x200000c4
 8001e40:	20000060 	.word	0x20000060
 8001e44:	200005b8 	.word	0x200005b8
 8001e48:	200005a4 	.word	0x200005a4
 8001e4c:	2000059c 	.word	0x2000059c
 8001e50:	2000000c 	.word	0x2000000c

08001e54 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <vTaskSuspendAll+0x18>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <vTaskSuspendAll+0x18>)
 8001e60:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	200005c0 	.word	0x200005c0

08001e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e7e:	4b71      	ldr	r3, [pc, #452]	; (8002044 <xTaskResumeAll+0x1d4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10a      	bne.n	8001e9c <xTaskResumeAll+0x2c>
	__asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	607b      	str	r3, [r7, #4]
}
 8001e98:	bf00      	nop
 8001e9a:	e7fe      	b.n	8001e9a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e9c:	f001 f94a 	bl	8003134 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <xTaskResumeAll+0x1d4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4a67      	ldr	r2, [pc, #412]	; (8002044 <xTaskResumeAll+0x1d4>)
 8001ea8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eaa:	4b66      	ldr	r3, [pc, #408]	; (8002044 <xTaskResumeAll+0x1d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80c1 	bne.w	8002036 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001eb4:	4b64      	ldr	r3, [pc, #400]	; (8002048 <xTaskResumeAll+0x1d8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80bc 	beq.w	8002036 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ebe:	e08b      	b.n	8001fd8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <xTaskResumeAll+0x1dc>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	6a12      	ldr	r2, [r2, #32]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	69d2      	ldr	r2, [r2, #28]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3318      	adds	r3, #24
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d103      	bne.n	8001ef6 <xTaskResumeAll+0x86>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	68d2      	ldr	r2, [r2, #12]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3304      	adds	r3, #4
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d103      	bne.n	8001f34 <xTaskResumeAll+0xc4>
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	4b41      	ldr	r3, [pc, #260]	; (8002050 <xTaskResumeAll+0x1e0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d903      	bls.n	8001f58 <xTaskResumeAll+0xe8>
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <xTaskResumeAll+0x1e0>)
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	493d      	ldr	r1, [pc, #244]	; (8002054 <xTaskResumeAll+0x1e4>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3304      	adds	r3, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	3204      	adds	r2, #4
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	1d1a      	adds	r2, r3, #4
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4a2e      	ldr	r2, [pc, #184]	; (8002054 <xTaskResumeAll+0x1e4>)
 8001f9c:	441a      	add	r2, r3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa6:	492b      	ldr	r1, [pc, #172]	; (8002054 <xTaskResumeAll+0x1e4>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	1c59      	adds	r1, r3, #1
 8001fb6:	4827      	ldr	r0, [pc, #156]	; (8002054 <xTaskResumeAll+0x1e4>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <xTaskResumeAll+0x1e8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d302      	bcc.n	8001fd8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <xTaskResumeAll+0x1ec>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <xTaskResumeAll+0x1dc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f47f af6f 	bne.w	8001ec0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001fe8:	f000 fc32 	bl	8002850 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <xTaskResumeAll+0x1f0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001ff8:	f000 f846 	bl	8002088 <xTaskIncrementTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <xTaskResumeAll+0x1ec>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3b01      	subs	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f1      	bne.n	8001ff8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <xTaskResumeAll+0x1f0>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <xTaskResumeAll+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <xTaskResumeAll+0x1f4>)
 8002028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002036:	f001 f8ad 	bl	8003194 <vPortExitCritical>

    return xAlreadyYielded;
 800203a:	69bb      	ldr	r3, [r7, #24]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200005c0 	.word	0x200005c0
 8002048:	20000598 	.word	0x20000598
 800204c:	20000558 	.word	0x20000558
 8002050:	200005a0 	.word	0x200005a0
 8002054:	200000c8 	.word	0x200000c8
 8002058:	200000c4 	.word	0x200000c4
 800205c:	200005ac 	.word	0x200005ac
 8002060:	200005a8 	.word	0x200005a8
 8002064:	e000ed04 	.word	0xe000ed04

08002068 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <xTaskGetTickCount+0x1c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000059c 	.word	0x2000059c

08002088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002092:	4b7e      	ldr	r3, [pc, #504]	; (800228c <xTaskIncrementTick+0x204>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 80ed 	bne.w	8002276 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800209c:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <xTaskIncrementTick+0x208>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80020a4:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <xTaskIncrementTick+0x208>)
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d120      	bne.n	80020f2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80020b0:	4b78      	ldr	r3, [pc, #480]	; (8002294 <xTaskIncrementTick+0x20c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	607b      	str	r3, [r7, #4]
}
 80020cc:	bf00      	nop
 80020ce:	e7fe      	b.n	80020ce <xTaskIncrementTick+0x46>
 80020d0:	4b70      	ldr	r3, [pc, #448]	; (8002294 <xTaskIncrementTick+0x20c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <xTaskIncrementTick+0x210>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	; (8002294 <xTaskIncrementTick+0x20c>)
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <xTaskIncrementTick+0x210>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b6d      	ldr	r3, [pc, #436]	; (800229c <xTaskIncrementTick+0x214>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a6c      	ldr	r2, [pc, #432]	; (800229c <xTaskIncrementTick+0x214>)
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	f000 fbaf 	bl	8002850 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80020f2:	4b6b      	ldr	r3, [pc, #428]	; (80022a0 <xTaskIncrementTick+0x218>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a3a      	ldr	r2, [r7, #32]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f0c0 80a7 	bcc.w	800224c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020fe:	4b65      	ldr	r3, [pc, #404]	; (8002294 <xTaskIncrementTick+0x20c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002108:	4b65      	ldr	r3, [pc, #404]	; (80022a0 <xTaskIncrementTick+0x218>)
 800210a:	f04f 32ff 	mov.w	r2, #4294967295
 800210e:	601a      	str	r2, [r3, #0]
                    break;
 8002110:	e09c      	b.n	800224c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002112:	4b60      	ldr	r3, [pc, #384]	; (8002294 <xTaskIncrementTick+0x20c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	429a      	cmp	r2, r3
 8002128:	d203      	bcs.n	8002132 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800212a:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <xTaskIncrementTick+0x218>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002130:	e08c      	b.n	800224c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	68d2      	ldr	r2, [r2, #12]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	3304      	adds	r3, #4
 8002154:	429a      	cmp	r2, r3
 8002156:	d103      	bne.n	8002160 <xTaskIncrementTick+0xd8>
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1e5a      	subs	r2, r3, #1
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01e      	beq.n	80021b6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	6a12      	ldr	r2, [r2, #32]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	69d2      	ldr	r2, [r2, #28]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3318      	adds	r3, #24
 800219a:	429a      	cmp	r2, r3
 800219c:	d103      	bne.n	80021a6 <xTaskIncrementTick+0x11e>
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6a1a      	ldr	r2, [r3, #32]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <xTaskIncrementTick+0x21c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d903      	bls.n	80021ca <xTaskIncrementTick+0x142>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <xTaskIncrementTick+0x21c>)
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ce:	4936      	ldr	r1, [pc, #216]	; (80022a8 <xTaskIncrementTick+0x220>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3304      	adds	r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	3204      	adds	r2, #4
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1d1a      	adds	r2, r3, #4
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <xTaskIncrementTick+0x220>)
 800220e:	441a      	add	r2, r3
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	615a      	str	r2, [r3, #20]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	4923      	ldr	r1, [pc, #140]	; (80022a8 <xTaskIncrementTick+0x220>)
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1c59      	adds	r1, r3, #1
 8002228:	481f      	ldr	r0, [pc, #124]	; (80022a8 <xTaskIncrementTick+0x220>)
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4403      	add	r3, r0
 8002234:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <xTaskIncrementTick+0x224>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	429a      	cmp	r2, r3
 8002242:	f67f af5c 	bls.w	80020fe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002246:	2301      	movs	r3, #1
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800224a:	e758      	b.n	80020fe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <xTaskIncrementTick+0x224>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002252:	4915      	ldr	r1, [pc, #84]	; (80022a8 <xTaskIncrementTick+0x220>)
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d901      	bls.n	8002268 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002264:	2301      	movs	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <xTaskIncrementTick+0x228>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e004      	b.n	8002280 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <xTaskIncrementTick+0x22c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <xTaskIncrementTick+0x22c>)
 800227e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002282:	4618      	mov	r0, r3
 8002284:	3728      	adds	r7, #40	; 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200005c0 	.word	0x200005c0
 8002290:	2000059c 	.word	0x2000059c
 8002294:	20000550 	.word	0x20000550
 8002298:	20000554 	.word	0x20000554
 800229c:	200005b0 	.word	0x200005b0
 80022a0:	200005b8 	.word	0x200005b8
 80022a4:	200005a0 	.word	0x200005a0
 80022a8:	200000c8 	.word	0x200000c8
 80022ac:	200000c4 	.word	0x200000c4
 80022b0:	200005ac 	.word	0x200005ac
 80022b4:	200005a8 	.word	0x200005a8

080022b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <vTaskSwitchContext+0xb0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <vTaskSwitchContext+0xb4>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80022cc:	e046      	b.n	800235c <vTaskSwitchContext+0xa4>
        xYieldPending = pdFALSE;
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <vTaskSwitchContext+0xb4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <vTaskSwitchContext+0xb8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e010      	b.n	80022fe <vTaskSwitchContext+0x46>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	607b      	str	r3, [r7, #4]
}
 80022f4:	bf00      	nop
 80022f6:	e7fe      	b.n	80022f6 <vTaskSwitchContext+0x3e>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	491d      	ldr	r1, [pc, #116]	; (8002374 <vTaskSwitchContext+0xbc>)
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0e4      	beq.n	80022dc <vTaskSwitchContext+0x24>
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <vTaskSwitchContext+0xbc>)
 800231e:	4413      	add	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3308      	adds	r3, #8
 8002334:	429a      	cmp	r2, r3
 8002336:	d104      	bne.n	8002342 <vTaskSwitchContext+0x8a>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <vTaskSwitchContext+0xc0>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4a08      	ldr	r2, [pc, #32]	; (8002370 <vTaskSwitchContext+0xb8>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <vTaskSwitchContext+0xc0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3354      	adds	r3, #84	; 0x54
 8002358:	4a08      	ldr	r2, [pc, #32]	; (800237c <vTaskSwitchContext+0xc4>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	200005c0 	.word	0x200005c0
 800236c:	200005ac 	.word	0x200005ac
 8002370:	200005a0 	.word	0x200005a0
 8002374:	200000c8 	.word	0x200000c8
 8002378:	200000c4 	.word	0x200000c4
 800237c:	20000060 	.word	0x20000060

08002380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	60fb      	str	r3, [r7, #12]
}
 80023a2:	bf00      	nop
 80023a4:	e7fe      	b.n	80023a4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <vTaskPlaceOnEventList+0x44>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3318      	adds	r3, #24
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff f81f 	bl	80013f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023b4:	2101      	movs	r1, #1
 80023b6:	6838      	ldr	r0, [r7, #0]
 80023b8:	f000 fa84 	bl	80028c4 <prvAddCurrentTaskToDelayedList>
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000c4 	.word	0x200000c4

080023c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	613b      	str	r3, [r7, #16]
}
 80023ec:	bf00      	nop
 80023ee:	e7fe      	b.n	80023ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <vTaskPlaceOnEventListRestricted+0x88>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	61da      	str	r2, [r3, #28]
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <vTaskPlaceOnEventListRestricted+0x88>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	621a      	str	r2, [r3, #32]
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <vTaskPlaceOnEventListRestricted+0x88>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	3218      	adds	r2, #24
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <vTaskPlaceOnEventListRestricted+0x88>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f103 0218 	add.w	r2, r3, #24
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <vTaskPlaceOnEventListRestricted+0x88>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68b8      	ldr	r0, [r7, #8]
 8002442:	f000 fa3f 	bl	80028c4 <prvAddCurrentTaskToDelayedList>
    }
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000c4 	.word	0x200000c4

08002454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002454:	b480      	push	{r7}
 8002456:	b08b      	sub	sp, #44	; 0x2c
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	60fb      	str	r3, [r7, #12]
}
 800247c:	bf00      	nop
 800247e:	e7fe      	b.n	800247e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	6a3a      	ldr	r2, [r7, #32]
 800248c:	6a12      	ldr	r2, [r2, #32]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	69d2      	ldr	r2, [r2, #28]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	3318      	adds	r3, #24
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d103      	bne.n	80024ae <xTaskRemoveFromEventList+0x5a>
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024be:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <xTaskRemoveFromEventList+0x198>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d15f      	bne.n	8002586 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	68d2      	ldr	r2, [r2, #12]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	6a3a      	ldr	r2, [r7, #32]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	3304      	adds	r3, #4
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d103      	bne.n	80024f4 <xTaskRemoveFromEventList+0xa0>
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <xTaskRemoveFromEventList+0x19c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d903      	bls.n	8002518 <xTaskRemoveFromEventList+0xc4>
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <xTaskRemoveFromEventList+0x19c>)
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	4935      	ldr	r1, [pc, #212]	; (80025f4 <xTaskRemoveFromEventList+0x1a0>)
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	3204      	adds	r2, #4
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	1d1a      	adds	r2, r3, #4
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <xTaskRemoveFromEventList+0x1a0>)
 800255c:	441a      	add	r2, r3
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002566:	4923      	ldr	r1, [pc, #140]	; (80025f4 <xTaskRemoveFromEventList+0x1a0>)
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	1c59      	adds	r1, r3, #1
 8002576:	481f      	ldr	r0, [pc, #124]	; (80025f4 <xTaskRemoveFromEventList+0x1a0>)
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4403      	add	r3, r0
 8002582:	6019      	str	r1, [r3, #0]
 8002584:	e01b      	b.n	80025be <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <xTaskRemoveFromEventList+0x1a4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	61da      	str	r2, [r3, #28]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	621a      	str	r2, [r3, #32]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	6a3a      	ldr	r2, [r7, #32]
 80025a0:	3218      	adds	r2, #24
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	f103 0218 	add.w	r2, r3, #24
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <xTaskRemoveFromEventList+0x1a4>)
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <xTaskRemoveFromEventList+0x1a4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <xTaskRemoveFromEventList+0x1a4>)
 80025bc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <xTaskRemoveFromEventList+0x1a8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d905      	bls.n	80025d8 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <xTaskRemoveFromEventList+0x1ac>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e001      	b.n	80025dc <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025de:	4618      	mov	r0, r3
 80025e0:	372c      	adds	r7, #44	; 0x2c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200005c0 	.word	0x200005c0
 80025f0:	200005a0 	.word	0x200005a0
 80025f4:	200000c8 	.word	0x200000c8
 80025f8:	20000558 	.word	0x20000558
 80025fc:	200000c4 	.word	0x200000c4
 8002600:	200005ac 	.word	0x200005ac

08002604 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <vTaskInternalSetTimeOutState+0x24>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <vTaskInternalSetTimeOutState+0x28>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	605a      	str	r2, [r3, #4]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	200005b0 	.word	0x200005b0
 800262c:	2000059c 	.word	0x2000059c

08002630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	60fb      	str	r3, [r7, #12]
}
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002672:	f000 fd5f 	bl	8003134 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <xTaskCheckForTimeOut+0xc4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d102      	bne.n	8002696 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	e026      	b.n	80026e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <xTaskCheckForTimeOut+0xc8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d00a      	beq.n	80026b8 <xTaskCheckForTimeOut+0x88>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d305      	bcc.n	80026b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e015      	b.n	80026e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d20b      	bcs.n	80026da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	1ad2      	subs	r2, r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff98 	bl	8002604 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e004      	b.n	80026e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80026e4:	f000 fd56 	bl	8003194 <vPortExitCritical>

    return xReturn;
 80026e8:	69fb      	ldr	r3, [r7, #28]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	2000059c 	.word	0x2000059c
 80026f8:	200005b0 	.word	0x200005b0

080026fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <vTaskMissedYield+0x14>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	200005ac 	.word	0x200005ac

08002714 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800271c:	f000 f852 	bl	80027c4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <prvIdleTask+0x28>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d9f9      	bls.n	800271c <prvIdleTask+0x8>
            {
                taskYIELD();
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <prvIdleTask+0x2c>)
 800272a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002738:	e7f0      	b.n	800271c <prvIdleTask+0x8>
 800273a:	bf00      	nop
 800273c:	200000c8 	.word	0x200000c8
 8002740:	e000ed04 	.word	0xe000ed04

08002744 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	e00c      	b.n	800276a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <prvInitialiseTaskLists+0x60>)
 800275c:	4413      	add	r3, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fe1a 	bl	8001398 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b37      	cmp	r3, #55	; 0x37
 800276e:	d9ef      	bls.n	8002750 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <prvInitialiseTaskLists+0x64>)
 8002772:	f7fe fe11 	bl	8001398 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <prvInitialiseTaskLists+0x68>)
 8002778:	f7fe fe0e 	bl	8001398 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <prvInitialiseTaskLists+0x6c>)
 800277e:	f7fe fe0b 	bl	8001398 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002782:	480c      	ldr	r0, [pc, #48]	; (80027b4 <prvInitialiseTaskLists+0x70>)
 8002784:	f7fe fe08 	bl	8001398 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <prvInitialiseTaskLists+0x74>)
 800278a:	f7fe fe05 	bl	8001398 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <prvInitialiseTaskLists+0x78>)
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <prvInitialiseTaskLists+0x64>)
 8002792:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <prvInitialiseTaskLists+0x7c>)
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <prvInitialiseTaskLists+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200000c8 	.word	0x200000c8
 80027a8:	20000528 	.word	0x20000528
 80027ac:	2000053c 	.word	0x2000053c
 80027b0:	20000558 	.word	0x20000558
 80027b4:	2000056c 	.word	0x2000056c
 80027b8:	20000584 	.word	0x20000584
 80027bc:	20000550 	.word	0x20000550
 80027c0:	20000554 	.word	0x20000554

080027c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027ca:	e019      	b.n	8002800 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80027cc:	f000 fcb2 	bl	8003134 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <prvCheckTasksWaitingTermination+0x50>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fe41 	bl	8001464 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <prvCheckTasksWaitingTermination+0x54>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <prvCheckTasksWaitingTermination+0x54>)
 80027ea:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <prvCheckTasksWaitingTermination+0x58>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <prvCheckTasksWaitingTermination+0x58>)
 80027f4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80027f6:	f000 fccd 	bl	8003194 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f810 	bl	8002820 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <prvCheckTasksWaitingTermination+0x58>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e1      	bne.n	80027cc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000056c 	.word	0x2000056c
 8002818:	20000598 	.word	0x20000598
 800281c:	20000580 	.word	0x20000580

08002820 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <prvDeleteTCB+0x2c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3354      	adds	r3, #84	; 0x54
 800282e:	4618      	mov	r0, r3
 8002830:	f000 ff14 	bl	800365c <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fdf5 	bl	8003428 <vPortFree>
            vPortFree( pxTCB );
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fdf2 	bl	8003428 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000c4 	.word	0x200000c4

08002850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <prvResetNextTaskUnblockTime+0x30>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <prvResetNextTaskUnblockTime+0x34>)
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002866:	e005      	b.n	8002874 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <prvResetNextTaskUnblockTime+0x30>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <prvResetNextTaskUnblockTime+0x34>)
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000550 	.word	0x20000550
 8002884:	200005b8 	.word	0x200005b8

08002888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <xTaskGetSchedulerState+0x34>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002896:	2301      	movs	r3, #1
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	e008      	b.n	80028ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <xTaskGetSchedulerState+0x38>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80028a4:	2302      	movs	r3, #2
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	e001      	b.n	80028ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80028ae:	687b      	ldr	r3, [r7, #4]
    }
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	200005a4 	.word	0x200005a4
 80028c0:	200005c0 	.word	0x200005c0

080028c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3304      	adds	r3, #4
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fdc2 	bl	8001464 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d124      	bne.n	8002932 <prvAddCurrentTaskToDelayedList+0x6e>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d021      	beq.n	8002932 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028ee:	4b28      	ldr	r3, [pc, #160]	; (8002990 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	3204      	adds	r2, #4
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <prvAddCurrentTaskToDelayedList+0xcc>)
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002930:	e026      	b.n	8002980 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	429a      	cmp	r2, r3
 8002948:	d209      	bcs.n	800295e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <prvAddCurrentTaskToDelayedList+0xd0>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f7fe fd4b 	bl	80013f2 <vListInsert>
}
 800295c:	e010      	b.n	8002980 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7fe fd41 	bl	80013f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	429a      	cmp	r2, r3
 8002978:	d202      	bcs.n	8002980 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <prvAddCurrentTaskToDelayedList+0xd8>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000059c 	.word	0x2000059c
 800298c:	200000c4 	.word	0x200000c4
 8002990:	20000584 	.word	0x20000584
 8002994:	20000554 	.word	0x20000554
 8002998:	20000550 	.word	0x20000550
 800299c:	200005b8 	.word	0x200005b8

080029a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80029aa:	f000 fa63 	bl	8002e74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <xTimerCreateTimerTask+0x54>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <xTimerCreateTimerTask+0x58>)
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	2302      	movs	r3, #2
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2300      	movs	r3, #0
 80029c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c4:	490d      	ldr	r1, [pc, #52]	; (80029fc <xTimerCreateTimerTask+0x5c>)
 80029c6:	480e      	ldr	r0, [pc, #56]	; (8002a00 <xTimerCreateTimerTask+0x60>)
 80029c8:	f7ff f868 	bl	8001a9c <xTaskCreate>
 80029cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	603b      	str	r3, [r7, #0]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80029ea:	687b      	ldr	r3, [r7, #4]
    }
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200005f4 	.word	0x200005f4
 80029f8:	200005f8 	.word	0x200005f8
 80029fc:	08003840 	.word	0x08003840
 8002a00:	08002aa9 	.word	0x08002aa9

08002a04 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002a10:	e008      	b.n	8002a24 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	18d1      	adds	r1, r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f8dd 	bl	8002bf0 <prvInsertTimerInActiveList>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <prvReloadTimer+0xe>
        }
    }
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <prvProcessExpiredTimer+0x5c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fcff 	bl	8001464 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff ffc3 	bl	8002a04 <prvReloadTimer>
 8002a7e:	e008      	b.n	8002a92 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	4798      	blx	r3
    }
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200005ec 	.word	0x200005ec

08002aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f857 	bl	8002b68 <prvGetNextExpireTime>
 8002aba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f803 	bl	8002acc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002ac6:	f000 f8d5 	bl	8002c74 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002aca:	e7f1      	b.n	8002ab0 <prvTimerTask+0x8>

08002acc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002ad6:	f7ff f9bd 	bl	8001e54 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f866 	bl	8002bb0 <prvSampleTimeNow>
 8002ae4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d130      	bne.n	8002b4e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <prvProcessTimerOrBlockTask+0x3c>
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d806      	bhi.n	8002b08 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002afa:	f7ff f9b9 	bl	8001e70 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ffa1 	bl	8002a48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002b06:	e024      	b.n	8002b52 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <prvProcessTimerOrBlockTask+0x90>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <prvProcessTimerOrBlockTask+0x50>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <prvProcessTimerOrBlockTask+0x52>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <prvProcessTimerOrBlockTask+0x94>)
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe ff81 	bl	8001a34 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002b32:	f7ff f99d 	bl	8001e70 <xTaskResumeAll>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <prvProcessTimerOrBlockTask+0x98>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
    }
 8002b4c:	e001      	b.n	8002b52 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002b4e:	f7ff f98f 	bl	8001e70 <xTaskResumeAll>
    }
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200005f0 	.word	0x200005f0
 8002b60:	200005f4 	.word	0x200005f4
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <prvGetNextExpireTime+0x44>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <prvGetNextExpireTime+0x16>
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	e000      	b.n	8002b80 <prvGetNextExpireTime+0x18>
 8002b7e:	2200      	movs	r2, #0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <prvGetNextExpireTime+0x44>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e001      	b.n	8002b9c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    }
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200005ec 	.word	0x200005ec

08002bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002bb8:	f7ff fa56 	bl	8002068 <xTaskGetTickCount>
 8002bbc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <prvSampleTimeNow+0x3c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d205      	bcs.n	8002bd4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002bc8:	f000 f92e 	bl	8002e28 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e002      	b.n	8002bda <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002bda:	4a04      	ldr	r2, [pc, #16]	; (8002bec <prvSampleTimeNow+0x3c>)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002be0:	68fb      	ldr	r3, [r7, #12]
    }
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200005fc 	.word	0x200005fc

08002bf0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d812      	bhi.n	8002c3c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e01b      	b.n	8002c62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <prvInsertTimerInActiveList+0x7c>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3304      	adds	r3, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7fe fbdc 	bl	80013f2 <vListInsert>
 8002c3a:	e012      	b.n	8002c62 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d206      	bcs.n	8002c52 <prvInsertTimerInActiveList+0x62>
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d302      	bcc.n	8002c52 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e007      	b.n	8002c62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <prvInsertTimerInActiveList+0x80>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f7fe fbc8 	bl	80013f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002c62:	697b      	ldr	r3, [r7, #20]
    }
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200005f0 	.word	0x200005f0
 8002c70:	200005ec 	.word	0x200005ec

08002c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c7a:	e0c2      	b.n	8002e02 <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	da18      	bge.n	8002cb4 <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	3304      	adds	r3, #4
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	61bb      	str	r3, [r7, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	6850      	ldr	r0, [r2, #4]
 8002cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cae:	6892      	ldr	r2, [r2, #8]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f2c0 80a3 	blt.w	8002e02 <prvProcessReceivedCommands+0x18e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fbc9 	bl	8001464 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff6b 	bl	8002bb0 <prvSampleTimeNow>
 8002cda:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	f200 808d 	bhi.w	8002e00 <prvProcessReceivedCommands+0x18c>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <prvProcessReceivedCommands+0x78>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d11 	.word	0x08002d11
 8002cf4:	08002d79 	.word	0x08002d79
 8002cf8:	08002d8d 	.word	0x08002d8d
 8002cfc:	08002dd7 	.word	0x08002dd7
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d11 	.word	0x08002d11
 8002d08:	08002d79 	.word	0x08002d79
 8002d0c:	08002d8d 	.word	0x08002d8d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	18d1      	adds	r1, r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	6a38      	ldr	r0, [r7, #32]
 8002d30:	f7ff ff5e 	bl	8002bf0 <prvInsertTimerInActiveList>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	4413      	add	r3, r2
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	4619      	mov	r1, r3
 8002d54:	6a38      	ldr	r0, [r7, #32]
 8002d56:	f7ff fe55 	bl	8002a04 <prvReloadTimer>
 8002d5a:	e008      	b.n	8002d6e <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	6a38      	ldr	r0, [r7, #32]
 8002d74:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002d76:	e044      	b.n	8002e02 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002d8a:	e03a      	b.n	8002e02 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	617b      	str	r3, [r7, #20]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	18d1      	adds	r1, r2, r3
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	6a38      	ldr	r0, [r7, #32]
 8002dd0:	f7ff ff0e 	bl	8002bf0 <prvInsertTimerInActiveList>
                        break;
 8002dd4:	e015      	b.n	8002e02 <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 8002de4:	6a38      	ldr	r0, [r7, #32]
 8002de6:	f000 fb1f 	bl	8003428 <vPortFree>
 8002dea:	e00a      	b.n	8002e02 <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002dfe:	e000      	b.n	8002e02 <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002e00:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <prvProcessReceivedCommands+0x1b0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	1d39      	adds	r1, r7, #4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fc56 	bl	80016bc <xQueueReceive>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f47f af32 	bne.w	8002c7c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200005f4 	.word	0x200005f4

08002e28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e2e:	e009      	b.n	8002e44 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <prvSwitchTimerLists+0x44>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f7ff fe02 	bl	8002a48 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <prvSwitchTimerLists+0x44>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <prvSwitchTimerLists+0x44>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <prvSwitchTimerLists+0x48>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <prvSwitchTimerLists+0x44>)
 8002e5a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <prvSwitchTimerLists+0x48>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
    }
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200005ec 	.word	0x200005ec
 8002e70:	200005f0 	.word	0x200005f0

08002e74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002e78:	f000 f95c 	bl	8003134 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <prvCheckForValidListAndQueue+0x54>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11d      	bne.n	8002ec0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002e84:	4811      	ldr	r0, [pc, #68]	; (8002ecc <prvCheckForValidListAndQueue+0x58>)
 8002e86:	f7fe fa87 	bl	8001398 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002e8a:	4811      	ldr	r0, [pc, #68]	; (8002ed0 <prvCheckForValidListAndQueue+0x5c>)
 8002e8c:	f7fe fa84 	bl	8001398 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <prvCheckForValidListAndQueue+0x60>)
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <prvCheckForValidListAndQueue+0x58>)
 8002e94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <prvCheckForValidListAndQueue+0x64>)
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <prvCheckForValidListAndQueue+0x5c>)
 8002e9a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2110      	movs	r1, #16
 8002ea0:	200a      	movs	r0, #10
 8002ea2:	f7fe fb99 	bl	80015d8 <xQueueGenericCreate>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <prvCheckForValidListAndQueue+0x54>)
 8002eaa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <prvCheckForValidListAndQueue+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <prvCheckForValidListAndQueue+0x54>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4908      	ldr	r1, [pc, #32]	; (8002edc <prvCheckForValidListAndQueue+0x68>)
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fd6c 	bl	8001998 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002ec0:	f000 f968 	bl	8003194 <vPortExitCritical>
    }
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200005f4 	.word	0x200005f4
 8002ecc:	200005c4 	.word	0x200005c4
 8002ed0:	200005d8 	.word	0x200005d8
 8002ed4:	200005ec 	.word	0x200005ec
 8002ed8:	200005f0 	.word	0x200005f0
 8002edc:	08003848 	.word	0x08003848

08002ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3b04      	subs	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <pxPortInitialiseStack+0x64>)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b14      	subs	r3, #20
 8002f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3b04      	subs	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f06f 0202 	mvn.w	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b20      	subs	r3, #32
 8002f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002f36:	68fb      	ldr	r3, [r7, #12]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	08002f49 	.word	0x08002f49

08002f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <prvTaskExitError+0x54>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d00a      	beq.n	8002f72 <prvTaskExitError+0x2a>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60fb      	str	r3, [r7, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <prvTaskExitError+0x28>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60bb      	str	r3, [r7, #8]
}
 8002f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f86:	bf00      	nop
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0fc      	beq.n	8002f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <pxCurrentTCBConst2>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	f380 8809 	msr	PSP, r0
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8811 	msr	BASEPRI, r0
 8002fba:	4770      	bx	lr
 8002fbc:	f3af 8000 	nop.w

08002fc0 <pxCurrentTCBConst2>:
 8002fc0:	200000c4 	.word	0x200000c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <prvPortStartFirstTask+0x24>)
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f380 8808 	msr	MSP, r0
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8814 	msr	CONTROL, r0
 8002fda:	b662      	cpsie	i
 8002fdc:	b661      	cpsie	f
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	df00      	svc	0
 8002fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002fea:	bf00      	nop
 8002fec:	e000ed08 	.word	0xe000ed08

08002ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <xPortStartScheduler+0x120>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	; (8003114 <xPortStartScheduler+0x124>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10a      	bne.n	8003016 <xPortStartScheduler+0x26>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	613b      	str	r3, [r7, #16]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <xPortStartScheduler+0x120>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3f      	ldr	r2, [pc, #252]	; (8003118 <xPortStartScheduler+0x128>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10a      	bne.n	8003036 <xPortStartScheduler+0x46>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	60fb      	str	r3, [r7, #12]
}
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <xPortStartScheduler+0x12c>)
 8003038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <xPortStartScheduler+0x130>)
 800305c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <xPortStartScheduler+0x134>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003064:	e009      	b.n	800307a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <xPortStartScheduler+0x134>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3b01      	subs	r3, #1
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <xPortStartScheduler+0x134>)
 800306e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	b2db      	uxtb	r3, r3
 8003078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d0ef      	beq.n	8003066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <xPortStartScheduler+0x134>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00a      	beq.n	80030a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60bb      	str	r3, [r7, #8]
}
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <xPortStartScheduler+0x134>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <xPortStartScheduler+0x134>)
 80030b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <xPortStartScheduler+0x134>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <xPortStartScheduler+0x134>)
 80030bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <xPortStartScheduler+0x138>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <xPortStartScheduler+0x138>)
 80030cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <xPortStartScheduler+0x138>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a14      	ldr	r2, [pc, #80]	; (8003128 <xPortStartScheduler+0x138>)
 80030d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80030de:	f000 f8bb 	bl	8003258 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <xPortStartScheduler+0x13c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80030e8:	f000 f8da 	bl	80032a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030ec:	4b10      	ldr	r3, [pc, #64]	; (8003130 <xPortStartScheduler+0x140>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <xPortStartScheduler+0x140>)
 80030f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80030f8:	f7ff ff66 	bl	8002fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80030fc:	f7ff f8dc 	bl	80022b8 <vTaskSwitchContext>
	prvTaskExitError();
 8003100:	f7ff ff22 	bl	8002f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	410fc271 	.word	0x410fc271
 8003118:	410fc270 	.word	0x410fc270
 800311c:	e000e400 	.word	0xe000e400
 8003120:	20000600 	.word	0x20000600
 8003124:	20000604 	.word	0x20000604
 8003128:	e000ed20 	.word	0xe000ed20
 800312c:	20000010 	.word	0x20000010
 8003130:	e000ef34 	.word	0xe000ef34

08003134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	607b      	str	r3, [r7, #4]
}
 800314c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <vPortEnterCritical+0x58>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	4a0d      	ldr	r2, [pc, #52]	; (800318c <vPortEnterCritical+0x58>)
 8003156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <vPortEnterCritical+0x58>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10f      	bne.n	8003180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <vPortEnterCritical+0x5c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <vPortEnterCritical+0x4c>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	603b      	str	r3, [r7, #0]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <vPortEnterCritical+0x4a>
	}
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	20000010 	.word	0x20000010
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <vPortExitCritical+0x50>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <vPortExitCritical+0x24>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	607b      	str	r3, [r7, #4]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <vPortExitCritical+0x50>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3b01      	subs	r3, #1
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <vPortExitCritical+0x50>)
 80031c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <vPortExitCritical+0x50>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <vPortExitCritical+0x42>
 80031ca:	2300      	movs	r3, #0
 80031cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000010 	.word	0x20000010
	...

080031f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031f0:	f3ef 8009 	mrs	r0, PSP
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <pxCurrentTCBConst>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	f01e 0f10 	tst.w	lr, #16
 8003200:	bf08      	it	eq
 8003202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320a:	6010      	str	r0, [r2, #0]
 800320c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003214:	f380 8811 	msr	BASEPRI, r0
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f7ff f84a 	bl	80022b8 <vTaskSwitchContext>
 8003224:	f04f 0000 	mov.w	r0, #0
 8003228:	f380 8811 	msr	BASEPRI, r0
 800322c:	bc09      	pop	{r0, r3}
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	6808      	ldr	r0, [r1, #0]
 8003232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003236:	f01e 0f10 	tst.w	lr, #16
 800323a:	bf08      	it	eq
 800323c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003240:	f380 8809 	msr	PSP, r0
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	f3af 8000 	nop.w

08003250 <pxCurrentTCBConst>:
 8003250:	200000c4 	.word	0x200000c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop

08003258 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <vPortSetupTimerInterrupt+0x34>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <vPortSetupTimerInterrupt+0x38>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <vPortSetupTimerInterrupt+0x3c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <vPortSetupTimerInterrupt+0x40>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	4a09      	ldr	r2, [pc, #36]	; (800329c <vPortSetupTimerInterrupt+0x44>)
 8003276:	3b01      	subs	r3, #1
 8003278:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <vPortSetupTimerInterrupt+0x34>)
 800327c:	2207      	movs	r2, #7
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e010 	.word	0xe000e010
 8003290:	e000e018 	.word	0xe000e018
 8003294:	20000000 	.word	0x20000000
 8003298:	10624dd3 	.word	0x10624dd3
 800329c:	e000e014 	.word	0xe000e014

080032a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80032a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80032b0 <vPortEnableVFP+0x10>
 80032a4:	6801      	ldr	r1, [r0, #0]
 80032a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032aa:	6001      	str	r1, [r0, #0]
 80032ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80032ae:	bf00      	nop
 80032b0:	e000ed88 	.word	0xe000ed88

080032b4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80032c0:	f7fe fdc8 	bl	8001e54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <pvPortMalloc+0x160>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80032cc:	f000 f908 	bl	80034e0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80032d6:	2208      	movs	r2, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	3308      	adds	r3, #8
 80032e2:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d804      	bhi.n	80032f8 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	e001      	b.n	80032fc <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db70      	blt.n	80033e4 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d06d      	beq.n	80033e4 <pvPortMalloc+0x130>
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <pvPortMalloc+0x164>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d868      	bhi.n	80033e4 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <pvPortMalloc+0x168>)
 8003314:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <pvPortMalloc+0x168>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800331c:	e004      	b.n	8003328 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	429a      	cmp	r2, r3
 8003330:	d903      	bls.n	800333a <pvPortMalloc+0x86>
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f1      	bne.n	800331e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <pvPortMalloc+0x160>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	429a      	cmp	r2, r3
 8003342:	d04f      	beq.n	80033e4 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	4413      	add	r3, r2
 800334c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad2      	subs	r2, r2, r3
 800335e:	2308      	movs	r3, #8
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	429a      	cmp	r2, r3
 8003364:	d91f      	bls.n	80033a6 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <pvPortMalloc+0xda>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	613b      	str	r3, [r7, #16]
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	1ad2      	subs	r2, r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f000 f8f9 	bl	8003598 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033a6:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <pvPortMalloc+0x164>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <pvPortMalloc+0x164>)
 80033b2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <pvPortMalloc+0x164>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <pvPortMalloc+0x16c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d203      	bcs.n	80033c8 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <pvPortMalloc+0x164>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a16      	ldr	r2, [pc, #88]	; (8003420 <pvPortMalloc+0x16c>)
 80033c6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <pvPortMalloc+0x170>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	4a10      	ldr	r2, [pc, #64]	; (8003424 <pvPortMalloc+0x170>)
 80033e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80033e4:	f7fe fd44 	bl	8001e70 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <pvPortMalloc+0x154>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	60fb      	str	r3, [r7, #12]
}
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <pvPortMalloc+0x152>
    return pvReturn;
 8003408:	69fb      	ldr	r3, [r7, #28]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20004210 	.word	0x20004210
 8003418:	20004214 	.word	0x20004214
 800341c:	20004208 	.word	0x20004208
 8003420:	20004218 	.word	0x20004218
 8003424:	2000421c 	.word	0x2000421c

08003428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d049      	beq.n	80034ce <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800343a:	2308      	movs	r3, #8
 800343c:	425b      	negs	r3, r3
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4413      	add	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0a      	blt.n	8003466 <vPortFree+0x3e>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <vPortFree+0x5c>
	__asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	60bb      	str	r3, [r7, #8]
}
 8003480:	bf00      	nop
 8003482:	e7fe      	b.n	8003482 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0fdb      	lsrs	r3, r3, #31
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01c      	beq.n	80034ce <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80034a8:	f7fe fcd4 	bl	8001e54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <vPortFree+0xb0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <vPortFree+0xb0>)
 80034b8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034ba:	6938      	ldr	r0, [r7, #16]
 80034bc:	f000 f86c 	bl	8003598 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <vPortFree+0xb4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4a05      	ldr	r2, [pc, #20]	; (80034dc <vPortFree+0xb4>)
 80034c8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034ca:	f7fe fcd1 	bl	8001e70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20004214 	.word	0x20004214
 80034dc:	20004220 	.word	0x20004220

080034e0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <prvHeapInit+0xa4>)
 80034ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3307      	adds	r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <prvHeapInit+0xa4>)
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <prvHeapInit+0xa8>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <prvHeapInit+0xa8>)
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800352c:	2208      	movs	r2, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0307 	bic.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <prvHeapInit+0xac>)
 8003540:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <prvHeapInit+0xac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <prvHeapInit+0xac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <prvHeapInit+0xac>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <prvHeapInit+0xb0>)
 800356e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <prvHeapInit+0xb4>)
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20000608 	.word	0x20000608
 8003588:	20004208 	.word	0x20004208
 800358c:	20004210 	.word	0x20004210
 8003590:	20004218 	.word	0x20004218
 8003594:	20004214 	.word	0x20004214

08003598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <prvInsertBlockIntoFreeList+0xac>)
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e002      	b.n	80035ac <prvInsertBlockIntoFreeList+0x14>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d8f7      	bhi.n	80035a6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	4413      	add	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d108      	bne.n	80035da <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d118      	bne.n	8003620 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <prvInsertBlockIntoFreeList+0xb0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d00d      	beq.n	8003616 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	441a      	add	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e008      	b.n	8003628 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <prvInsertBlockIntoFreeList+0xb0>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e003      	b.n	8003628 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d002      	beq.n	8003636 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20004208 	.word	0x20004208
 8003648:	20004210 	.word	0x20004210

0800364c <memset>:
 800364c:	4402      	add	r2, r0
 800364e:	4603      	mov	r3, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <_reclaim_reent>:
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <_reclaim_reent+0xa8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4283      	cmp	r3, r0
 8003662:	b570      	push	{r4, r5, r6, lr}
 8003664:	4604      	mov	r4, r0
 8003666:	d04b      	beq.n	8003700 <_reclaim_reent+0xa4>
 8003668:	69c3      	ldr	r3, [r0, #28]
 800366a:	b143      	cbz	r3, 800367e <_reclaim_reent+0x22>
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d144      	bne.n	80036fc <_reclaim_reent+0xa0>
 8003672:	69e3      	ldr	r3, [r4, #28]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	b111      	cbz	r1, 800367e <_reclaim_reent+0x22>
 8003678:	4620      	mov	r0, r4
 800367a:	f000 f879 	bl	8003770 <_free_r>
 800367e:	6961      	ldr	r1, [r4, #20]
 8003680:	b111      	cbz	r1, 8003688 <_reclaim_reent+0x2c>
 8003682:	4620      	mov	r0, r4
 8003684:	f000 f874 	bl	8003770 <_free_r>
 8003688:	69e1      	ldr	r1, [r4, #28]
 800368a:	b111      	cbz	r1, 8003692 <_reclaim_reent+0x36>
 800368c:	4620      	mov	r0, r4
 800368e:	f000 f86f 	bl	8003770 <_free_r>
 8003692:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003694:	b111      	cbz	r1, 800369c <_reclaim_reent+0x40>
 8003696:	4620      	mov	r0, r4
 8003698:	f000 f86a 	bl	8003770 <_free_r>
 800369c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800369e:	b111      	cbz	r1, 80036a6 <_reclaim_reent+0x4a>
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 f865 	bl	8003770 <_free_r>
 80036a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80036a8:	b111      	cbz	r1, 80036b0 <_reclaim_reent+0x54>
 80036aa:	4620      	mov	r0, r4
 80036ac:	f000 f860 	bl	8003770 <_free_r>
 80036b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80036b2:	b111      	cbz	r1, 80036ba <_reclaim_reent+0x5e>
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 f85b 	bl	8003770 <_free_r>
 80036ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80036bc:	b111      	cbz	r1, 80036c4 <_reclaim_reent+0x68>
 80036be:	4620      	mov	r0, r4
 80036c0:	f000 f856 	bl	8003770 <_free_r>
 80036c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036c6:	b111      	cbz	r1, 80036ce <_reclaim_reent+0x72>
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 f851 	bl	8003770 <_free_r>
 80036ce:	6a23      	ldr	r3, [r4, #32]
 80036d0:	b1b3      	cbz	r3, 8003700 <_reclaim_reent+0xa4>
 80036d2:	4620      	mov	r0, r4
 80036d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036d8:	4718      	bx	r3
 80036da:	5949      	ldr	r1, [r1, r5]
 80036dc:	b941      	cbnz	r1, 80036f0 <_reclaim_reent+0x94>
 80036de:	3504      	adds	r5, #4
 80036e0:	69e3      	ldr	r3, [r4, #28]
 80036e2:	2d80      	cmp	r5, #128	; 0x80
 80036e4:	68d9      	ldr	r1, [r3, #12]
 80036e6:	d1f8      	bne.n	80036da <_reclaim_reent+0x7e>
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f841 	bl	8003770 <_free_r>
 80036ee:	e7c0      	b.n	8003672 <_reclaim_reent+0x16>
 80036f0:	680e      	ldr	r6, [r1, #0]
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 f83c 	bl	8003770 <_free_r>
 80036f8:	4631      	mov	r1, r6
 80036fa:	e7ef      	b.n	80036dc <_reclaim_reent+0x80>
 80036fc:	2500      	movs	r5, #0
 80036fe:	e7ef      	b.n	80036e0 <_reclaim_reent+0x84>
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	bf00      	nop
 8003704:	20000060 	.word	0x20000060

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4d0d      	ldr	r5, [pc, #52]	; (8003740 <__libc_init_array+0x38>)
 800370c:	4c0d      	ldr	r4, [pc, #52]	; (8003744 <__libc_init_array+0x3c>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	2600      	movs	r6, #0
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	4d0b      	ldr	r5, [pc, #44]	; (8003748 <__libc_init_array+0x40>)
 800371a:	4c0c      	ldr	r4, [pc, #48]	; (800374c <__libc_init_array+0x44>)
 800371c:	f000 f880 	bl	8003820 <_init>
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	2600      	movs	r6, #0
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	08003868 	.word	0x08003868
 8003744:	08003868 	.word	0x08003868
 8003748:	08003868 	.word	0x08003868
 800374c:	0800386c 	.word	0x0800386c

08003750 <__retarget_lock_acquire_recursive>:
 8003750:	4770      	bx	lr

08003752 <__retarget_lock_release_recursive>:
 8003752:	4770      	bx	lr

08003754 <memcpy>:
 8003754:	440a      	add	r2, r1
 8003756:	4291      	cmp	r1, r2
 8003758:	f100 33ff 	add.w	r3, r0, #4294967295
 800375c:	d100      	bne.n	8003760 <memcpy+0xc>
 800375e:	4770      	bx	lr
 8003760:	b510      	push	{r4, lr}
 8003762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800376a:	4291      	cmp	r1, r2
 800376c:	d1f9      	bne.n	8003762 <memcpy+0xe>
 800376e:	bd10      	pop	{r4, pc}

08003770 <_free_r>:
 8003770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003772:	2900      	cmp	r1, #0
 8003774:	d044      	beq.n	8003800 <_free_r+0x90>
 8003776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377a:	9001      	str	r0, [sp, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f1a1 0404 	sub.w	r4, r1, #4
 8003782:	bfb8      	it	lt
 8003784:	18e4      	addlt	r4, r4, r3
 8003786:	f000 f83f 	bl	8003808 <__malloc_lock>
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <_free_r+0x94>)
 800378c:	9801      	ldr	r0, [sp, #4]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	b933      	cbnz	r3, 80037a0 <_free_r+0x30>
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6014      	str	r4, [r2, #0]
 8003796:	b003      	add	sp, #12
 8003798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800379c:	f000 b83a 	b.w	8003814 <__malloc_unlock>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d908      	bls.n	80037b6 <_free_r+0x46>
 80037a4:	6825      	ldr	r5, [r4, #0]
 80037a6:	1961      	adds	r1, r4, r5
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf01      	itttt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	1949      	addeq	r1, r1, r5
 80037b2:	6021      	streq	r1, [r4, #0]
 80037b4:	e7ed      	b.n	8003792 <_free_r+0x22>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x50>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x46>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1855      	adds	r5, r2, r1
 80037c4:	42a5      	cmp	r5, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x70>
 80037c8:	6824      	ldr	r4, [r4, #0]
 80037ca:	4421      	add	r1, r4
 80037cc:	1854      	adds	r4, r2, r1
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1e0      	bne.n	8003796 <_free_r+0x26>
 80037d4:	681c      	ldr	r4, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	440c      	add	r4, r1
 80037dc:	6014      	str	r4, [r2, #0]
 80037de:	e7da      	b.n	8003796 <_free_r+0x26>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x78>
 80037e2:	230c      	movs	r3, #12
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	e7d6      	b.n	8003796 <_free_r+0x26>
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1961      	adds	r1, r4, r5
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf04      	itt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	bf04      	itt	eq
 80037f8:	1949      	addeq	r1, r1, r5
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6054      	str	r4, [r2, #4]
 80037fe:	e7ca      	b.n	8003796 <_free_r+0x26>
 8003800:	b003      	add	sp, #12
 8003802:	bd30      	pop	{r4, r5, pc}
 8003804:	20004360 	.word	0x20004360

08003808 <__malloc_lock>:
 8003808:	4801      	ldr	r0, [pc, #4]	; (8003810 <__malloc_lock+0x8>)
 800380a:	f7ff bfa1 	b.w	8003750 <__retarget_lock_acquire_recursive>
 800380e:	bf00      	nop
 8003810:	2000435c 	.word	0x2000435c

08003814 <__malloc_unlock>:
 8003814:	4801      	ldr	r0, [pc, #4]	; (800381c <__malloc_unlock+0x8>)
 8003816:	f7ff bf9c 	b.w	8003752 <__retarget_lock_release_recursive>
 800381a:	bf00      	nop
 800381c:	2000435c 	.word	0x2000435c

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
