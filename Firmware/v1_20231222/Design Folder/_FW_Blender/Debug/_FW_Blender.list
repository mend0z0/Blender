
_FW_Blender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d8c  08003d8c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003d8c  08003d8c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d8c  08003d8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f0c  20000060  08003df4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f6c  08003df4  00023f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d29  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aaa  00000000  00000000  00028dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060d  00000000  00000000  0002b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cd5  00000000  00000000  0002b6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000349c  00000000  00000000  000323a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002204  00000000  00000000  00035840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  00037a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d50 	.word	0x08003d50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08003d50 	.word	0x08003d50

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db0b      	blt.n	8000282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	4907      	ldr	r1, [pc, #28]	; (8000290 <__NVIC_EnableIRQ+0x38>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000e100 	.word	0xe000e100

08000294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	db0a      	blt.n	80002be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	490c      	ldr	r1, [pc, #48]	; (80002e0 <__NVIC_SetPriority+0x4c>)
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002bc:	e00a      	b.n	80002d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <__NVIC_SetPriority+0x50>)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	3b04      	subs	r3, #4
 80002cc:	0112      	lsls	r2, r2, #4
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	440b      	add	r3, r1
 80002d2:	761a      	strb	r2, [r3, #24]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000e100 	.word	0xe000e100
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <_init_ISR>:

/****************************************************************************************************
****************************         GLOBAL FUNTIONS         ****************************************
*****************************************************************************************************/
void _init_ISR( void )
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	// Set Interrupts priority.
	NVIC_SetPriority(DMA1_Stream4_IRQn	, DMA1_Stream4_IRQ_PRIORITY + 5);
 80002ec:	2350      	movs	r3, #80	; 0x50
 80002ee:	3305      	adds	r3, #5
 80002f0:	4619      	mov	r1, r3
 80002f2:	200f      	movs	r0, #15
 80002f4:	f7ff ffce 	bl	8000294 <__NVIC_SetPriority>
	NVIC_SetPriority(DMA2_Stream6_IRQn	, DMA2_Stream6_IRQ_PRIORITY + 5);
 80002f8:	2350      	movs	r3, #80	; 0x50
 80002fa:	3305      	adds	r3, #5
 80002fc:	4619      	mov	r1, r3
 80002fe:	2045      	movs	r0, #69	; 0x45
 8000300:	f7ff ffc8 	bl	8000294 <__NVIC_SetPriority>
	NVIC_SetPriority(TIM3_IRQn		, TIM3_IRQ_PRIORITY + 5);
 8000304:	2350      	movs	r3, #80	; 0x50
 8000306:	3305      	adds	r3, #5
 8000308:	4619      	mov	r1, r3
 800030a:	201d      	movs	r0, #29
 800030c:	f7ff ffc2 	bl	8000294 <__NVIC_SetPriority>
	NVIC_SetPriority(FMPI2C1_EV_IRQn	, FMPI2C1_EV_IRQ_PRIORITY + 5);
 8000310:	2350      	movs	r3, #80	; 0x50
 8000312:	3305      	adds	r3, #5
 8000314:	4619      	mov	r1, r3
 8000316:	205f      	movs	r0, #95	; 0x5f
 8000318:	f7ff ffbc 	bl	8000294 <__NVIC_SetPriority>
	NVIC_SetPriority(USART1_IRQn		, USART1_IRQ_PRIORITY + 5);
 800031c:	2350      	movs	r3, #80	; 0x50
 800031e:	3305      	adds	r3, #5
 8000320:	4619      	mov	r1, r3
 8000322:	2025      	movs	r0, #37	; 0x25
 8000324:	f7ff ffb6 	bl	8000294 <__NVIC_SetPriority>

	// Enable Required Interrupts.
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000328:	200f      	movs	r0, #15
 800032a:	f7ff ff95 	bl	8000258 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800032e:	2045      	movs	r0, #69	; 0x45
 8000330:	f7ff ff92 	bl	8000258 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000334:	201d      	movs	r0, #29
 8000336:	f7ff ff8f 	bl	8000258 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 800033a:	205f      	movs	r0, #95	; 0x5f
 800033c:	f7ff ff8c 	bl	8000258 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(USART1_IRQn);
 8000340:	2025      	movs	r0, #37	; 0x25
 8000342:	f7ff ff89 	bl	8000258 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(SysTick_IRQn);
 8000346:	f04f 30ff 	mov.w	r0, #4294967295
 800034a:	f7ff ff85 	bl	8000258 <__NVIC_EnableIRQ>

	//If you are using an STM32 with the STM32 driver library then ensure
	//all the priority bits are assigned to be preempt priority bits by
	//calling NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 ); before the RTOS is started.
	NVIC_SetPriorityGrouping( 4 );
 800034e:	2004      	movs	r0, #4
 8000350:	f7ff ff5e 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}

08000358 <SysTick_Handler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void SysTick_Handler( void )
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  ledIndCnt--;					// (1)
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <SysTick_Handler+0x50>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <SysTick_Handler+0x50>)
 8000364:	6013      	str	r3, [r2, #0]
  if(ledIndCnt == 0)				// (2)
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <SysTick_Handler+0x50>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d116      	bne.n	800039c <SysTick_Handler+0x44>
    {
      ledIndCnt = LED_IND_DELAY;		// (3)
 800036e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <SysTick_Handler+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <SysTick_Handler+0x54>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	2b00      	cmp	r3, #0
 8000380:	d006      	beq.n	8000390 <SysTick_Handler+0x38>
	{
	  CLEAR_BIT(LED_IND_PORT, LED_IND_PIN);	// (5)
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <SysTick_Handler+0x54>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a09      	ldr	r2, [pc, #36]	; (80003ac <SysTick_Handler+0x54>)
 8000388:	f023 0304 	bic.w	r3, r3, #4
 800038c:	6153      	str	r3, [r2, #20]
      else
	{
	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
	}
    }
}
 800038e:	e005      	b.n	800039c <SysTick_Handler+0x44>
	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <SysTick_Handler+0x54>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <SysTick_Handler+0x54>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6153      	str	r3, [r2, #20]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	40020c00 	.word	0x40020c00

080003b0 <DMA1_Stream0_IRQHandler>:
/*			General-purpose I/Os								*/


/*			Direct memory access controller						*/
void DMA1_Stream0_IRQHandler( void )
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler( void )
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler( void )
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler( void )
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <DMA1_Stream4_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void DMA1_Stream4_IRQHandler( void )
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  DMA1_Stream5->CR &= ~DMA_SxCR_TCIE;				// (1)
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <DMA1_Stream4_IRQHandler+0x2c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a08      	ldr	r2, [pc, #32]	; (8000414 <DMA1_Stream4_IRQHandler+0x2c>)
 80003f2:	f023 0310 	bic.w	r3, r3, #16
 80003f6:	6013      	str	r3, [r2, #0]
  FMPI2C1->CR2 |= FMPI2C_CR2_STOP;				// (2)
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <DMA1_Stream4_IRQHandler+0x30>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4a06      	ldr	r2, [pc, #24]	; (8000418 <DMA1_Stream4_IRQHandler+0x30>)
 80003fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000402:	6053      	str	r3, [r2, #4]
  xSemaphoreGiveFromISR( FMPI2CBinarySemaphore, pdFALSE);	// (3)
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <DMA1_Stream4_IRQHandler+0x34>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f001 f861 	bl	80014d2 <xQueueGiveFromISR>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40026088 	.word	0x40026088
 8000418:	40006000 	.word	0x40006000
 800041c:	2000007c 	.word	0x2000007c

08000420 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler( void )
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler( void )
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler( void )
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler( void )
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler( void )
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler( void )
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler( void )
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler( void )
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <DMA2_Stream6_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void DMA2_Stream6_IRQHandler( void )
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  DMA2->HIFCR |= DMA_HIFCR_CTCIF7;	// (1)
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <DMA2_Stream6_IRQHandler+0x28>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <DMA2_Stream6_IRQHandler+0x28>)
 800049a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800049e:	60d3      	str	r3, [r2, #12]
  DMA2_Stream7->CR &= ~DMA_SxCR_TCIE;	// (2)
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <DMA2_Stream6_IRQHandler+0x2c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <DMA2_Stream6_IRQHandler+0x2c>)
 80004a6:	f023 0310 	bic.w	r3, r3, #16
 80004aa:	6013      	str	r3, [r2, #0]
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40026400 	.word	0x40026400
 80004bc:	400264b8 	.word	0x400264b8

080004c0 <TIM3_IRQHandler>:
*	(2) Giving back the semaphore
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void TIM3_IRQHandler( void ){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  TIM3->SR &= ~TIM_SR_UIF;				// (1)
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <TIM3_IRQHandler+0x20>)
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <TIM3_IRQHandler+0x20>)
 80004ca:	f023 0301 	bic.w	r3, r3, #1
 80004ce:	6113      	str	r3, [r2, #16]
  xSemaphoreGiveFromISR( TIM3BinarySemaphore, pdFALSE);	// (2)
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <TIM3_IRQHandler+0x24>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fffb 	bl	80014d2 <xQueueGiveFromISR>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40000400 	.word	0x40000400
 80004e4:	20000084 	.word	0x20000084

080004e8 <FMPI2C1_EV_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void FMPI2C1_EV_IRQHandler( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  if((FMPI2C1->ISR & FMPI2C_ISR_NACKF) == FMPI2C_ISR_NACKF)	// (1)
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0310 	and.w	r3, r3, #16
 80004f4:	2b10      	cmp	r3, #16
 80004f6:	d10c      	bne.n	8000512 <FMPI2C1_EV_IRQHandler+0x2a>
    {
      FMPI2C1->CR1 &= ~FMPI2C_CR1_NACKIE;			// (2)
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 80004fe:	f023 0310 	bic.w	r3, r3, #16
 8000502:	6013      	str	r3, [r2, #0]
      xSemaphoreGiveFromISR( FMPI2CBinarySemaphore, pdFALSE);	// (3)
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <FMPI2C1_EV_IRQHandler+0x58>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f000 ffe1 	bl	80014d2 <xQueueGiveFromISR>
  else if((FMPI2C1->ISR & FMPI2C_ISR_TXIS) == FMPI2C_ISR_TXIS)	// (4)
    {
      FMPI2C1->CR1 |= FMPI2C_CR1_TXDMAEN;			// (5)
      FMPI2C1->CR1 &= ~FMPI2C_CR1_TXIE;				// (6)
    }
}
 8000510:	e011      	b.n	8000536 <FMPI2C1_EV_IRQHandler+0x4e>
  else if((FMPI2C1->ISR & FMPI2C_ISR_TXIS) == FMPI2C_ISR_TXIS)	// (4)
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	2b02      	cmp	r3, #2
 800051c:	d10b      	bne.n	8000536 <FMPI2C1_EV_IRQHandler+0x4e>
      FMPI2C1->CR1 |= FMPI2C_CR1_TXDMAEN;			// (5)
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 8000524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000528:	6013      	str	r3, [r2, #0]
      FMPI2C1->CR1 &= ~FMPI2C_CR1_TXIE;				// (6)
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a03      	ldr	r2, [pc, #12]	; (800053c <FMPI2C1_EV_IRQHandler+0x54>)
 8000530:	f023 0302 	bic.w	r3, r3, #2
 8000534:	6013      	str	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40006000 	.word	0x40006000
 8000540:	2000007c 	.word	0x2000007c

08000544 <FMPI2C1_ER_IRQHandler>:

void FMPI2C1_ER_IRQHandler( void )
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <USART1_IRQHandler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void USART1_IRQHandler( void )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  USART1->CR1 &= ~USART_CR1_TCIE;				// (1)
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <USART1_IRQHandler+0x20>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <USART1_IRQHandler+0x20>)
 800055e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000562:	60d3      	str	r3, [r2, #12]
  xSemaphoreGiveFromISR( USART1BinarySemaphore, pdFALSE);	// (2)
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <USART1_IRQHandler+0x24>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ffb1 	bl	80014d2 <xQueueGiveFromISR>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40011000 	.word	0x40011000
 8000578:	20000080 	.word	0x20000080

0800057c <main>:

/****************************************************************************************************
****************************         STATIC FUNTIONS         ****************************************
*****************************************************************************************************/
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* 	----------------------   		MCU Configuration				----------------------------
	----------------------   Initialize all configured peripherals  ----------------------------*/
  _init_Peripherals();
 8000582:	f000 f985 	bl	8000890 <_init_Peripherals>
  _init_ISR();
 8000586:	f7ff feaf 	bl	80002e8 <_init_ISR>
  /* ----------------------   	  Modules Configuration 			----------------------------*/
  SET_BIT( EXT_LDO_EN_PORT, EXT_LDO_EN_PIN);	//Enable the LDO power to turn the modules on
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <main+0x4c>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <main+0x4c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6153      	str	r3, [r2, #20]
  _init_PAM8003();
 8000596:	f000 f8ed 	bl	8000774 <_init_PAM8003>
  //while(1);
  //Each module init will be a task...
  xTaskCreate( 	_init_DMX, 	// Pointer to the function that implements the task.
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2303      	movs	r3, #3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <main+0x50>)
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <main+0x54>)
 80005aa:	f001 fb3d 	bl	8001c28 <xTaskCreate>
		NULL,		// This example does not use the task parameter.
		3,			// This task will run at priority 2.
		NULL		// This example does not use the task handle.
  );

  xTaskCreate(	_init_WS2812, 	// Pointer to the function that implements the task.
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2303      	movs	r3, #3
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	22c8      	movs	r2, #200	; 0xc8
 80005ba:	4906      	ldr	r1, [pc, #24]	; (80005d4 <main+0x58>)
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x5c>)
 80005be:	f001 fb33 	bl	8001c28 <xTaskCreate>
  //			NULL,		// This example does not use the task parameter.
  //			4,			// This task will run at priority 2.
  //			NULL		// This example does not use the task handle.
  //		);
  /* Start the created tasks running. */
  vTaskStartScheduler();
 80005c2:	f001 fce7 	bl	8001f94 <vTaskStartScheduler>

  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0x4a>
 80005c8:	40020800 	.word	0x40020800
 80005cc:	08003d68 	.word	0x08003d68
 80005d0:	08000653 	.word	0x08000653
 80005d4:	08003d6c 	.word	0x08003d6c
 80005d8:	08000f29 	.word	0x08000f29

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SystemInit+0x20>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <SystemInit+0x20>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000604:	f7ff ffea 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800062e:	f003 fb03 	bl	8003c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000632:	f7ff ffa3 	bl	800057c <main>
  bx  lr    
 8000636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000644:	08003d94 	.word	0x08003d94
  ldr r2, =_sbss
 8000648:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800064c:	20003f6c 	.word	0x20003f6c

08000650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>

08000652 <_init_DMX>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void _init_DMX( void *pvParameters)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b088      	sub	sp, #32
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	struct dmx_colors dmx_head[DMX_MAX_HEAD];	// Creating 7 different DMX receiver

	//	(1)
	for(cnt = 0; cnt < DMX_MAX_HEAD; ++cnt)
 800065a:	2300      	movs	r3, #0
 800065c:	77fb      	strb	r3, [r7, #31]
 800065e:	e01d      	b.n	800069c <_init_DMX+0x4a>
	{
		dmx_head[cnt].colorRed = DMX_RESET_VALUE_R;
 8000660:	7ffa      	ldrb	r2, [r7, #31]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	3320      	adds	r3, #32
 800066a:	443b      	add	r3, r7
 800066c:	3b18      	subs	r3, #24
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		dmx_head[cnt].colorGreen = DMX_RESET_VALUE_G;
 8000672:	7ffa      	ldrb	r2, [r7, #31]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	3320      	adds	r3, #32
 800067c:	443b      	add	r3, r7
 800067e:	3b17      	subs	r3, #23
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
		dmx_head[cnt].colorBlue = DMX_RESET_VALUE_B;
 8000684:	7ffa      	ldrb	r2, [r7, #31]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	3320      	adds	r3, #32
 800068e:	443b      	add	r3, r7
 8000690:	3b16      	subs	r3, #22
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
	for(cnt = 0; cnt < DMX_MAX_HEAD; ++cnt)
 8000696:	7ffb      	ldrb	r3, [r7, #31]
 8000698:	3301      	adds	r3, #1
 800069a:	77fb      	strb	r3, [r7, #31]
 800069c:	7ffb      	ldrb	r3, [r7, #31]
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d9de      	bls.n	8000660 <_init_DMX+0xe>
	}

	while(1)																				// (2)
	{
		dmx_head[cnt].colorRed = (dmx_head[cnt].colorRed << 1) | DMX_CONSTANT_VALUE_R;		// (3)
 80006a2:	7ffa      	ldrb	r2, [r7, #31]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	3320      	adds	r3, #32
 80006ac:	443b      	add	r3, r7
 80006ae:	3b18      	subs	r3, #24
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	7ffa      	ldrb	r2, [r7, #31]
 80006be:	b2d9      	uxtb	r1, r3
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	3320      	adds	r3, #32
 80006c8:	443b      	add	r3, r7
 80006ca:	3b18      	subs	r3, #24
 80006cc:	460a      	mov	r2, r1
 80006ce:	701a      	strb	r2, [r3, #0]
		dmx_head[cnt].colorGreen = (dmx_head[cnt].colorGreen << 1) | DMX_CONSTANT_VALUE_G;	// (4)
 80006d0:	7ffa      	ldrb	r2, [r7, #31]
 80006d2:	4613      	mov	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	3320      	adds	r3, #32
 80006da:	443b      	add	r3, r7
 80006dc:	3b17      	subs	r3, #23
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	7ffa      	ldrb	r2, [r7, #31]
 80006ec:	b2d9      	uxtb	r1, r3
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	3320      	adds	r3, #32
 80006f6:	443b      	add	r3, r7
 80006f8:	3b17      	subs	r3, #23
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
		dmx_head[cnt].colorBlue = (dmx_head[cnt].colorBlue << 1) | DMX_CONSTANT_VALUE_B;	// (5)
 80006fe:	7ffa      	ldrb	r2, [r7, #31]
 8000700:	4613      	mov	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	3320      	adds	r3, #32
 8000708:	443b      	add	r3, r7
 800070a:	3b16      	subs	r3, #22
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	b25b      	sxtb	r3, r3
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	b25b      	sxtb	r3, r3
 8000718:	7ffa      	ldrb	r2, [r7, #31]
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	3320      	adds	r3, #32
 8000724:	443b      	add	r3, r7
 8000726:	3b16      	subs	r3, #22
 8000728:	460a      	mov	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]

		cnt++;																				// (6)
 800072c:	7ffb      	ldrb	r3, [r7, #31]
 800072e:	3301      	adds	r3, #1
 8000730:	77fb      	strb	r3, [r7, #31]

		if(cnt == DMX_MAX_HEAD)																// (7)
 8000732:	7ffb      	ldrb	r3, [r7, #31]
 8000734:	2b07      	cmp	r3, #7
 8000736:	d101      	bne.n	800073c <_init_DMX+0xea>
		{
			cnt = 0;																		// (8)
 8000738:	2300      	movs	r3, #0
 800073a:	77fb      	strb	r3, [r7, #31]
		}

		DMXHeadUpdate( &dmx_head[0].colorRed, (DMX_MAX_HEAD *3));							// (9)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2115      	movs	r1, #21
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f805 	bl	8000752 <DMXHeadUpdate>

		vTaskDelay( xDelay100ms );														// (10)
 8000748:	2319      	movs	r3, #25
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fbee 	bl	8001f2c <vTaskDelay>
		dmx_head[cnt].colorRed = (dmx_head[cnt].colorRed << 1) | DMX_CONSTANT_VALUE_R;		// (3)
 8000750:	e7a7      	b.n	80006a2 <_init_DMX+0x50>

08000752 <DMXHeadUpdate>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
int8_t DMXHeadUpdate( uint8_t *colors, uint32_t numOfHead)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]
	return (int8_t)UART1DataTx( *colors, numOfHead);	// (1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f908 	bl	8000978 <UART1DataTx>
 8000768:	4603      	mov	r3, r0
 800076a:	b25b      	sxtb	r3, r3
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_init_PAM8003>:

/****************************************************************************************************
****************************         GLOBAL FUNTIONS         ****************************************
*****************************************************************************************************/
void _init_PAM8003( void )
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	PAM8003Mute( PAM8003_CMD_UNMUTE );
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f807 	bl	800078c <PAM8003Mute>
	PAM8003SetVolume( PAM8003_VOL_VAL_DEFAULT );
 800077e:	2314      	movs	r3, #20
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f823 	bl	80007cc <PAM8003SetVolume>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <PAM8003Mute>:

void PAM8003Mute( uint8_t cmd )
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	if(cmd == PAM8003_CMD_MUTE)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d106      	bne.n	80007aa <PAM8003Mute+0x1e>
	{
		SET_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <PAM8003Mute+0x3c>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <PAM8003Mute+0x3c>)
 80007a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a6:	6153      	str	r3, [r2, #20]
	}
	else if( cmd == PAM8003_CMD_UNMUTE )
	{
		CLEAR_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
	}
}
 80007a8:	e008      	b.n	80007bc <PAM8003Mute+0x30>
	else if( cmd == PAM8003_CMD_UNMUTE )
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d105      	bne.n	80007bc <PAM8003Mute+0x30>
		CLEAR_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <PAM8003Mute+0x3c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <PAM8003Mute+0x3c>)
 80007b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ba:	6153      	str	r3, [r2, #20]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40020000 	.word	0x40020000

080007cc <PAM8003SetVolume>:

void PAM8003SetVolume( uint8_t value /*Percent like 0% to 100%*/)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	//just checking the min and max of input.
	if((value > PAM8003_VOL_VAL_MAX) || (value < PAM8003_VOL_VAL_MIN)){
 80007d6:	2264      	movs	r2, #100	; 0x64
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4293      	cmp	r3, r2
 80007dc:	d808      	bhi.n	80007f0 <PAM8003SetVolume+0x24>
 80007de:	2200      	movs	r2, #0
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d304      	bcc.n	80007f0 <PAM8003SetVolume+0x24>
		return;
	}
	DACUpdate( value );
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f875 	bl	80008d8 <DACUpdate>
 80007ee:	e000      	b.n	80007f2 <PAM8003SetVolume+0x26>
		return;
 80007f0:	bf00      	nop
}
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <__NVIC_SetPriority>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800085c:	d301      	bcc.n	8000862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085e:	2301      	movs	r3, #1
 8000860:	e00f      	b.n	8000882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <SysTick_Config+0x40>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086a:	210f      	movs	r1, #15
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f7ff ffc2 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <SysTick_Config+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <SysTick_Config+0x40>)
 800087c:	2207      	movs	r2, #7
 800087e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010

08000890 <_init_Peripherals>:
*	(1) Init all the required peripherals.
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void _init_Peripherals( void ){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	//_init_PWR();
	_init_RCC();
 8000894:	f000 f8d4 	bl	8000a40 <_init_RCC>
	_init_GPIO();
 8000898:	f000 f96c 	bl	8000b74 <_init_GPIO>
	_init_DMA();
 800089c:	f000 f9d2 	bl	8000c44 <_init_DMA>
	_init_ADC1();
 80008a0:	f000 fa7c 	bl	8000d9c <_init_ADC1>
	_init_ADC2();
 80008a4:	f000 fa81 	bl	8000daa <_init_ADC2>
	_init_ADC3();
 80008a8:	f000 fa86 	bl	8000db8 <_init_ADC3>
	_init_DAC();
 80008ac:	f000 fa8c 	bl	8000dc8 <_init_DAC>
	_init_TIM1();
 80008b0:	f000 faa2 	bl	8000df8 <_init_TIM1>
	_init_TIM2();
 80008b4:	f000 faa7 	bl	8000e06 <_init_TIM2>
	_init_TIM3();
 80008b8:	f000 faac 	bl	8000e14 <_init_TIM3>
	_init_RTC();
 80008bc:	f000 fad2 	bl	8000e64 <_init_RTC>
	_init_FMPI2C1();
 80008c0:	f000 fad8 	bl	8000e74 <_init_FMPI2C1>
	_init_UART1();
 80008c4:	f000 fb00 	bl	8000ec8 <_init_UART1>
	_init_I2S();
 80008c8:	f000 fb20 	bl	8000f0c <_init_I2S>
	_init_SPDIF();
 80008cc:	f000 fb25 	bl	8000f1a <_init_SPDIF>
	_init_SysTick();
 80008d0:	f000 f8a6 	bl	8000a20 <_init_SysTick>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <DACUpdate>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void DACUpdate( uint8_t dacValue)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	__IO uint16_t tempDACValue = dacValue * DAC_CONSTANT;	// (1)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	2228      	movs	r2, #40	; 0x28
 80008e8:	fb13 f302 	smulbb	r3, r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	81fb      	strh	r3, [r7, #14]
	DAC1->DHR12R1 = tempDACValue;							// (2)
 80008f0:	89fb      	ldrh	r3, [r7, #14]
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <DACUpdate+0x38>)
 80008f6:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;					// (3)
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <DACUpdate+0x38>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <DACUpdate+0x38>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6053      	str	r3, [r2, #4]

	//No interrupt, it'll work probably :D
	//I can read the DAC1->DOR1 to make sure it's been registered, but maybe later...
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40007400 	.word	0x40007400

08000914 <TIM3Enable>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void TIM3Enable( void )
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;				// (1)
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <TIM3Enable+0x20>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CR1 |= TIM_CR1_CEN;	// (2)
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <TIM3Enable+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <TIM3Enable+0x20>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40000400 	.word	0x40000400

08000938 <TIM3Disable>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void TIM3Disable( void )
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;	// (1)
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <TIM3Disable+0x1c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <TIM3Disable+0x1c>)
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40000400 	.word	0x40000400

08000958 <TIM3UpdateCCR3>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void TIM3UpdateCCR3( uint32_t ccrValue )
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	TIM3->CCR3 = ccrValue;	// (1)
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <TIM3UpdateCCR3+0x1c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40000400 	.word	0x40000400

08000978 <UART1DataTx>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
int32_t UART1DataTx( uint8_t *data, uint32_t buffSize)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	__IO int32_t status = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]

	USART1BinarySemaphore = xSemaphoreCreateBinary();					// (1)
 8000986:	2203      	movs	r2, #3
 8000988:	2100      	movs	r1, #0
 800098a:	2001      	movs	r0, #1
 800098c:	f000 fd30 	bl	80013f0 <xQueueGenericCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <UART1DataTx+0xa0>)
 8000994:	6013      	str	r3, [r2, #0]

	if(USART1BinarySemaphore == NULL)									// (2)
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <UART1DataTx+0xa0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <UART1DataTx+0x2c>
	{
		status = pdFALSE;												// (3)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	e02d      	b.n	8000a00 <UART1DataTx+0x88>
	}
	else
	{
		DMAEnable( DMA2_UART1_TX_EN, *data, buffSize);					// (4)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f97d 	bl	8000cac <DMAEnable>
		USART1->CR1 |= USART_CR1_TCIE;									// (5)
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <UART1DataTx+0xa4>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <UART1DataTx+0xa4>)
 80009b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009bc:	60d3      	str	r3, [r2, #12]
		USART1->CR1 |= USART_CR1_UE;									// (6)
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <UART1DataTx+0xa4>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <UART1DataTx+0xa4>)
 80009c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c8:	60d3      	str	r3, [r2, #12]

		xSemaphoreTake( USART1BinarySemaphore, semaphoreWatiTime10ms);	// (7)
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <UART1DataTx+0xa0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2202      	movs	r2, #2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 ff02 	bl	80017dc <xQueueSemaphoreTake>

		DMADisable( DMA2_UART1_TX_DIS );								// (8)
 80009d8:	2006      	movs	r0, #6
 80009da:	f000 f9af 	bl	8000d3c <DMADisable>

		if((USART1->SR & USART_SR_TC) == USART_SR_TC)					// (9)
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <UART1DataTx+0xa4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e6:	2b40      	cmp	r3, #64	; 0x40
 80009e8:	d108      	bne.n	80009fc <UART1DataTx+0x84>
		{
			USART1->SR &= ~USART_SR_TC;									// (10)
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <UART1DataTx+0xa4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <UART1DataTx+0xa4>)
 80009f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009f4:	6013      	str	r3, [r2, #0]
			status = (int32_t)buffSize;									// (11)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e001      	b.n	8000a00 <UART1DataTx+0x88>
		}
		else
		{
			status = pdFALSE;											// (12)
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
		}
	}
	USART1->CR1 &= ~USART_CR1_UE;										// (13)
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <UART1DataTx+0xa4>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <UART1DataTx+0xa4>)
 8000a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a0a:	60d3      	str	r3, [r2, #12]
	return status;														// (14)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	40011000 	.word	0x40011000

08000a20 <_init_SysTick>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_SysTick( void )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	SysTick_Config(SysTickInputClock / 1000);		// (1)
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <_init_SysTick+0x18>)
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <_init_SysTick+0x1c>)
 8000a28:	fba3 2302 	umull	r2, r3, r3, r2
 8000a2c:	099b      	lsrs	r3, r3, #6
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff0c 	bl	800084c <SysTick_Config>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	00aba950 	.word	0x00aba950
 8000a3c:	10624dd3 	.word	0x10624dd3

08000a40 <_init_RCC>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_RCC( void )
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	////--------------Enabling the HSE
	RCC->CR |= RCC_CR_HSEON;								// (1)
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <_init_RCC+0x130>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <_init_RCC+0x130>)
 8000a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4e:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY) == 0)					// (2)
 8000a50:	bf00      	nop
 8000a52:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <_init_RCC+0x130>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f9      	beq.n	8000a52 <_init_RCC+0x12>
	{
		//maybe add a time out later
	}

	////--------------Configuration for PLLs
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;						// (3)
 8000a5e:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <_init_RCC+0x130>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	4a43      	ldr	r2, [pc, #268]	; (8000b70 <_init_RCC+0x130>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR |= ((	RCC_PLLCFGR_PLLN_2 	|				// (4)
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <_init_RCC+0x130>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <_init_RCC+0x130>)
 8000a70:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6053      	str	r3, [r2, #4]
						RCC_PLLCFGR_PLLN_4 	|
						RCC_PLLCFGR_PLLN_5 	|
						RCC_PLLCFGR_PLLN_7) |
						RCC_PLLCFGR_PLLM_3);

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_1;						// (5)
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <_init_RCC+0x130>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <_init_RCC+0x130>)
 8000a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a84:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;								// (6)
 8000a86:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <_init_RCC+0x130>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a39      	ldr	r2, [pc, #228]	; (8000b70 <_init_RCC+0x130>)
 8000a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a90:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0)					// (7)
 8000a92:	bf00      	nop
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <_init_RCC+0x130>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f9      	beq.n	8000a94 <_init_RCC+0x54>
	{
		//maybe add a time out later
	}

	RCC->CFGR |= RCC_CFGR_SW_1;								// (8)
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <_init_RCC+0x130>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	4a32      	ldr	r2, [pc, #200]	; (8000b70 <_init_RCC+0x130>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS_1) != RCC_CFGR_SWS_1)	// (9)
 8000aac:	bf00      	nop
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <_init_RCC+0x130>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	2b08      	cmp	r3, #8
 8000ab8:	d1f9      	bne.n	8000aae <_init_RCC+0x6e>
	{
		//maybe add a time out later
	}

	RCC->CFGR |= RCC_CFGR_HPRE_3;							// (10)
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <_init_RCC+0x130>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <_init_RCC+0x130>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_2; 		// (11)
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <_init_RCC+0x130>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <_init_RCC+0x130>)
 8000acc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000ad0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_2;							// (12)
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <_init_RCC+0x130>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <_init_RCC+0x130>)
 8000ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000adc:	6093      	str	r3, [r2, #8]


	RCC->AHB1ENR |= (	RCC_AHB1ENR_GPIOAEN |				// (13)
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <_init_RCC+0x130>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <_init_RCC+0x130>)
 8000ae4:	f043 030f 	orr.w	r3, r3, #15
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
						RCC_AHB1ENR_GPIOBEN |				// (14)
						RCC_AHB1ENR_GPIOCEN |				// (15)
						RCC_AHB1ENR_GPIODEN					// (16)
					);
	;
	RCC->AHB1ENR |= (	RCC_AHB1ENR_DMA1EN	| 				// (17)
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <_init_RCC+0x130>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <_init_RCC+0x130>)
 8000af0:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
					 	RCC_AHB1ENR_DMA2EN					// (18)
					);
	//RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;					// (19)
	//RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;					// (20)
	//RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;					// (21)
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;						// (22)
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <_init_RCC+0x130>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <_init_RCC+0x130>)
 8000afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;						// (23)
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <_init_RCC+0x130>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <_init_RCC+0x130>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;						// (24)
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <_init_RCC+0x130>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <_init_RCC+0x130>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;						// (25)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_init_RCC+0x130>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_init_RCC+0x130>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_FMPI2C1EN;					// (26)
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <_init_RCC+0x130>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <_init_RCC+0x130>)
 8000b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;					// (27)
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <_init_RCC+0x130>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <_init_RCC+0x130>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;						// (28)
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <_init_RCC+0x130>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <_init_RCC+0x130>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_SPDIFRXSEL;				// (29)
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <_init_RCC+0x130>)
 8000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <_init_RCC+0x130>)
 8000b52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	RCC->APB1ENR |= RCC_APB1ENR_SPDIFRXEN;					// (30)
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <_init_RCC+0x130>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <_init_RCC+0x130>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800

08000b74 <_init_GPIO>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_GPIO( void )
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	/*		MODER REGs		*/
	GPIOA->MODER |= (	GPIO_MODER_MODER4_0  | GPIO_MODER_MODER4_1 |							// (1)
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <_init_GPIO+0xb0>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4929      	ldr	r1, [pc, #164]	; (8000c24 <_init_GPIO+0xb0>)
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <_init_GPIO+0xb4>)
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
						GPIO_MODER_MODER3_1  |													// (8)
						GPIO_MODER_MODER5_1  |													// (9)
						GPIO_MODER_MODER15_1													// (10)
					);

	GPIOB->MODER |= (	GPIO_MODER_MODER13_0 |													// (11)
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <_init_GPIO+0xb8>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4928      	ldr	r1, [pc, #160]	; (8000c2c <_init_GPIO+0xb8>)
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <_init_GPIO+0xbc>)
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	600b      	str	r3, [r1, #0]
						GPIO_MODER_MODER0_1	 |													// (16)
						GPIO_MODER_MODER1_1  |													// (17)
						GPIO_MODER_MODER7_1	 													// (18)
					);

	GPIOC->MODER |= (	GPIO_MODER_MODER0_0  |													// (19)
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <_init_GPIO+0xc0>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4927      	ldr	r1, [pc, #156]	; (8000c34 <_init_GPIO+0xc0>)
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <_init_GPIO+0xc4>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	600b      	str	r3, [r1, #0]
						GPIO_MODER_MODER4_1  |													// (22)
						GPIO_MODER_MODER6_1	 |													// (23)
						GPIO_MODER_MODER7_1														// (24)
					);

	GPIOD->MODER |= GPIO_MODER_MODER2_0;														// (25)
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <_init_GPIO+0xc8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <_init_GPIO+0xc8>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]

	/*		OSPEEDR	REGs	*/
	GPIOA->OSPEEDR |=	(	GPIO_OSPEEDR_OSPEED3_0	|											// (26)
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <_init_GPIO+0xb0>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <_init_GPIO+0xb0>)
 8000bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000bb2:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8000bb6:	6093      	str	r3, [r2, #8]
							GPIO_OSPEEDR_OSPEED5_0	|											// (27)
							GPIO_OSPEEDR_OSPEED15_0												// (28)
						);

	GPIOB->OSPEEDR |=	(	GPIO_OSPEEDR_OSPEED3_0	|											// (29)
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <_init_GPIO+0xb8>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <_init_GPIO+0xb8>)
 8000bbe:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8000bc2:	f043 0345 	orr.w	r3, r3, #69	; 0x45
 8000bc6:	6093      	str	r3, [r2, #8]
							GPIO_OSPEEDR_OSPEED0_0	|											// (31)
							GPIO_OSPEEDR_OSPEED1_0	|											// (32)
							GPIO_OSPEEDR_OSPEED7_0												// (33)
						);
	/*		AFRL REGs		*/
	GPIOA->AFR[0] |= 	(	GPIO_AFRL_AFSEL3_0   |												// (34)
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <_init_GPIO+0xb0>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <_init_GPIO+0xb0>)
 8000bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd6:	6213      	str	r3, [r2, #32]
							GPIO_AFRL_AFSEL5_0	 												// (35)
						);

	GPIOA->AFR[1] |= 	(	(GPIO_AFRH_AFSEL9_0  | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2) |	// (36)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <_init_GPIO+0xb0>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <_init_GPIO+0xb0>)
 8000bde:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000be2:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000be6:	6253      	str	r3, [r2, #36]	; 0x24
							(GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2) |	// (37)
							(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2)							// (38)
						);

	GPIOB->AFR[0] |= 	(	(GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_2) |							// (39)
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_init_GPIO+0xb8>)
 8000bea:	6a1a      	ldr	r2, [r3, #32]
 8000bec:	490f      	ldr	r1, [pc, #60]	; (8000c2c <_init_GPIO+0xb8>)
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <_init_GPIO+0xcc>)
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	620b      	str	r3, [r1, #32]
							GPIO_AFRL_AFSEL0_1 	|												// (41)
							GPIO_AFRL_AFSEL1_1 	|												// (42)
							GPIO_AFRL_AFSEL7_3													// (43)
						);

	GPIOC->AFR[0] |= 	(	GPIO_AFRL_AFSEL6_2	|												// (44)
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <_init_GPIO+0xc0>)
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <_init_GPIO+0xc0>)
 8000bfa:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000bfe:	6213      	str	r3, [r2, #32]
							GPIO_AFRL_AFSEL7_2													// (45)
						);

	/*	RESET VALUE	*/
	GPIOA->ODR = 0;																				// (46)
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_init_GPIO+0xb0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = 0;																				// (47)
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <_init_GPIO+0xb8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = 0;																				// (48)
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <_init_GPIO+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
	GPIOD->ODR = 0;																				// (49)
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <_init_GPIO+0xc8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40020000 	.word	0x40020000
 8000c28:	80281bbf 	.word	0x80281bbf
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	5400888a 	.word	0x5400888a
 8000c34:	40020800 	.word	0x40020800
 8000c38:	0005a201 	.word	0x0005a201
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	80505022 	.word	0x80505022

08000c44 <_init_DMA>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_DMA( void )
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	// (1)
	DMA1_Stream5->CR |= (	DMA_SxCR_CHSEL_1 |						// (2)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <_init_DMA+0x50>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <_init_DMA+0x50>)
 8000c4e:	f043 2304 	orr.w	r3, r3, #67109888	; 0x4000400
 8000c52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c56:	6013      	str	r3, [r2, #0]
							DMA_SxCR_MINC	 |						// (3)
							DMA_SxCR_DIR_0	 |						// (4)
							DMA_SxCR_PFCTRL							// (5)
						);

	DMA1_Stream5->PAR = &FMPI2C1->TXDR;								// (6)
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <_init_DMA+0x50>)
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <_init_DMA+0x54>)
 8000c5c:	609a      	str	r2, [r3, #8]

	DMA2_Stream7->CR |= (	DMA_SxCR_CHSEL_2 |						// (7)
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <_init_DMA+0x58>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <_init_DMA+0x58>)
 8000c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c68:	f443 638c 	orr.w	r3, r3, #1120	; 0x460
 8000c6c:	6013      	str	r3, [r2, #0]
							DMA_SxCR_MINC	 |						// (8)
							DMA_SxCR_DIR_0	 |						// (9)
							DMA_SxCR_PFCTRL	 						// (10)
						);

	DMA2_Stream7->PAR = &USART1->DR;								// (11)
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <_init_DMA+0x58>)
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <_init_DMA+0x5c>)
 8000c72:	609a      	str	r2, [r3, #8]


	DMA2_Stream3->CR |= (	DMA_SxCR_CHSEL_0 | DMA_SxCR_CHSEL_1 |	// (12)
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <_init_DMA+0x60>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <_init_DMA+0x60>)
 8000c7a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000c7e:	f443 638c 	orr.w	r3, r3, #1120	; 0x460
 8000c82:	6013      	str	r3, [r2, #0]
							DMA_SxCR_MINC	 |						// (13)
							DMA_SxCR_DIR_0	 |						// (14)
							DMA_SxCR_PFCTRL	 						// (15)
						);

	DMA2_Stream3->PAR = &SPI1->DR;									// (16)
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_init_DMA+0x60>)
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <_init_DMA+0x64>)
 8000c88:	609a      	str	r2, [r3, #8]
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40026088 	.word	0x40026088
 8000c98:	40006028 	.word	0x40006028
 8000c9c:	400264b8 	.word	0x400264b8
 8000ca0:	40011004 	.word	0x40011004
 8000ca4:	40026458 	.word	0x40026458
 8000ca8:	4001300c 	.word	0x4001300c

08000cac <DMAEnable>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void DMAEnable( uint8_t channelNumber, uint8_t *data, uint32_t numOfTransfer)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	73fb      	strb	r3, [r7, #15]
	switch (channelNumber)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d013      	beq.n	8000ce8 <DMAEnable+0x3c>
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	dc2d      	bgt.n	8000d20 <DMAEnable+0x74>
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d01d      	beq.n	8000d04 <DMAEnable+0x58>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d129      	bne.n	8000d20 <DMAEnable+0x74>
	{
	case DMA1_FMPI2C1_TX_EN:
		DMA1_Stream5->M0AR = *data;					// (1)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <DMAEnable+0x84>)
 8000cd2:	60da      	str	r2, [r3, #12]
		DMA1_Stream5->NDTR = numOfTransfer;			// (2)
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <DMAEnable+0x84>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6053      	str	r3, [r2, #4]
		DMA1_Stream5->CR |= (	DMA_SxCR_EN 	|	// (3)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <DMAEnable+0x84>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <DMAEnable+0x84>)
 8000ce0:	f043 0311 	orr.w	r3, r3, #17
 8000ce4:	6013      	str	r3, [r2, #0]
								DMA_SxCR_TCIE		// (4)
							);
		break;
 8000ce6:	e01c      	b.n	8000d22 <DMAEnable+0x76>
	case DMA2_UART1_TX_EN:
		DMA2_Stream7->M0AR = *data;					// (5)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <DMAEnable+0x88>)
 8000cee:	60da      	str	r2, [r3, #12]
		DMA2_Stream7->NDTR = numOfTransfer;			// (6)
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <DMAEnable+0x88>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6053      	str	r3, [r2, #4]
		DMA2_Stream7->CR |= (	DMA_SxCR_EN		|	// (7)
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <DMAEnable+0x88>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <DMAEnable+0x88>)
 8000cfc:	f043 0311 	orr.w	r3, r3, #17
 8000d00:	6013      	str	r3, [r2, #0]
								DMA_SxCR_TCIE		// (8)
							);
		break;
 8000d02:	e00e      	b.n	8000d22 <DMAEnable+0x76>
	case DMA2_SPI1_TX_EN:
		DMA2_Stream3->M0AR = *data;					// (9)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <DMAEnable+0x8c>)
 8000d0a:	60da      	str	r2, [r3, #12]
		DMA2_Stream3->NDTR = numOfTransfer;			// (10)
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <DMAEnable+0x8c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6053      	str	r3, [r2, #4]
		DMA2_Stream3->CR |= (	DMA_SxCR_EN		|	// (11)
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <DMAEnable+0x8c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <DMAEnable+0x8c>)
 8000d18:	f043 0311 	orr.w	r3, r3, #17
 8000d1c:	6013      	str	r3, [r2, #0]
								DMA_SxCR_TCIE		// (12)
							);
		break;
 8000d1e:	e000      	b.n	8000d22 <DMAEnable+0x76>
	default:
		break;
 8000d20:	bf00      	nop

	}

}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40026088 	.word	0x40026088
 8000d34:	400264b8 	.word	0x400264b8
 8000d38:	40026458 	.word	0x40026458

08000d3c <DMADisable>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void DMADisable( uint8_t channelNumber )
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	switch (channelNumber)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d00c      	beq.n	8000d66 <DMADisable+0x2a>
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	dc18      	bgt.n	8000d82 <DMADisable+0x46>
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d00f      	beq.n	8000d74 <DMADisable+0x38>
 8000d54:	2b05      	cmp	r3, #5
 8000d56:	d114      	bne.n	8000d82 <DMADisable+0x46>
	{
	case DMA1_FMPI2C1_TX_DIS:
		DMA1_Stream5->CR &= ~DMA_SxCR_EN;		// (1)
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <DMADisable+0x54>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <DMADisable+0x54>)
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]
		break;
 8000d64:	e00e      	b.n	8000d84 <DMADisable+0x48>
	case DMA2_UART1_TX_DIS:
		DMA2_Stream7->CR &= ~DMA_SxCR_EN;		// (2)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <DMADisable+0x58>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <DMADisable+0x58>)
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	6013      	str	r3, [r2, #0]
		break;
 8000d72:	e007      	b.n	8000d84 <DMADisable+0x48>
	case DMA2_SPI1_TX_DIS:
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;		// (3)
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <DMADisable+0x5c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <DMADisable+0x5c>)
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
		break;
 8000d80:	e000      	b.n	8000d84 <DMADisable+0x48>
	default:
		break;
 8000d82:	bf00      	nop

	}
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40026088 	.word	0x40026088
 8000d94:	400264b8 	.word	0x400264b8
 8000d98:	40026458 	.word	0x40026458

08000d9c <_init_ADC1>:

/*			Analog-to-digital converter	1						*/
static void _init_ADC1( void )
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_init_ADC2>:

/*			Analog-to-digital converter	2						*/
static void _init_ADC2( void )
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_init_ADC3>:

/*			Analog-to-digital converter	3						*/
static void _init_ADC3( void )
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_init_DAC>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_DAC( void )
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	//There is not much of configuration, but the DAC will trigger by software.
	DAC1->CR |= DAC_CR_EN1;					// (1)
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <_init_DAC+0x2c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <_init_DAC+0x2c>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]
	DAC1->DHR12R1 = 0;						// (2)
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <_init_DAC+0x2c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;	// (3)
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <_init_DAC+0x2c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <_init_DAC+0x2c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40007400 	.word	0x40007400

08000df8 <_init_TIM1>:

/*			Advanced-control timers (TIM1)						*/
static void _init_TIM1( void )
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_init_TIM2>:

/*			General-purpose timers (TIMER2)						*/
static void _init_TIM2( void )
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_init_TIM3>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_TIM3( void )
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	TIM3->CCMR2 |= 	( TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_1 |		// (1)
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_init_TIM3+0x4c>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <_init_TIM3+0x4c>)
 8000e1e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000e22:	61d3      	str	r3, [r2, #28]
						TIM_CCMR2_OC3PE							// (2)
					);

	TIM3->CCER |= TIM_CCER_CC3E;								// (3)
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <_init_TIM3+0x4c>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <_init_TIM3+0x4c>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6213      	str	r3, [r2, #32]
	TIM3->ARR = 56;												// (4)
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <_init_TIM3+0x4c>)
 8000e32:	2238      	movs	r2, #56	; 0x38
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = 0;												// (5)
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <_init_TIM3+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CR1 |= TIM_CR1_URS;									// (6)
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_init_TIM3+0x4c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <_init_TIM3+0x4c>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= TIM_DIER_UIE;									// (7)
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <_init_TIM3+0x4c>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <_init_TIM3+0x4c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40000400 	.word	0x40000400

08000e64 <_init_RTC>:

/*			Real-time clock										*/
static void _init_RTC( void )
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <_init_FMPI2C1>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_FMPI2C1( void )
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	//Setting the clock to 400KHz
	FMPI2C1->TIMINGR |= (	(10 << 28) 	|				// (1)
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	4910      	ldr	r1, [pc, #64]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_init_FMPI2C1+0x50>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	610b      	str	r3, [r1, #16]
							(1 << 16) 	| 				// (3)
							(1 << 8) 	|				// (4)
							(4 << 0)					// (5)
						);

	FMPI2C1->CR2 |= FMPI2C_CR2_RELOAD;					// (6)
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e8e:	6053      	str	r3, [r2, #4]
	FMPI2C1->CR2 |= (1 << FMPI2C_CR2_NBYTES_Pos);		// (7)
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	6053      	str	r3, [r2, #4]

	//Enable interrupts
	FMPI2C1->CR1 |= (	FMPI2C_CR1_TCIE 	| 			// (8)
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000ea2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000ea6:	6013      	str	r3, [r2, #0]
						FMPI2C_CR1_ERRIE 	| 			// (9)
						FMPI2C_CR1_NACKIE				// (10)
					);

	FMPI2C1->CR1 |= FMPI2C_CR1_PE;						// (11)
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <_init_FMPI2C1+0x4c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40006000 	.word	0x40006000
 8000ec4:	a0110104 	.word	0xa0110104

08000ec8 <_init_UART1>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_UART1( void )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	USART1->BRR |= (0X16 << 4);			// (1)
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <_init_UART1+0x40>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <_init_UART1+0x40>)
 8000ed2:	f443 73b0 	orr.w	r3, r3, #352	; 0x160
 8000ed6:	6093      	str	r3, [r2, #8]
	USART1->CR2 |= USART_CR2_STOP_1;	// (2)
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <_init_UART1+0x40>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <_init_UART1+0x40>)
 8000ede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ee2:	6113      	str	r3, [r2, #16]
	USART1->CR3 |= USART_CR3_DMAT;		// (3)
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_init_UART1+0x40>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <_init_UART1+0x40>)
 8000eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eee:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= USART_CR1_TE;		// (4)
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <_init_UART1+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <_init_UART1+0x40>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40011000 	.word	0x40011000

08000f0c <_init_I2S>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_I2S( void )
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	//audio freq. sample =
	//Master mode
	//Data format = 16-bit right justified
	//Packet frame = ?
	//Clock polarity = ?
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_init_SPDIF>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_SPDIF( void )
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
	/*
	 * 	Connect the SPDIFRX_IN input to an external interrupt event block in order to detect
		transitions of SPDIFRX_IN line. When activity is detected, then SPDIFRXEN can be
		set to 01 or 11.
	 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_init_WS2812>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void _init_WS2812( void *pvParameters )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	; 0x40
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;												// A counter for counting the ws2812 pixel indexes.
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	struct ws2812_color ws2812_pixel[WS2812_MAX_PIXEL_ONBOARD];		// Creating 7 pixels of ws2812.
	__IO uint32_t ws2812Pixel[WS2812_MAX_PIXEL_ONBOARD];

	// (1)
	for(cnt = 0; cnt < WS2812_MAX_PIXEL_ONBOARD; ++cnt){
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000f3c:	e049      	b.n	8000fd2 <_init_WS2812+0xaa>
		ws2812_pixel[cnt].red = WS2812_RESET_VALUE_RED;
 8000f3e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	3340      	adds	r3, #64	; 0x40
 8000f4a:	443b      	add	r3, r7
 8000f4c:	3b18      	subs	r3, #24
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
		ws2812_pixel[cnt].green = WS2812_RESET_VALUE_GREEN;
 8000f52:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3340      	adds	r3, #64	; 0x40
 8000f5e:	443b      	add	r3, r7
 8000f60:	3b17      	subs	r3, #23
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
		ws2812_pixel[cnt].blue = WS2812_RESET_VALUE_BLUE;
 8000f66:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	3340      	adds	r3, #64	; 0x40
 8000f72:	443b      	add	r3, r7
 8000f74:	3b16      	subs	r3, #22
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]

		ws2812Pixel[cnt] = RGB_TO_GRB(	ws2812_pixel[cnt].red,
 8000f7a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	3340      	adds	r3, #64	; 0x40
 8000f86:	443b      	add	r3, r7
 8000f88:	3b17      	subs	r3, #23
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	0419      	lsls	r1, r3, #16
 8000f8e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	3340      	adds	r3, #64	; 0x40
 8000f9a:	443b      	add	r3, r7
 8000f9c:	3b18      	subs	r3, #24
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4319      	orrs	r1, r3
 8000fa4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	3340      	adds	r3, #64	; 0x40
 8000fb0:	443b      	add	r3, r7
 8000fb2:	3b16      	subs	r3, #22
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	ea41 0203 	orr.w	r2, r1, r3
 8000fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	3340      	adds	r3, #64	; 0x40
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f843 2c34 	str.w	r2, [r3, #-52]
	for(cnt = 0; cnt < WS2812_MAX_PIXEL_ONBOARD; ++cnt){
 8000fc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d9b1      	bls.n	8000f3e <_init_WS2812+0x16>
										);
	}

	while(1){																						// (2)

		ws2812_pixel[cnt].red = ((ws2812_pixel[cnt].red << 1) | WS2812_CONSTANT_VALUE_RED);			// (3)
 8000fda:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3340      	adds	r3, #64	; 0x40
 8000fe6:	443b      	add	r3, r7
 8000fe8:	3b18      	subs	r3, #24
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000ffa:	b2d9      	uxtb	r1, r3
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	3340      	adds	r3, #64	; 0x40
 8001004:	443b      	add	r3, r7
 8001006:	3b18      	subs	r3, #24
 8001008:	460a      	mov	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
		ws2812_pixel[cnt].green = ((ws2812_pixel[cnt].green << 1) | WS2812_CONSTANT_VALUE_GREEN);	// (4)
 800100c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	3340      	adds	r3, #64	; 0x40
 8001018:	443b      	add	r3, r7
 800101a:	3b17      	subs	r3, #23
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b25b      	sxtb	r3, r3
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	3340      	adds	r3, #64	; 0x40
 8001036:	443b      	add	r3, r7
 8001038:	3b17      	subs	r3, #23
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
		ws2812_pixel[cnt].blue = ((ws2812_pixel[cnt].blue << 1) | WS2812_CONSTANT_VALUE_BLUE);		// (5)
 800103e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	3340      	adds	r3, #64	; 0x40
 800104a:	443b      	add	r3, r7
 800104c:	3b16      	subs	r3, #22
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	b25b      	sxtb	r3, r3
 800105a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	3340      	adds	r3, #64	; 0x40
 8001068:	443b      	add	r3, r7
 800106a:	3b16      	subs	r3, #22
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]

		ws2812Pixel[cnt] = RGB_TO_GRB(	ws2812_pixel[cnt].red,							// (6)
 8001070:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	3340      	adds	r3, #64	; 0x40
 800107c:	443b      	add	r3, r7
 800107e:	3b17      	subs	r3, #23
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0419      	lsls	r1, r3, #16
 8001084:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	3340      	adds	r3, #64	; 0x40
 8001090:	443b      	add	r3, r7
 8001092:	3b18      	subs	r3, #24
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	4319      	orrs	r1, r3
 800109a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	3340      	adds	r3, #64	; 0x40
 80010a6:	443b      	add	r3, r7
 80010a8:	3b16      	subs	r3, #22
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	ea41 0203 	orr.w	r2, r1, r3
 80010b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	3340      	adds	r3, #64	; 0x40
 80010b8:	443b      	add	r3, r7
 80010ba:	f843 2c34 	str.w	r2, [r3, #-52]
										ws2812_pixel[cnt].green,
										ws2812_pixel[cnt].blue
										);

		cnt++;																						// (7)
 80010be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010c2:	3301      	adds	r3, #1
 80010c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if(cnt == WS2812_MAX_PIXEL_ONBOARD){														// (8)
 80010c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d102      	bne.n	80010d6 <_init_WS2812+0x1ae>
			cnt = 0;																				// (9)
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}

		WS2812UpdatePixels( ws2812Pixel, WS2812_MAX_PIXEL_ONBOARD);					// (10)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2107      	movs	r1, #7
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f805 	bl	80010ec <WS2812UpdatePixels>

		vTaskDelay( xDelay100ms );																	// (11)
 80010e2:	2319      	movs	r3, #25
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 ff21 	bl	8001f2c <vTaskDelay>
		ws2812_pixel[cnt].red = ((ws2812_pixel[cnt].red << 1) | WS2812_CONSTANT_VALUE_RED);			// (3)
 80010ea:	e776      	b.n	8000fda <_init_WS2812+0xb2>

080010ec <WS2812UpdatePixels>:
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
int8_t WS2812UpdatePixels( __IO uint32_t *colors, uint32_t numOfPixels)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	uint32_t ledIndexCnt = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
	uint8_t colorBitCnt = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	74fb      	strb	r3, [r7, #19]
	__IO uint32_t tempColor = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]

	TIM3BinarySemaphore = xSemaphoreCreateBinary();								// (1)
 8001102:	2203      	movs	r2, #3
 8001104:	2100      	movs	r1, #0
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f972 	bl	80013f0 <xQueueGenericCreate>
 800110c:	4603      	mov	r3, r0
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <WS2812UpdatePixels+0xc0>)
 8001110:	6013      	str	r3, [r2, #0]

	if(TIM3BinarySemaphore == NULL){											// (2)
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <WS2812UpdatePixels+0xc0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <WS2812UpdatePixels+0x32>
		return pdFALSE;															// (3)
 800111a:	2300      	movs	r3, #0
 800111c:	e042      	b.n	80011a4 <WS2812UpdatePixels+0xb8>
	}

	TIM3Enable();																// (4)
 800111e:	f7ff fbf9 	bl	8000914 <TIM3Enable>

	for(ledIndexCnt = 0; ledIndexCnt < numOfPixels; ++ledIndexCnt)				// (5)
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e024      	b.n	8001172 <WS2812UpdatePixels+0x86>
	{
		tempColor = *(colors + ledIndexCnt);									// (6)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]

		for(colorBitCnt = 0; colorBitCnt < WS2812_COLOR_BITS; ++colorBitCnt)	// (7)
 8001134:	2300      	movs	r3, #0
 8001136:	74fb      	strb	r3, [r7, #19]
 8001138:	e015      	b.n	8001166 <WS2812UpdatePixels+0x7a>
		{
			if((tempColor & (1 << 23)) == (1 << 23))							// (8)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001144:	d103      	bne.n	800114e <WS2812UpdatePixels+0x62>
			{
				TIM3UpdateCCR3( WS2812_T1H );									// (9)
 8001146:	2024      	movs	r0, #36	; 0x24
 8001148:	f7ff fc06 	bl	8000958 <TIM3UpdateCCR3>
 800114c:	e002      	b.n	8001154 <WS2812UpdatePixels+0x68>
			}
			else
			{
				TIM3UpdateCCR3( WS2812_T0H );									// (10)
 800114e:	2012      	movs	r0, #18
 8001150:	f7ff fc02 	bl	8000958 <TIM3UpdateCCR3>
			}

			xSemaphoreTake( TIM3BinarySemaphore, 0);							// (11)
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <WS2812UpdatePixels+0xc0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fb3e 	bl	80017dc <xQueueSemaphoreTake>
		for(colorBitCnt = 0; colorBitCnt < WS2812_COLOR_BITS; ++colorBitCnt)	// (7)
 8001160:	7cfb      	ldrb	r3, [r7, #19]
 8001162:	3301      	adds	r3, #1
 8001164:	74fb      	strb	r3, [r7, #19]
 8001166:	7cfb      	ldrb	r3, [r7, #19]
 8001168:	2b17      	cmp	r3, #23
 800116a:	d9e6      	bls.n	800113a <WS2812UpdatePixels+0x4e>
	for(ledIndexCnt = 0; ledIndexCnt < numOfPixels; ++ledIndexCnt)				// (5)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3d6      	bcc.n	8001128 <WS2812UpdatePixels+0x3c>
		}
	}

	for(colorBitCnt = 0; colorBitCnt < WS2812_RES; ++colorBitCnt)				// (12)
 800117a:	2300      	movs	r3, #0
 800117c:	74fb      	strb	r3, [r7, #19]
 800117e:	e00b      	b.n	8001198 <WS2812UpdatePixels+0xac>
	{
		TIM3UpdateCCR3( WS2812_TRES );											// (13)
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fbe9 	bl	8000958 <TIM3UpdateCCR3>

		xSemaphoreTake( TIM3BinarySemaphore, 0);								// (14)
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <WS2812UpdatePixels+0xc0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fb25 	bl	80017dc <xQueueSemaphoreTake>
	for(colorBitCnt = 0; colorBitCnt < WS2812_RES; ++colorBitCnt)				// (12)
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	3301      	adds	r3, #1
 8001196:	74fb      	strb	r3, [r7, #19]
 8001198:	7cfb      	ldrb	r3, [r7, #19]
 800119a:	2b27      	cmp	r3, #39	; 0x27
 800119c:	d9f0      	bls.n	8001180 <WS2812UpdatePixels+0x94>
	}

	TIM3Disable();																// (15)
 800119e:	f7ff fbcb 	bl	8000938 <TIM3Disable>

	return pdTRUE; 																// (16)
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000084 	.word	0x20000084

080011b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f103 0208 	add.w	r2, r3, #8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f103 0208 	add.w	r2, r3, #8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f103 0208 	add.w	r2, r3, #8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d103      	bne.n	800122a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e00c      	b.n	8001244 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3308      	adds	r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e002      	b.n	8001238 <vListInsert+0x2e>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	429a      	cmp	r2, r3
 8001242:	d2f6      	bcs.n	8001232 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6892      	ldr	r2, [r2, #8]
 8001292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6852      	ldr	r2, [r2, #4]
 800129c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d103      	bne.n	80012b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10a      	bne.n	80012fe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80012fa:	bf00      	nop
 80012fc:	e7fe      	b.n	80012fc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d05d      	beq.n	80013c0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001308:	2b00      	cmp	r3, #0
 800130a:	d059      	beq.n	80013c0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001314:	2100      	movs	r1, #0
 8001316:	fba3 2302 	umull	r2, r3, r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d000      	beq.n	8001320 <xQueueGenericReset+0x50>
 800131e:	2101      	movs	r1, #1
 8001320:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d14c      	bne.n	80013c0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001326:	f002 f95d 	bl	80035e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001332:	6939      	ldr	r1, [r7, #16]
 8001334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	441a      	add	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	3b01      	subs	r3, #1
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	441a      	add	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	22ff      	movs	r2, #255	; 0xff
 8001372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d114      	bne.n	80013a6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01a      	beq.n	80013ba <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	3310      	adds	r3, #16
 8001388:	4618      	mov	r0, r3
 800138a:	f001 f969 	bl	8002660 <xTaskRemoveFromEventList>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <xQueueGenericReset+0x11c>)
 8001396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	f3bf 8f6f 	isb	sy
 80013a4:	e009      	b.n	80013ba <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	3310      	adds	r3, #16
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff00 	bl	80011b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	3324      	adds	r3, #36	; 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fefb 	bl	80011b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80013ba:	f002 f943 	bl	8003644 <vPortExitCritical>
 80013be:	e001      	b.n	80013c4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10a      	bne.n	80013e0 <xQueueGenericReset+0x110>
	__asm volatile
 80013ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ce:	f383 8811 	msr	BASEPRI, r3
 80013d2:	f3bf 8f6f 	isb	sy
 80013d6:	f3bf 8f4f 	dsb	sy
 80013da:	60bb      	str	r3, [r7, #8]
}
 80013dc:	bf00      	nop
 80013de:	e7fe      	b.n	80013de <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80013e0:	697b      	ldr	r3, [r7, #20]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000ed04 	.word	0xe000ed04

080013f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d02e      	beq.n	8001466 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001408:	2100      	movs	r1, #0
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	fba3 2302 	umull	r2, r3, r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d000      	beq.n	8001418 <xQueueGenericCreate+0x28>
 8001416:	2101      	movs	r1, #1
 8001418:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800141a:	2b00      	cmp	r3, #0
 800141c:	d123      	bne.n	8001466 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001426:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800142a:	d81c      	bhi.n	8001466 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	3350      	adds	r3, #80	; 0x50
 800143a:	4618      	mov	r0, r3
 800143c:	f002 f9d2 	bl	80037e4 <pvPortMalloc>
 8001440:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01c      	beq.n	8001482 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3350      	adds	r3, #80	; 0x50
 8001450:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f814 	bl	800148c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001464:	e00d      	b.n	8001482 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10a      	bne.n	8001482 <xQueueGenericCreate+0x92>
	__asm volatile
 800146c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001470:	f383 8811 	msr	BASEPRI, r3
 8001474:	f3bf 8f6f 	isb	sy
 8001478:	f3bf 8f4f 	dsb	sy
 800147c:	613b      	str	r3, [r7, #16]
}
 800147e:	bf00      	nop
 8001480:	e7fe      	b.n	8001480 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001482:	69fb      	ldr	r3, [r7, #28]
    }
 8001484:	4618      	mov	r0, r3
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e002      	b.n	80014ae <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80014ba:	2101      	movs	r1, #1
 80014bc:	69b8      	ldr	r0, [r7, #24]
 80014be:	f7ff ff07 	bl	80012d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b090      	sub	sp, #64	; 0x40
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80014e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10a      	bne.n	80014fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80014e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ea:	f383 8811 	msr	BASEPRI, r3
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f3bf 8f4f 	dsb	sy
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80014f8:	bf00      	nop
 80014fa:	e7fe      	b.n	80014fa <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80014fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <xQueueGiveFromISR+0x48>
	__asm volatile
 8001504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	623b      	str	r3, [r7, #32]
}
 8001516:	bf00      	nop
 8001518:	e7fe      	b.n	8001518 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d103      	bne.n	800152a <xQueueGiveFromISR+0x58>
 8001522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <xQueueGiveFromISR+0x5c>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <xQueueGiveFromISR+0x5e>
 800152e:	2300      	movs	r3, #0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10a      	bne.n	800154a <xQueueGiveFromISR+0x78>
	__asm volatile
 8001534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001538:	f383 8811 	msr	BASEPRI, r3
 800153c:	f3bf 8f6f 	isb	sy
 8001540:	f3bf 8f4f 	dsb	sy
 8001544:	61fb      	str	r3, [r7, #28]
}
 8001546:	bf00      	nop
 8001548:	e7fe      	b.n	8001548 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800154a:	f002 f90b 	bl	8003764 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800154e:	f3ef 8211 	mrs	r2, BASEPRI
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	61ba      	str	r2, [r7, #24]
 8001564:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001566:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001576:	429a      	cmp	r2, r3
 8001578:	d242      	bcs.n	8001600 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158a:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800158c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d112      	bne.n	80015bc <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	2b00      	cmp	r3, #0
 800159c:	d02d      	beq.n	80015fa <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a0:	3324      	adds	r3, #36	; 0x24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 f85c 	bl	8002660 <xTaskRemoveFromEventList>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d025      	beq.n	80015fa <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e01e      	b.n	80015fa <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80015bc:	f000 fe5e 	bl	800227c <uxTaskGetNumberOfTasks>
 80015c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80015c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d916      	bls.n	80015fa <xQueueGiveFromISR+0x128>
 80015cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015d0:	2b7f      	cmp	r3, #127	; 0x7f
 80015d2:	d10a      	bne.n	80015ea <xQueueGiveFromISR+0x118>
	__asm volatile
 80015d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d8:	f383 8811 	msr	BASEPRI, r3
 80015dc:	f3bf 8f6f 	isb	sy
 80015e0:	f3bf 8f4f 	dsb	sy
 80015e4:	613b      	str	r3, [r7, #16]
}
 80015e6:	bf00      	nop
 80015e8:	e7fe      	b.n	80015e8 <xQueueGiveFromISR+0x116>
 80015ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b25a      	sxtb	r2, r3
 80015f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80015fa:	2301      	movs	r3, #1
 80015fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fe:	e001      	b.n	8001604 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800160e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001612:	4618      	mov	r0, r3
 8001614:	3740      	adds	r7, #64	; 0x40
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10a      	bne.n	800164c <xQueueReceive+0x30>
	__asm volatile
 8001636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163a:	f383 8811 	msr	BASEPRI, r3
 800163e:	f3bf 8f6f 	isb	sy
 8001642:	f3bf 8f4f 	dsb	sy
 8001646:	623b      	str	r3, [r7, #32]
}
 8001648:	bf00      	nop
 800164a:	e7fe      	b.n	800164a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <xQueueReceive+0x3e>
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <xQueueReceive+0x42>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <xQueueReceive+0x44>
 800165e:	2300      	movs	r3, #0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10a      	bne.n	800167a <xQueueReceive+0x5e>
	__asm volatile
 8001664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001668:	f383 8811 	msr	BASEPRI, r3
 800166c:	f3bf 8f6f 	isb	sy
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	61fb      	str	r3, [r7, #28]
}
 8001676:	bf00      	nop
 8001678:	e7fe      	b.n	8001678 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800167a:	f001 fa0b 	bl	8002a94 <xTaskGetSchedulerState>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <xQueueReceive+0x6e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <xQueueReceive+0x72>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <xQueueReceive+0x74>
 800168e:	2300      	movs	r3, #0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10a      	bne.n	80016aa <xQueueReceive+0x8e>
	__asm volatile
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	f383 8811 	msr	BASEPRI, r3
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	61bb      	str	r3, [r7, #24]
}
 80016a6:	bf00      	nop
 80016a8:	e7fe      	b.n	80016a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80016aa:	f001 ff9b 	bl	80035e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01f      	beq.n	80016fa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016be:	f000 f9a3 	bl	8001a08 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00f      	beq.n	80016f2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	3310      	adds	r3, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ffc2 	bl	8002660 <xTaskRemoveFromEventList>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <xQueueReceive+0x1bc>)
 80016e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f3bf 8f4f 	dsb	sy
 80016ee:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80016f2:	f001 ffa7 	bl	8003644 <vPortExitCritical>
                return pdPASS;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e069      	b.n	80017ce <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001700:	f001 ffa0 	bl	8003644 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001704:	2300      	movs	r3, #0
 8001706:	e062      	b.n	80017ce <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f87c 	bl	8002810 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800171c:	f001 ff92 	bl	8003644 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001720:	f000 fc92 	bl	8002048 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001724:	f001 ff5e 	bl	80035e4 <vPortEnterCritical>
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d103      	bne.n	800173e <xQueueReceive+0x122>
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001744:	b25b      	sxtb	r3, r3
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	d103      	bne.n	8001754 <xQueueReceive+0x138>
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001754:	f001 ff76 	bl	8003644 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001758:	1d3a      	adds	r2, r7, #4
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f001 f86b 	bl	800283c <xTaskCheckForTimeOut>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d123      	bne.n	80017b4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800176c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800176e:	f000 f9c3 	bl	8001af8 <prvIsQueueEmpty>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d017      	beq.n	80017a8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177a:	3324      	adds	r3, #36	; 0x24
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f000 ff03 	bl	800258c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001788:	f000 f964 	bl	8001a54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800178c:	f000 fc6a 	bl	8002064 <xTaskResumeAll>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d189      	bne.n	80016aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <xQueueReceive+0x1bc>)
 8001798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	e780      	b.n	80016aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80017a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017aa:	f000 f953 	bl	8001a54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017ae:	f000 fc59 	bl	8002064 <xTaskResumeAll>
 80017b2:	e77a      	b.n	80016aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80017b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017b6:	f000 f94d 	bl	8001a54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017ba:	f000 fc53 	bl	8002064 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017c0:	f000 f99a 	bl	8001af8 <prvIsQueueEmpty>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f43f af6f 	beq.w	80016aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80017cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	61bb      	str	r3, [r7, #24]
}
 800180a:	bf00      	nop
 800180c:	e7fe      	b.n	800180c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8001816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181a:	f383 8811 	msr	BASEPRI, r3
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f3bf 8f4f 	dsb	sy
 8001826:	617b      	str	r3, [r7, #20]
}
 8001828:	bf00      	nop
 800182a:	e7fe      	b.n	800182a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800182c:	f001 f932 	bl	8002a94 <xTaskGetSchedulerState>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <xQueueSemaphoreTake+0x60>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <xQueueSemaphoreTake+0x64>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <xQueueSemaphoreTake+0x66>
 8001840:	2300      	movs	r3, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	613b      	str	r3, [r7, #16]
}
 8001858:	bf00      	nop
 800185a:	e7fe      	b.n	800185a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800185c:	f001 fec2 	bl	80035e4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001864:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d024      	beq.n	80018b6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	1e5a      	subs	r2, r3, #1
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800187c:	f001 fa62 	bl	8002d44 <pvTaskIncrementMutexHeldCount>
 8001880:	4602      	mov	r2, r0
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	3310      	adds	r3, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fee4 	bl	8002660 <xTaskRemoveFromEventList>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800189e:	4b4d      	ldr	r3, [pc, #308]	; (80019d4 <xQueueSemaphoreTake+0x1f8>)
 80018a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80018ae:	f001 fec9 	bl	8003644 <vPortExitCritical>
                return pdPASS;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e089      	b.n	80019ca <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80018bc:	f001 fec2 	bl	8003644 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e082      	b.n	80019ca <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 ff9e 	bl	8002810 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80018d8:	f001 feb4 	bl	8003644 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80018dc:	f000 fbb4 	bl	8002048 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018e0:	f001 fe80 	bl	80035e4 <vPortEnterCritical>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d103      	bne.n	80018fa <xQueueSemaphoreTake+0x11e>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001900:	b25b      	sxtb	r3, r3
 8001902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001906:	d103      	bne.n	8001910 <xQueueSemaphoreTake+0x134>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001910:	f001 fe98 	bl	8003644 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001914:	463a      	mov	r2, r7
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f000 ff8d 	bl	800283c <xTaskCheckForTimeOut>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d132      	bne.n	800198e <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800192a:	f000 f8e5 	bl	8001af8 <prvIsQueueEmpty>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d026      	beq.n	8001982 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 800193c:	f001 fe52 	bl	80035e4 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f001 f8c3 	bl	8002ad0 <xTaskPriorityInherit>
 800194a:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 800194c:	f001 fe7a 	bl	8003644 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3324      	adds	r3, #36	; 0x24
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fe17 	bl	800258c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800195e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001960:	f000 f878 	bl	8001a54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001964:	f000 fb7e 	bl	8002064 <xTaskResumeAll>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f af76 	bne.w	800185c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <xQueueSemaphoreTake+0x1f8>)
 8001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	e76c      	b.n	800185c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001984:	f000 f866 	bl	8001a54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001988:	f000 fb6c 	bl	8002064 <xTaskResumeAll>
 800198c:	e766      	b.n	800185c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800198e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001990:	f000 f860 	bl	8001a54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001994:	f000 fb66 	bl	8002064 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800199a:	f000 f8ad 	bl	8001af8 <prvIsQueueEmpty>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f43f af5b 	beq.w	800185c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00d      	beq.n	80019c8 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80019ac:	f001 fe1a 	bl	80035e4 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80019b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019b2:	f000 f811 	bl	80019d8 <prvGetDisinheritPriorityAfterTimeout>
 80019b6:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	69f9      	ldr	r1, [r7, #28]
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 f916 	bl	8002bf0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80019c4:	f001 fe3e 	bl	8003644 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80019c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f1c3 0305 	rsb	r3, r3, #5
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e001      	b.n	80019fa <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80019fa:	68fb      	ldr	r3, [r7, #12]
    }
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d018      	beq.n	8001a4c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	441a      	add	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d303      	bcc.n	8001a3c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	461a      	mov	r2, r3
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f002 f91c 	bl	8003c84 <memcpy>
    }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a5c:	f001 fdc2 	bl	80035e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a68:	e011      	b.n	8001a8e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3324      	adds	r3, #36	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fdf2 	bl	8002660 <xTaskRemoveFromEventList>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001a82:	f000 ff41 	bl	8002908 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dce9      	bgt.n	8001a6a <prvUnlockQueue+0x16>
 8001a96:	e000      	b.n	8001a9a <prvUnlockQueue+0x46>
                    break;
 8001a98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	22ff      	movs	r2, #255	; 0xff
 8001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001aa2:	f001 fdcf 	bl	8003644 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001aa6:	f001 fd9d 	bl	80035e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ab0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ab2:	e011      	b.n	8001ad8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3310      	adds	r3, #16
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fdcd 	bl	8002660 <xTaskRemoveFromEventList>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001acc:	f000 ff1c 	bl	8002908 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dce9      	bgt.n	8001ab4 <prvUnlockQueue+0x60>
 8001ae0:	e000      	b.n	8001ae4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001ae2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	22ff      	movs	r2, #255	; 0xff
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001aec:	f001 fdaa 	bl	8003644 <vPortExitCritical>
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b00:	f001 fd70 	bl	80035e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e001      	b.n	8001b16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b16:	f001 fd95 	bl	8003644 <vPortExitCritical>

    return xReturn;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <vQueueAddToRegistry+0x2a>
	__asm volatile
 8001b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	60fb      	str	r3, [r7, #12]
}
 8001b4a:	bf00      	nop
 8001b4c:	e7fe      	b.n	8001b4c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d024      	beq.n	8001b9e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e01e      	b.n	8001b98 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <vQueueAddToRegistry+0x98>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d105      	bne.n	8001b76 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <vQueueAddToRegistry+0x98>)
 8001b70:	4413      	add	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
                    break;
 8001b74:	e013      	b.n	8001b9e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <vQueueAddToRegistry+0x6e>
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <vQueueAddToRegistry+0x98>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d104      	bne.n	8001b92 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <vQueueAddToRegistry+0x98>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b07      	cmp	r3, #7
 8001b9c:	d9dd      	bls.n	8001b5a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	20000088 	.word	0x20000088

08001bc0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001bd0:	f001 fd08 	bl	80035e4 <vPortEnterCritical>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d103      	bne.n	8001bea <vQueueWaitForMessageRestricted+0x2a>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d103      	bne.n	8001c00 <vQueueWaitForMessageRestricted+0x40>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c00:	f001 fd20 	bl	8003644 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3324      	adds	r3, #36	; 0x24
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fcdd 	bl	80025d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff1a 	bl	8001a54 <prvUnlockQueue>
    }
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fdd1 	bl	80037e4 <pvPortMalloc>
 8001c42:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d013      	beq.n	8001c72 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c4a:	20a8      	movs	r0, #168	; 0xa8
 8001c4c:	f001 fdca 	bl	80037e4 <pvPortMalloc>
 8001c50:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c58:	22a8      	movs	r2, #168	; 0xa8
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	69f8      	ldr	r0, [r7, #28]
 8001c5e:	f001 ff8d 	bl	8003b7c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
 8001c68:	e005      	b.n	8001c76 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f001 fe74 	bl	8003958 <vPortFree>
 8001c70:	e001      	b.n	8001c76 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f80e 	bl	8001cb4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001c98:	69f8      	ldr	r0, [r7, #28]
 8001c9a:	f000 f8af 	bl	8001dfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	e002      	b.n	8001caa <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001caa:	69bb      	ldr	r3, [r7, #24]
    }
 8001cac:	4618      	mov	r0, r3
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	21a5      	movs	r1, #165	; 0xa5
 8001cce:	f001 ff55 	bl	8003b7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f023 0307 	bic.w	r3, r3, #7
 8001cea:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8001cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfa:	f383 8811 	msr	BASEPRI, r3
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	617b      	str	r3, [r7, #20]
}
 8001d08:	bf00      	nop
 8001d0a:	e7fe      	b.n	8001d0a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01e      	beq.n	8001d50 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e012      	b.n	8001d3e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	7819      	ldrb	r1, [r3, #0]
 8001d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	3334      	adds	r3, #52	; 0x34
 8001d28:	460a      	mov	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d9e9      	bls.n	8001d18 <prvInitialiseNewTask+0x64>
 8001d44:	e000      	b.n	8001d48 <prvInitialiseNewTask+0x94>
            {
                break;
 8001d46:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d90a      	bls.n	8001d6c <prvInitialiseNewTask+0xb8>
	__asm volatile
 8001d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5a:	f383 8811 	msr	BASEPRI, r3
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	613b      	str	r3, [r7, #16]
}
 8001d68:	bf00      	nop
 8001d6a:	e7fe      	b.n	8001d6a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d901      	bls.n	8001d76 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d72:	2304      	movs	r3, #4
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d80:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	3304      	adds	r3, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa32 	bl	80011f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	3318      	adds	r3, #24
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fa2d 	bl	80011f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	f1c3 0205 	rsb	r2, r3, #5
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	3354      	adds	r3, #84	; 0x54
 8001db0:	224c      	movs	r2, #76	; 0x4c
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 fee1 	bl	8003b7c <memset>
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <prvInitialiseNewTask+0x13c>)
 8001dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <prvInitialiseNewTask+0x140>)
 8001dc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <prvInitialiseNewTask+0x144>)
 8001dca:	661a      	str	r2, [r3, #96]	; 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	69b8      	ldr	r0, [r7, #24]
 8001dd2:	f001 fad9 	bl	8003388 <pxPortInitialiseStack>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <prvInitialiseNewTask+0x134>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20003e2c 	.word	0x20003e2c
 8001df4:	20003e94 	.word	0x20003e94
 8001df8:	20003efc 	.word	0x20003efc

08001dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001e04:	f001 fbee 	bl	80035e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <prvAddNewTaskToReadyList+0x114>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a40      	ldr	r2, [pc, #256]	; (8001f10 <prvAddNewTaskToReadyList+0x114>)
 8001e10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e1a:	4a3e      	ldr	r2, [pc, #248]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <prvAddNewTaskToReadyList+0x114>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d110      	bne.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e28:	f000 fd92 	bl	8002950 <prvInitialiseTaskLists>
 8001e2c:	e00d      	b.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <prvAddNewTaskToReadyList+0x11c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d802      	bhi.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <prvAddNewTaskToReadyList+0x120>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <prvAddNewTaskToReadyList+0x120>)
 8001e52:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <prvAddNewTaskToReadyList+0x120>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <prvAddNewTaskToReadyList+0x124>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d903      	bls.n	8001e70 <prvAddNewTaskToReadyList+0x74>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <prvAddNewTaskToReadyList+0x124>)
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	492b      	ldr	r1, [pc, #172]	; (8001f24 <prvAddNewTaskToReadyList+0x128>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	3204      	adds	r2, #4
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	1d1a      	adds	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <prvAddNewTaskToReadyList+0x128>)
 8001eb4:	441a      	add	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebe:	4919      	ldr	r1, [pc, #100]	; (8001f24 <prvAddNewTaskToReadyList+0x128>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	1c59      	adds	r1, r3, #1
 8001ece:	4815      	ldr	r0, [pc, #84]	; (8001f24 <prvAddNewTaskToReadyList+0x128>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4403      	add	r3, r0
 8001eda:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001edc:	f001 fbb2 	bl	8003644 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <prvAddNewTaskToReadyList+0x11c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d207      	bcs.n	8001f06 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <prvAddNewTaskToReadyList+0x12c>)
 8001ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f3bf 8f4f 	dsb	sy
 8001f02:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001a0 	.word	0x200001a0
 8001f14:	200000c8 	.word	0x200000c8
 8001f18:	200001ac 	.word	0x200001ac
 8001f1c:	200001bc 	.word	0x200001bc
 8001f20:	200001a8 	.word	0x200001a8
 8001f24:	200000cc 	.word	0x200000cc
 8001f28:	e000ed04 	.word	0xe000ed04

08001f2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d017      	beq.n	8001f6e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <vTaskDelay+0x60>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <vTaskDelay+0x30>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	60bb      	str	r3, [r7, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	e7fe      	b.n	8001f5a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001f5c:	f000 f874 	bl	8002048 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 ff02 	bl	8002d6c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f68:	f000 f87c 	bl	8002064 <xTaskResumeAll>
 8001f6c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <vTaskDelay+0x64>)
 8001f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200001c8 	.word	0x200001c8
 8001f90:	e000ed04 	.word	0xe000ed04

08001f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <vTaskStartScheduler+0x90>)
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	4920      	ldr	r1, [pc, #128]	; (8002028 <vTaskStartScheduler+0x94>)
 8001fa8:	4820      	ldr	r0, [pc, #128]	; (800202c <vTaskStartScheduler+0x98>)
 8001faa:	f7ff fe3d 	bl	8001c28 <xTaskCreate>
 8001fae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001fb6:	f000 ff47 	bl	8002e48 <xTimerCreateTimerTask>
 8001fba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11b      	bne.n	8001ffa <vTaskStartScheduler+0x66>
	__asm volatile
 8001fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	60bb      	str	r3, [r7, #8]
}
 8001fd4:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <vTaskStartScheduler+0x9c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3354      	adds	r3, #84	; 0x54
 8001fdc:	4a15      	ldr	r2, [pc, #84]	; (8002034 <vTaskStartScheduler+0xa0>)
 8001fde:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <vTaskStartScheduler+0xa4>)
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <vTaskStartScheduler+0xa8>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <vTaskStartScheduler+0xac>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001ff4:	f001 fa54 	bl	80034a0 <xPortStartScheduler>
 8001ff8:	e00e      	b.n	8002018 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d10a      	bne.n	8002018 <vTaskStartScheduler+0x84>
	__asm volatile
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	607b      	str	r3, [r7, #4]
}
 8002014:	bf00      	nop
 8002016:	e7fe      	b.n	8002016 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <vTaskStartScheduler+0xb0>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200001c4 	.word	0x200001c4
 8002028:	08003d74 	.word	0x08003d74
 800202c:	08002921 	.word	0x08002921
 8002030:	200000c8 	.word	0x200000c8
 8002034:	2000005c 	.word	0x2000005c
 8002038:	200001c0 	.word	0x200001c0
 800203c:	200001ac 	.word	0x200001ac
 8002040:	200001a4 	.word	0x200001a4
 8002044:	20000008 	.word	0x20000008

08002048 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <vTaskSuspendAll+0x18>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a03      	ldr	r2, [pc, #12]	; (8002060 <vTaskSuspendAll+0x18>)
 8002054:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	200001c8 	.word	0x200001c8

08002064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002072:	4b71      	ldr	r3, [pc, #452]	; (8002238 <xTaskResumeAll+0x1d4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <xTaskResumeAll+0x2c>
	__asm volatile
 800207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207e:	f383 8811 	msr	BASEPRI, r3
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	607b      	str	r3, [r7, #4]
}
 800208c:	bf00      	nop
 800208e:	e7fe      	b.n	800208e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002090:	f001 faa8 	bl	80035e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002094:	4b68      	ldr	r3, [pc, #416]	; (8002238 <xTaskResumeAll+0x1d4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	4a67      	ldr	r2, [pc, #412]	; (8002238 <xTaskResumeAll+0x1d4>)
 800209c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800209e:	4b66      	ldr	r3, [pc, #408]	; (8002238 <xTaskResumeAll+0x1d4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80c1 	bne.w	800222a <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <xTaskResumeAll+0x1d8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80bc 	beq.w	800222a <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020b2:	e08b      	b.n	80021cc <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <xTaskResumeAll+0x1dc>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	6a12      	ldr	r2, [r2, #32]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	69d2      	ldr	r2, [r2, #28]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3318      	adds	r3, #24
 80020de:	429a      	cmp	r2, r3
 80020e0:	d103      	bne.n	80020ea <xTaskResumeAll+0x86>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2200      	movs	r2, #0
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	68d2      	ldr	r2, [r2, #12]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	6892      	ldr	r2, [r2, #8]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3304      	adds	r3, #4
 800211c:	429a      	cmp	r2, r3
 800211e:	d103      	bne.n	8002128 <xTaskResumeAll+0xc4>
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <xTaskResumeAll+0x1e0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d903      	bls.n	800214c <xTaskResumeAll+0xe8>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <xTaskResumeAll+0x1e0>)
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002150:	493d      	ldr	r1, [pc, #244]	; (8002248 <xTaskResumeAll+0x1e4>)
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	3204      	adds	r2, #4
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	1d1a      	adds	r2, r3, #4
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <xTaskResumeAll+0x1e4>)
 8002190:	441a      	add	r2, r3
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	615a      	str	r2, [r3, #20]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219a:	492b      	ldr	r1, [pc, #172]	; (8002248 <xTaskResumeAll+0x1e4>)
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	4827      	ldr	r0, [pc, #156]	; (8002248 <xTaskResumeAll+0x1e4>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <xTaskResumeAll+0x1e8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <xTaskResumeAll+0x1ec>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <xTaskResumeAll+0x1dc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f47f af6f 	bne.w	80020b4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80021dc:	f000 fc3e 	bl	8002a5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <xTaskResumeAll+0x1f0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d010      	beq.n	800220e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80021ec:	f000 f852 	bl	8002294 <xTaskIncrementTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <xTaskResumeAll+0x1ec>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3b01      	subs	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f1      	bne.n	80021ec <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <xTaskResumeAll+0x1f0>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <xTaskResumeAll+0x1ec>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <xTaskResumeAll+0x1f4>)
 800221c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800222a:	f001 fa0b 	bl	8003644 <vPortExitCritical>

    return xAlreadyYielded;
 800222e:	69bb      	ldr	r3, [r7, #24]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	200001c8 	.word	0x200001c8
 800223c:	200001a0 	.word	0x200001a0
 8002240:	20000160 	.word	0x20000160
 8002244:	200001a8 	.word	0x200001a8
 8002248:	200000cc 	.word	0x200000cc
 800224c:	200000c8 	.word	0x200000c8
 8002250:	200001b4 	.word	0x200001b4
 8002254:	200001b0 	.word	0x200001b0
 8002258:	e000ed04 	.word	0xe000ed04

0800225c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <xTaskGetTickCount+0x1c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	200001a4 	.word	0x200001a4

0800227c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <uxTaskGetNumberOfTasks+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200001a0 	.word	0x200001a0

08002294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <xTaskIncrementTick+0x204>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 80ed 	bne.w	8002482 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022a8:	4b7c      	ldr	r3, [pc, #496]	; (800249c <xTaskIncrementTick+0x208>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80022b0:	4a7a      	ldr	r2, [pc, #488]	; (800249c <xTaskIncrementTick+0x208>)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d120      	bne.n	80022fe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80022bc:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <xTaskIncrementTick+0x20c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <xTaskIncrementTick+0x48>
	__asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	607b      	str	r3, [r7, #4]
}
 80022d8:	bf00      	nop
 80022da:	e7fe      	b.n	80022da <xTaskIncrementTick+0x46>
 80022dc:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <xTaskIncrementTick+0x20c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <xTaskIncrementTick+0x210>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <xTaskIncrementTick+0x20c>)
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4a6e      	ldr	r2, [pc, #440]	; (80024a4 <xTaskIncrementTick+0x210>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <xTaskIncrementTick+0x214>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a6c      	ldr	r2, [pc, #432]	; (80024a8 <xTaskIncrementTick+0x214>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	f000 fbaf 	bl	8002a5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80022fe:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <xTaskIncrementTick+0x218>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a3a      	ldr	r2, [r7, #32]
 8002304:	429a      	cmp	r2, r3
 8002306:	f0c0 80a7 	bcc.w	8002458 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <xTaskIncrementTick+0x20c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002314:	4b65      	ldr	r3, [pc, #404]	; (80024ac <xTaskIncrementTick+0x218>)
 8002316:	f04f 32ff 	mov.w	r2, #4294967295
 800231a:	601a      	str	r2, [r3, #0]
                    break;
 800231c:	e09c      	b.n	8002458 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800231e:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <xTaskIncrementTick+0x20c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800232e:	6a3a      	ldr	r2, [r7, #32]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	429a      	cmp	r2, r3
 8002334:	d203      	bcs.n	800233e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002336:	4a5d      	ldr	r2, [pc, #372]	; (80024ac <xTaskIncrementTick+0x218>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800233c:	e08c      	b.n	8002458 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	68d2      	ldr	r2, [r2, #12]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	6892      	ldr	r2, [r2, #8]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3304      	adds	r3, #4
 8002360:	429a      	cmp	r2, r3
 8002362:	d103      	bne.n	800236c <xTaskIncrementTick+0xd8>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01e      	beq.n	80023c2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	6a12      	ldr	r2, [r2, #32]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	69d2      	ldr	r2, [r2, #28]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	3318      	adds	r3, #24
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d103      	bne.n	80023b2 <xTaskIncrementTick+0x11e>
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2200      	movs	r2, #0
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <xTaskIncrementTick+0x21c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d903      	bls.n	80023d6 <xTaskIncrementTick+0x142>
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	4a37      	ldr	r2, [pc, #220]	; (80024b0 <xTaskIncrementTick+0x21c>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	4936      	ldr	r1, [pc, #216]	; (80024b4 <xTaskIncrementTick+0x220>)
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	3204      	adds	r2, #4
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <xTaskIncrementTick+0x220>)
 800241a:	441a      	add	r2, r3
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	4923      	ldr	r1, [pc, #140]	; (80024b4 <xTaskIncrementTick+0x220>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	481f      	ldr	r0, [pc, #124]	; (80024b4 <xTaskIncrementTick+0x220>)
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4403      	add	r3, r0
 8002440:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <xTaskIncrementTick+0x224>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	429a      	cmp	r2, r3
 800244e:	f67f af5c 	bls.w	800230a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002452:	2301      	movs	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002456:	e758      	b.n	800230a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <xTaskIncrementTick+0x224>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	4915      	ldr	r1, [pc, #84]	; (80024b4 <xTaskIncrementTick+0x220>)
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d901      	bls.n	8002474 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002470:	2301      	movs	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <xTaskIncrementTick+0x228>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	e004      	b.n	800248c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <xTaskIncrementTick+0x22c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <xTaskIncrementTick+0x22c>)
 800248a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800248e:	4618      	mov	r0, r3
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200001c8 	.word	0x200001c8
 800249c:	200001a4 	.word	0x200001a4
 80024a0:	20000158 	.word	0x20000158
 80024a4:	2000015c 	.word	0x2000015c
 80024a8:	200001b8 	.word	0x200001b8
 80024ac:	200001c0 	.word	0x200001c0
 80024b0:	200001a8 	.word	0x200001a8
 80024b4:	200000cc 	.word	0x200000cc
 80024b8:	200000c8 	.word	0x200000c8
 80024bc:	200001b4 	.word	0x200001b4
 80024c0:	200001b0 	.word	0x200001b0

080024c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <vTaskSwitchContext+0xb0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <vTaskSwitchContext+0xb4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80024d8:	e046      	b.n	8002568 <vTaskSwitchContext+0xa4>
        xYieldPending = pdFALSE;
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <vTaskSwitchContext+0xb4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <vTaskSwitchContext+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e010      	b.n	800250a <vTaskSwitchContext+0x46>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <vTaskSwitchContext+0x40>
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	607b      	str	r3, [r7, #4]
}
 8002500:	bf00      	nop
 8002502:	e7fe      	b.n	8002502 <vTaskSwitchContext+0x3e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3b01      	subs	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	491d      	ldr	r1, [pc, #116]	; (8002580 <vTaskSwitchContext+0xbc>)
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0e4      	beq.n	80024e8 <vTaskSwitchContext+0x24>
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <vTaskSwitchContext+0xbc>)
 800252a:	4413      	add	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3308      	adds	r3, #8
 8002540:	429a      	cmp	r2, r3
 8002542:	d104      	bne.n	800254e <vTaskSwitchContext+0x8a>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <vTaskSwitchContext+0xc0>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4a08      	ldr	r2, [pc, #32]	; (800257c <vTaskSwitchContext+0xb8>)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <vTaskSwitchContext+0xc0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3354      	adds	r3, #84	; 0x54
 8002564:	4a08      	ldr	r2, [pc, #32]	; (8002588 <vTaskSwitchContext+0xc4>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	200001c8 	.word	0x200001c8
 8002578:	200001b4 	.word	0x200001b4
 800257c:	200001a8 	.word	0x200001a8
 8002580:	200000cc 	.word	0x200000cc
 8002584:	200000c8 	.word	0x200000c8
 8002588:	2000005c 	.word	0x2000005c

0800258c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60fb      	str	r3, [r7, #12]
}
 80025ae:	bf00      	nop
 80025b0:	e7fe      	b.n	80025b0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <vTaskPlaceOnEventList+0x44>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3318      	adds	r3, #24
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fe25 	bl	800120a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025c0:	2101      	movs	r1, #1
 80025c2:	6838      	ldr	r0, [r7, #0]
 80025c4:	f000 fbd2 	bl	8002d6c <prvAddCurrentTaskToDelayedList>
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200000c8 	.word	0x200000c8

080025d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	613b      	str	r3, [r7, #16]
}
 80025f8:	bf00      	nop
 80025fa:	e7fe      	b.n	80025fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <vTaskPlaceOnEventListRestricted+0x88>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	61da      	str	r2, [r3, #28]
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <vTaskPlaceOnEventListRestricted+0x88>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	621a      	str	r2, [r3, #32]
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <vTaskPlaceOnEventListRestricted+0x88>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	3218      	adds	r2, #24
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <vTaskPlaceOnEventListRestricted+0x88>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f103 0218 	add.w	r2, r3, #24
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <vTaskPlaceOnEventListRestricted+0x88>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68b8      	ldr	r0, [r7, #8]
 800264e:	f000 fb8d 	bl	8002d6c <prvAddCurrentTaskToDelayedList>
    }
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200000c8 	.word	0x200000c8

08002660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002660:	b480      	push	{r7}
 8002662:	b08b      	sub	sp, #44	; 0x2c
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10a      	bne.n	800268c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	60fb      	str	r3, [r7, #12]
}
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	6a12      	ldr	r2, [r2, #32]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	69d2      	ldr	r2, [r2, #28]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	3318      	adds	r3, #24
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d103      	bne.n	80026ba <xTaskRemoveFromEventList+0x5a>
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <xTaskRemoveFromEventList+0x198>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d15f      	bne.n	8002792 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	68d2      	ldr	r2, [r2, #12]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	6a3a      	ldr	r2, [r7, #32]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	3304      	adds	r3, #4
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d103      	bne.n	8002700 <xTaskRemoveFromEventList+0xa0>
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <xTaskRemoveFromEventList+0x19c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d903      	bls.n	8002724 <xTaskRemoveFromEventList+0xc4>
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a36      	ldr	r2, [pc, #216]	; (80027fc <xTaskRemoveFromEventList+0x19c>)
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	4935      	ldr	r1, [pc, #212]	; (8002800 <xTaskRemoveFromEventList+0x1a0>)
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3304      	adds	r3, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	3204      	adds	r2, #4
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	1d1a      	adds	r2, r3, #4
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4a26      	ldr	r2, [pc, #152]	; (8002800 <xTaskRemoveFromEventList+0x1a0>)
 8002768:	441a      	add	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	615a      	str	r2, [r3, #20]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	4923      	ldr	r1, [pc, #140]	; (8002800 <xTaskRemoveFromEventList+0x1a0>)
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1c59      	adds	r1, r3, #1
 8002782:	481f      	ldr	r0, [pc, #124]	; (8002800 <xTaskRemoveFromEventList+0x1a0>)
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4403      	add	r3, r0
 800278e:	6019      	str	r1, [r3, #0]
 8002790:	e01b      	b.n	80027ca <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <xTaskRemoveFromEventList+0x1a4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	61da      	str	r2, [r3, #28]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	621a      	str	r2, [r3, #32]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	3218      	adds	r2, #24
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f103 0218 	add.w	r2, r3, #24
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <xTaskRemoveFromEventList+0x1a4>)
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <xTaskRemoveFromEventList+0x1a4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <xTaskRemoveFromEventList+0x1a4>)
 80027c8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <xTaskRemoveFromEventList+0x1a8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d905      	bls.n	80027e4 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80027d8:	2301      	movs	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <xTaskRemoveFromEventList+0x1ac>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e001      	b.n	80027e8 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	372c      	adds	r7, #44	; 0x2c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200001c8 	.word	0x200001c8
 80027fc:	200001a8 	.word	0x200001a8
 8002800:	200000cc 	.word	0x200000cc
 8002804:	20000160 	.word	0x20000160
 8002808:	200000c8 	.word	0x200000c8
 800280c:	200001b4 	.word	0x200001b4

08002810 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <vTaskInternalSetTimeOutState+0x24>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <vTaskInternalSetTimeOutState+0x28>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	605a      	str	r2, [r3, #4]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	200001b8 	.word	0x200001b8
 8002838:	200001a4 	.word	0x200001a4

0800283c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	613b      	str	r3, [r7, #16]
}
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	60fb      	str	r3, [r7, #12]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800287e:	f000 feb1 	bl	80035e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <xTaskCheckForTimeOut+0xc4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289a:	d102      	bne.n	80028a2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	e026      	b.n	80028f0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <xTaskCheckForTimeOut+0xc8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d00a      	beq.n	80028c4 <xTaskCheckForTimeOut+0x88>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d305      	bcc.n	80028c4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e015      	b.n	80028f0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d20b      	bcs.n	80028e6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad2      	subs	r2, r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff98 	bl	8002810 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e004      	b.n	80028f0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80028f0:	f000 fea8 	bl	8003644 <vPortExitCritical>

    return xReturn;
 80028f4:	69fb      	ldr	r3, [r7, #28]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200001a4 	.word	0x200001a4
 8002904:	200001b8 	.word	0x200001b8

08002908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <vTaskMissedYield+0x14>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	200001b4 	.word	0x200001b4

08002920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002928:	f000 f852 	bl	80029d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <prvIdleTask+0x28>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d9f9      	bls.n	8002928 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <prvIdleTask+0x2c>)
 8002936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002944:	e7f0      	b.n	8002928 <prvIdleTask+0x8>
 8002946:	bf00      	nop
 8002948:	200000cc 	.word	0x200000cc
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	e00c      	b.n	8002976 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <prvInitialiseTaskLists+0x60>)
 8002968:	4413      	add	r3, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fc20 	bl	80011b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d9ef      	bls.n	800295c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <prvInitialiseTaskLists+0x64>)
 800297e:	f7fe fc17 	bl	80011b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002982:	480d      	ldr	r0, [pc, #52]	; (80029b8 <prvInitialiseTaskLists+0x68>)
 8002984:	f7fe fc14 	bl	80011b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <prvInitialiseTaskLists+0x6c>)
 800298a:	f7fe fc11 	bl	80011b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800298e:	480c      	ldr	r0, [pc, #48]	; (80029c0 <prvInitialiseTaskLists+0x70>)
 8002990:	f7fe fc0e 	bl	80011b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002994:	480b      	ldr	r0, [pc, #44]	; (80029c4 <prvInitialiseTaskLists+0x74>)
 8002996:	f7fe fc0b 	bl	80011b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <prvInitialiseTaskLists+0x78>)
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <prvInitialiseTaskLists+0x64>)
 800299e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <prvInitialiseTaskLists+0x7c>)
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <prvInitialiseTaskLists+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200000cc 	.word	0x200000cc
 80029b4:	20000130 	.word	0x20000130
 80029b8:	20000144 	.word	0x20000144
 80029bc:	20000160 	.word	0x20000160
 80029c0:	20000174 	.word	0x20000174
 80029c4:	2000018c 	.word	0x2000018c
 80029c8:	20000158 	.word	0x20000158
 80029cc:	2000015c 	.word	0x2000015c

080029d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029d6:	e019      	b.n	8002a0c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80029d8:	f000 fe04 	bl	80035e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <prvCheckTasksWaitingTermination+0x50>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fc47 	bl	800127c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <prvCheckTasksWaitingTermination+0x54>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <prvCheckTasksWaitingTermination+0x54>)
 80029f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <prvCheckTasksWaitingTermination+0x58>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <prvCheckTasksWaitingTermination+0x58>)
 8002a00:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002a02:	f000 fe1f 	bl	8003644 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f810 	bl	8002a2c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <prvCheckTasksWaitingTermination+0x58>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e1      	bne.n	80029d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000174 	.word	0x20000174
 8002a24:	200001a0 	.word	0x200001a0
 8002a28:	20000188 	.word	0x20000188

08002a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <prvDeleteTCB+0x2c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3354      	adds	r3, #84	; 0x54
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f8a6 	bl	8003b8c <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 ff87 	bl	8003958 <vPortFree>
            vPortFree( pxTCB );
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 ff84 	bl	8003958 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200000c8 	.word	0x200000c8

08002a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvResetNextTaskUnblockTime+0x30>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <prvResetNextTaskUnblockTime+0x34>)
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a72:	e005      	b.n	8002a80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <prvResetNextTaskUnblockTime+0x30>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <prvResetNextTaskUnblockTime+0x34>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000158 	.word	0x20000158
 8002a90:	200001c0 	.word	0x200001c0

08002a94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <xTaskGetSchedulerState+0x34>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	e008      	b.n	8002aba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <xTaskGetSchedulerState+0x38>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	e001      	b.n	8002aba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002aba:	687b      	ldr	r3, [r7, #4]
    }
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	200001ac 	.word	0x200001ac
 8002acc:	200001c8 	.word	0x200001c8

08002ad0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d079      	beq.n	8002bda <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <xTaskPriorityInherit+0x114>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d269      	bcs.n	8002bc8 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db06      	blt.n	8002b0a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002afc:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <xTaskPriorityInherit+0x114>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f1c3 0205 	rsb	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	6959      	ldr	r1, [r3, #20]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4a33      	ldr	r2, [pc, #204]	; (8002be8 <xTaskPriorityInherit+0x118>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4299      	cmp	r1, r3
 8002b20:	d14a      	bne.n	8002bb8 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	3304      	adds	r3, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fba8 	bl	800127c <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <xTaskPriorityInherit+0x114>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <xTaskPriorityInherit+0x11c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d903      	bls.n	8002b4a <xTaskPriorityInherit+0x7a>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <xTaskPriorityInherit+0x11c>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4e:	4926      	ldr	r1, [pc, #152]	; (8002be8 <xTaskPriorityInherit+0x118>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	3204      	adds	r2, #4
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1d1a      	adds	r2, r3, #4
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <xTaskPriorityInherit+0x118>)
 8002b8e:	441a      	add	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	4913      	ldr	r1, [pc, #76]	; (8002be8 <xTaskPriorityInherit+0x118>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	480f      	ldr	r0, [pc, #60]	; (8002be8 <xTaskPriorityInherit+0x118>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4403      	add	r3, r0
 8002bb4:	6019      	str	r1, [r3, #0]
 8002bb6:	e004      	b.n	8002bc2 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <xTaskPriorityInherit+0x114>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e008      	b.n	8002bda <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <xTaskPriorityInherit+0x114>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d201      	bcs.n	8002bda <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002bda:	697b      	ldr	r3, [r7, #20]
    }
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200000c8 	.word	0x200000c8
 8002be8:	200000cc 	.word	0x200000cc
 8002bec:	200001a8 	.word	0x200001a8

08002bf0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8093 	beq.w	8002d30 <vTaskPriorityDisinheritAfterTimeout+0x140>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	613b      	str	r3, [r7, #16]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d902      	bls.n	8002c38 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e002      	b.n	8002c3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d073      	beq.n	8002d30 <vTaskPriorityDisinheritAfterTimeout+0x140>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d16e      	bne.n	8002d30 <vTaskPriorityDisinheritAfterTimeout+0x140>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002c52:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10a      	bne.n	8002c72 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	60fb      	str	r3, [r7, #12]
}
 8002c6e:	bf00      	nop
 8002c70:	e7fe      	b.n	8002c70 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db04      	blt.n	8002c90 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	f1c3 0205 	rsb	r2, r3, #5
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	6959      	ldr	r1, [r3, #20]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	d144      	bne.n	8002d30 <vTaskPriorityDisinheritAfterTimeout+0x140>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fae6 	bl	800127c <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d903      	bls.n	8002cc4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	491c      	ldr	r1, [pc, #112]	; (8002d3c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	3204      	adds	r2, #4
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	490a      	ldr	r1, [pc, #40]	; (8002d3c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4403      	add	r3, r0
 8002d2e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200000c8 	.word	0x200000c8
 8002d3c:	200000cc 	.word	0x200000cc
 8002d40:	200001a8 	.word	0x200001a8

08002d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d56:	3201      	adds	r2, #1
 8002d58:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8002d5a:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
    }
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	200000c8 	.word	0x200000c8

08002d6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fa7a 	bl	800127c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d124      	bne.n	8002dda <prvAddCurrentTaskToDelayedList+0x6e>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d021      	beq.n	8002dda <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	3204      	adds	r2, #4
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002dca:	615a      	str	r2, [r3, #20]
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002dd8:	e026      	b.n	8002e28 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d209      	bcs.n	8002e06 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <prvAddCurrentTaskToDelayedList+0xd0>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fe fa03 	bl	800120a <vListInsert>
}
 8002e04:	e010      	b.n	8002e28 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f7fe f9f9 	bl	800120a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d202      	bcs.n	8002e28 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200001a4 	.word	0x200001a4
 8002e34:	200000c8 	.word	0x200000c8
 8002e38:	2000018c 	.word	0x2000018c
 8002e3c:	2000015c 	.word	0x2000015c
 8002e40:	20000158 	.word	0x20000158
 8002e44:	200001c0 	.word	0x200001c0

08002e48 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002e52:	f000 fa63 	bl	800331c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <xTimerCreateTimerTask+0x54>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <xTimerCreateTimerTask+0x58>)
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	2302      	movs	r3, #2
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6c:	490d      	ldr	r1, [pc, #52]	; (8002ea4 <xTimerCreateTimerTask+0x5c>)
 8002e6e:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <xTimerCreateTimerTask+0x60>)
 8002e70:	f7fe feda 	bl	8001c28 <xTaskCreate>
 8002e74:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	603b      	str	r3, [r7, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002e92:	687b      	ldr	r3, [r7, #4]
    }
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200001fc 	.word	0x200001fc
 8002ea0:	20000200 	.word	0x20000200
 8002ea4:	08003d7c 	.word	0x08003d7c
 8002ea8:	08002f51 	.word	0x08002f51

08002eac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002eb8:	e008      	b.n	8002ecc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	18d1      	adds	r1, r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f8dd 	bl	8003098 <prvInsertTimerInActiveList>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <prvReloadTimer+0xe>
        }
    }
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <prvProcessExpiredTimer+0x5c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe f9b7 	bl	800127c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff ffc3 	bl	8002eac <prvReloadTimer>
 8002f26:	e008      	b.n	8002f3a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	4798      	blx	r3
    }
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200001f4 	.word	0x200001f4

08002f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f857 	bl	8003010 <prvGetNextExpireTime>
 8002f62:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4619      	mov	r1, r3
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f803 	bl	8002f74 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002f6e:	f000 f8d5 	bl	800311c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f72:	e7f1      	b.n	8002f58 <prvTimerTask+0x8>

08002f74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002f7e:	f7ff f863 	bl	8002048 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f82:	f107 0308 	add.w	r3, r7, #8
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f866 	bl	8003058 <prvSampleTimeNow>
 8002f8c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d130      	bne.n	8002ff6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <prvProcessTimerOrBlockTask+0x3c>
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d806      	bhi.n	8002fb0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002fa2:	f7ff f85f 	bl	8002064 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ffa1 	bl	8002ef0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002fae:	e024      	b.n	8002ffa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <prvProcessTimerOrBlockTask+0x90>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <prvProcessTimerOrBlockTask+0x50>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <prvProcessTimerOrBlockTask+0x52>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <prvProcessTimerOrBlockTask+0x94>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f7fe fdf3 	bl	8001bc0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002fda:	f7ff f843 	bl	8002064 <xTaskResumeAll>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <prvProcessTimerOrBlockTask+0x98>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
    }
 8002ff4:	e001      	b.n	8002ffa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002ff6:	f7ff f835 	bl	8002064 <xTaskResumeAll>
    }
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200001f8 	.word	0x200001f8
 8003008:	200001fc 	.word	0x200001fc
 800300c:	e000ed04 	.word	0xe000ed04

08003010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <prvGetNextExpireTime+0x44>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <prvGetNextExpireTime+0x16>
 8003022:	2201      	movs	r2, #1
 8003024:	e000      	b.n	8003028 <prvGetNextExpireTime+0x18>
 8003026:	2200      	movs	r2, #0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <prvGetNextExpireTime+0x44>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e001      	b.n	8003044 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003044:	68fb      	ldr	r3, [r7, #12]
    }
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200001f4 	.word	0x200001f4

08003058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003060:	f7ff f8fc 	bl	800225c <xTaskGetTickCount>
 8003064:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <prvSampleTimeNow+0x3c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d205      	bcs.n	800307c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003070:	f000 f92e 	bl	80032d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e002      	b.n	8003082 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <prvSampleTimeNow+0x3c>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003088:	68fb      	ldr	r3, [r7, #12]
    }
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000204 	.word	0x20000204

08003098 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d812      	bhi.n	80030e4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	1ad2      	subs	r2, r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e01b      	b.n	800310a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <prvInsertTimerInActiveList+0x7c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7fe f894 	bl	800120a <vListInsert>
 80030e2:	e012      	b.n	800310a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d206      	bcs.n	80030fa <prvInsertTimerInActiveList+0x62>
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e007      	b.n	800310a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <prvInsertTimerInActiveList+0x80>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7fe f880 	bl	800120a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800310a:	697b      	ldr	r3, [r7, #20]
    }
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	200001f8 	.word	0x200001f8
 8003118:	200001f4 	.word	0x200001f4

0800311c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003122:	e0c2      	b.n	80032aa <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	da18      	bge.n	800315c <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	3304      	adds	r3, #4
 800312e:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	61bb      	str	r3, [r7, #24]
}
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	6850      	ldr	r0, [r2, #4]
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	4611      	mov	r1, r2
 800315a:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f2c0 80a3 	blt.w	80032aa <prvProcessReceivedCommands+0x18e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	3304      	adds	r3, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe f881 	bl	800127c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800317a:	463b      	mov	r3, r7
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff6b 	bl	8003058 <prvSampleTimeNow>
 8003182:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	2b08      	cmp	r3, #8
 800318a:	f200 808d 	bhi.w	80032a8 <prvProcessReceivedCommands+0x18c>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <prvProcessReceivedCommands+0x78>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031b9 	.word	0x080031b9
 800319c:	08003221 	.word	0x08003221
 80031a0:	08003235 	.word	0x08003235
 80031a4:	0800327f 	.word	0x0800327f
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031b9 	.word	0x080031b9
 80031b0:	08003221 	.word	0x08003221
 80031b4:	08003235 	.word	0x08003235
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	18d1      	adds	r1, r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	6a38      	ldr	r0, [r7, #32]
 80031d8:	f7ff ff5e 	bl	8003098 <prvInsertTimerInActiveList>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d063      	beq.n	80032aa <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	4619      	mov	r1, r3
 80031fc:	6a38      	ldr	r0, [r7, #32]
 80031fe:	f7ff fe55 	bl	8002eac <prvReloadTimer>
 8003202:	e008      	b.n	8003216 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	6a38      	ldr	r0, [r7, #32]
 800321c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800321e:	e044      	b.n	80032aa <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003232:	e03a      	b.n	80032aa <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2da      	uxtb	r2, r3
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	617b      	str	r3, [r7, #20]
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	18d1      	adds	r1, r2, r3
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	6a38      	ldr	r0, [r7, #32]
 8003278:	f7ff ff0e 	bl	8003098 <prvInsertTimerInActiveList>
                        break;
 800327c:	e015      	b.n	80032aa <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 800328c:	6a38      	ldr	r0, [r7, #32]
 800328e:	f000 fb63 	bl	8003958 <vPortFree>
 8003292:	e00a      	b.n	80032aa <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80032a6:	e000      	b.n	80032aa <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80032a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <prvProcessReceivedCommands+0x1b0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1d39      	adds	r1, r7, #4
 80032b0:	2200      	movs	r2, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe f9b2 	bl	800161c <xQueueReceive>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f af32 	bne.w	8003124 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	; 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200001fc 	.word	0x200001fc

080032d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032d6:	e009      	b.n	80032ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <prvSwitchTimerLists+0x44>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80032e2:	f04f 31ff 	mov.w	r1, #4294967295
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	f7ff fe02 	bl	8002ef0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <prvSwitchTimerLists+0x44>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <prvSwitchTimerLists+0x44>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <prvSwitchTimerLists+0x48>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <prvSwitchTimerLists+0x44>)
 8003302:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <prvSwitchTimerLists+0x48>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
    }
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200001f4 	.word	0x200001f4
 8003318:	200001f8 	.word	0x200001f8

0800331c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003320:	f000 f960 	bl	80035e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <prvCheckForValidListAndQueue+0x54>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d11d      	bne.n	8003368 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800332c:	4811      	ldr	r0, [pc, #68]	; (8003374 <prvCheckForValidListAndQueue+0x58>)
 800332e:	f7fd ff3f 	bl	80011b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003332:	4811      	ldr	r0, [pc, #68]	; (8003378 <prvCheckForValidListAndQueue+0x5c>)
 8003334:	f7fd ff3c 	bl	80011b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <prvCheckForValidListAndQueue+0x60>)
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <prvCheckForValidListAndQueue+0x58>)
 800333c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <prvCheckForValidListAndQueue+0x64>)
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <prvCheckForValidListAndQueue+0x5c>)
 8003342:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003344:	2200      	movs	r2, #0
 8003346:	2110      	movs	r1, #16
 8003348:	200a      	movs	r0, #10
 800334a:	f7fe f851 	bl	80013f0 <xQueueGenericCreate>
 800334e:	4603      	mov	r3, r0
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <prvCheckForValidListAndQueue+0x54>)
 8003352:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <prvCheckForValidListAndQueue+0x54>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <prvCheckForValidListAndQueue+0x54>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4908      	ldr	r1, [pc, #32]	; (8003384 <prvCheckForValidListAndQueue+0x68>)
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fbde 	bl	8001b24 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003368:	f000 f96c 	bl	8003644 <vPortExitCritical>
    }
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200001fc 	.word	0x200001fc
 8003374:	200001cc 	.word	0x200001cc
 8003378:	200001e0 	.word	0x200001e0
 800337c:	200001f4 	.word	0x200001f4
 8003380:	200001f8 	.word	0x200001f8
 8003384:	08003d84 	.word	0x08003d84

08003388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b04      	subs	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3b04      	subs	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3b04      	subs	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <pxPortInitialiseStack+0x64>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3b14      	subs	r3, #20
 80033c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3b04      	subs	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f06f 0202 	mvn.w	r2, #2
 80033d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3b20      	subs	r3, #32
 80033dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	080033f1 	.word	0x080033f1

080033f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <prvTaskExitError+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d00a      	beq.n	800341a <prvTaskExitError+0x2a>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60fb      	str	r3, [r7, #12]
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <prvTaskExitError+0x28>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60bb      	str	r3, [r7, #8]
}
 800342c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800342e:	bf00      	nop
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0fc      	beq.n	8003430 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	2000000c 	.word	0x2000000c
	...

08003450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <pxCurrentTCBConst2>)
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345a:	f380 8809 	msr	PSP, r0
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f380 8811 	msr	BASEPRI, r0
 800346a:	4770      	bx	lr
 800346c:	f3af 8000 	nop.w

08003470 <pxCurrentTCBConst2>:
 8003470:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003478:	4808      	ldr	r0, [pc, #32]	; (800349c <prvPortStartFirstTask+0x24>)
 800347a:	6800      	ldr	r0, [r0, #0]
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	f380 8808 	msr	MSP, r0
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f380 8814 	msr	CONTROL, r0
 800348a:	b662      	cpsie	i
 800348c:	b661      	cpsie	f
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	df00      	svc	0
 8003498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800349a:	bf00      	nop
 800349c:	e000ed08 	.word	0xe000ed08

080034a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <xPortStartScheduler+0x120>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a46      	ldr	r2, [pc, #280]	; (80035c4 <xPortStartScheduler+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10a      	bne.n	80034c6 <xPortStartScheduler+0x26>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	613b      	str	r3, [r7, #16]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <xPortStartScheduler+0x120>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3f      	ldr	r2, [pc, #252]	; (80035c8 <xPortStartScheduler+0x128>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10a      	bne.n	80034e6 <xPortStartScheduler+0x46>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <xPortStartScheduler+0x12c>)
 80034e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <xPortStartScheduler+0x130>)
 800350c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <xPortStartScheduler+0x134>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003514:	e009      	b.n	800352a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <xPortStartScheduler+0x134>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3b01      	subs	r3, #1
 800351c:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <xPortStartScheduler+0x134>)
 800351e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d0ef      	beq.n	8003516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <xPortStartScheduler+0x134>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00a      	beq.n	8003558 <xPortStartScheduler+0xb8>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60bb      	str	r3, [r7, #8]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <xPortStartScheduler+0x134>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <xPortStartScheduler+0x134>)
 8003560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <xPortStartScheduler+0x134>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <xPortStartScheduler+0x134>)
 800356c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <xPortStartScheduler+0x138>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <xPortStartScheduler+0x138>)
 800357c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <xPortStartScheduler+0x138>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <xPortStartScheduler+0x138>)
 8003588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800358c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800358e:	f000 f8bb 	bl	8003708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <xPortStartScheduler+0x13c>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003598:	f000 f8da 	bl	8003750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <xPortStartScheduler+0x140>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <xPortStartScheduler+0x140>)
 80035a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035a8:	f7ff ff66 	bl	8003478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035ac:	f7fe ff8a 	bl	80024c4 <vTaskSwitchContext>
	prvTaskExitError();
 80035b0:	f7ff ff1e 	bl	80033f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00
 80035c4:	410fc271 	.word	0x410fc271
 80035c8:	410fc270 	.word	0x410fc270
 80035cc:	e000e400 	.word	0xe000e400
 80035d0:	20000208 	.word	0x20000208
 80035d4:	2000020c 	.word	0x2000020c
 80035d8:	e000ed20 	.word	0xe000ed20
 80035dc:	2000000c 	.word	0x2000000c
 80035e0:	e000ef34 	.word	0xe000ef34

080035e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	607b      	str	r3, [r7, #4]
}
 80035fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <vPortEnterCritical+0x58>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	4a0d      	ldr	r2, [pc, #52]	; (800363c <vPortEnterCritical+0x58>)
 8003606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <vPortEnterCritical+0x58>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10f      	bne.n	8003630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <vPortEnterCritical+0x5c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <vPortEnterCritical+0x4c>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	603b      	str	r3, [r7, #0]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <vPortEnterCritical+0x4a>
	}
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	2000000c 	.word	0x2000000c
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <vPortExitCritical+0x50>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <vPortExitCritical+0x24>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	607b      	str	r3, [r7, #4]
}
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <vPortExitCritical+0x50>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <vPortExitCritical+0x50>)
 8003670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <vPortExitCritical+0x50>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <vPortExitCritical+0x42>
 800367a:	2300      	movs	r3, #0
 800367c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f383 8811 	msr	BASEPRI, r3
}
 8003684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c
	...

080036a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036a0:	f3ef 8009 	mrs	r0, PSP
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <pxCurrentTCBConst>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	f01e 0f10 	tst.w	lr, #16
 80036b0:	bf08      	it	eq
 80036b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ba:	6010      	str	r0, [r2, #0]
 80036bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036c4:	f380 8811 	msr	BASEPRI, r0
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f7fe fef8 	bl	80024c4 <vTaskSwitchContext>
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f380 8811 	msr	BASEPRI, r0
 80036dc:	bc09      	pop	{r0, r3}
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	6808      	ldr	r0, [r1, #0]
 80036e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e6:	f01e 0f10 	tst.w	lr, #16
 80036ea:	bf08      	it	eq
 80036ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036f0:	f380 8809 	msr	PSP, r0
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w

08003700 <pxCurrentTCBConst>:
 8003700:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <vPortSetupTimerInterrupt+0x34>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <vPortSetupTimerInterrupt+0x38>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <vPortSetupTimerInterrupt+0x3c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <vPortSetupTimerInterrupt+0x40>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <vPortSetupTimerInterrupt+0x44>)
 8003726:	3b01      	subs	r3, #1
 8003728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <vPortSetupTimerInterrupt+0x34>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010
 8003740:	e000e018 	.word	0xe000e018
 8003744:	20000004 	.word	0x20000004
 8003748:	10624dd3 	.word	0x10624dd3
 800374c:	e000e014 	.word	0xe000e014

08003750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003760 <vPortEnableVFP+0x10>
 8003754:	6801      	ldr	r1, [r0, #0]
 8003756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800375a:	6001      	str	r1, [r0, #0]
 800375c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800375e:	bf00      	nop
 8003760:	e000ed88 	.word	0xe000ed88

08003764 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800376a:	f3ef 8305 	mrs	r3, IPSR
 800376e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d914      	bls.n	80037a0 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <vPortValidateInterruptPriority+0x70>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <vPortValidateInterruptPriority+0x74>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	7afa      	ldrb	r2, [r7, #11]
 8003786:	429a      	cmp	r2, r3
 8003788:	d20a      	bcs.n	80037a0 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	607b      	str	r3, [r7, #4]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <vPortValidateInterruptPriority+0x78>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <vPortValidateInterruptPriority+0x7c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d90a      	bls.n	80037c6 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	603b      	str	r3, [r7, #0]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <vPortValidateInterruptPriority+0x60>
	}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e3f0 	.word	0xe000e3f0
 80037d8:	20000208 	.word	0x20000208
 80037dc:	e000ed0c 	.word	0xe000ed0c
 80037e0:	2000020c 	.word	0x2000020c

080037e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80037f0:	f7fe fc2a 	bl	8002048 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <pvPortMalloc+0x160>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037fc:	f000 f908 	bl	8003a10 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003806:	2208      	movs	r2, #8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	3308      	adds	r3, #8
 8003812:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	43db      	mvns	r3, r3
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d804      	bhi.n	8003828 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	e001      	b.n	800382c <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db70      	blt.n	8003914 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d06d      	beq.n	8003914 <pvPortMalloc+0x130>
 8003838:	4b43      	ldr	r3, [pc, #268]	; (8003948 <pvPortMalloc+0x164>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d868      	bhi.n	8003914 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003842:	4b42      	ldr	r3, [pc, #264]	; (800394c <pvPortMalloc+0x168>)
 8003844:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <pvPortMalloc+0x168>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384c:	e004      	b.n	8003858 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d903      	bls.n	800386a <pvPortMalloc+0x86>
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f1      	bne.n	800384e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <pvPortMalloc+0x160>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	429a      	cmp	r2, r3
 8003872:	d04f      	beq.n	8003914 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	4413      	add	r3, r2
 800387c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	2308      	movs	r3, #8
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	429a      	cmp	r2, r3
 8003894:	d91f      	bls.n	80038d6 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <pvPortMalloc+0xda>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	613b      	str	r3, [r7, #16]
}
 80038ba:	bf00      	nop
 80038bc:	e7fe      	b.n	80038bc <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1ad2      	subs	r2, r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038d0:	6978      	ldr	r0, [r7, #20]
 80038d2:	f000 f8f9 	bl	8003ac8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <pvPortMalloc+0x164>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <pvPortMalloc+0x164>)
 80038e2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038e4:	4b18      	ldr	r3, [pc, #96]	; (8003948 <pvPortMalloc+0x164>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <pvPortMalloc+0x16c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d203      	bcs.n	80038f8 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <pvPortMalloc+0x164>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <pvPortMalloc+0x16c>)
 80038f6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <pvPortMalloc+0x170>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a10      	ldr	r2, [pc, #64]	; (8003954 <pvPortMalloc+0x170>)
 8003912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003914:	f7fe fba6 	bl	8002064 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <pvPortMalloc+0x154>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <pvPortMalloc+0x152>
    return pvReturn;
 8003938:	69fb      	ldr	r3, [r7, #28]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20003e18 	.word	0x20003e18
 8003948:	20003e1c 	.word	0x20003e1c
 800394c:	20003e10 	.word	0x20003e10
 8003950:	20003e20 	.word	0x20003e20
 8003954:	20003e24 	.word	0x20003e24

08003958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d049      	beq.n	80039fe <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800396a:	2308      	movs	r3, #8
 800396c:	425b      	negs	r3, r3
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4413      	add	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <vPortFree+0x3e>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	60fb      	str	r3, [r7, #12]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <vPortFree+0x5c>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60bb      	str	r3, [r7, #8]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0fdb      	lsrs	r3, r3, #31
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01c      	beq.n	80039fe <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d118      	bne.n	80039fe <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80039d8:	f7fe fb36 	bl	8002048 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <vPortFree+0xb0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <vPortFree+0xb0>)
 80039e8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039ea:	6938      	ldr	r0, [r7, #16]
 80039ec:	f000 f86c 	bl	8003ac8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <vPortFree+0xb4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <vPortFree+0xb4>)
 80039f8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039fa:	f7fe fb33 	bl	8002064 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20003e1c 	.word	0x20003e1c
 8003a0c:	20003e28 	.word	0x20003e28

08003a10 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a16:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003a1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <prvHeapInit+0xa4>)
 8003a1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3307      	adds	r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <prvHeapInit+0xa4>)
 8003a40:	4413      	add	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <prvHeapInit+0xa8>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <prvHeapInit+0xa8>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4413      	add	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <prvHeapInit+0xac>)
 8003a70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <prvHeapInit+0xac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <prvHeapInit+0xac>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <prvHeapInit+0xac>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <prvHeapInit+0xb0>)
 8003a9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <prvHeapInit+0xb4>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000210 	.word	0x20000210
 8003ab8:	20003e10 	.word	0x20003e10
 8003abc:	20003e18 	.word	0x20003e18
 8003ac0:	20003e20 	.word	0x20003e20
 8003ac4:	20003e1c 	.word	0x20003e1c

08003ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ad0:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <prvInsertBlockIntoFreeList+0xac>)
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e002      	b.n	8003adc <prvInsertBlockIntoFreeList+0x14>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d8f7      	bhi.n	8003ad6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d108      	bne.n	8003b0a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	441a      	add	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d118      	bne.n	8003b50 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <prvInsertBlockIntoFreeList+0xb0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d00d      	beq.n	8003b46 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	441a      	add	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e008      	b.n	8003b58 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <prvInsertBlockIntoFreeList+0xb0>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e003      	b.n	8003b58 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d002      	beq.n	8003b66 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20003e10 	.word	0x20003e10
 8003b78:	20003e18 	.word	0x20003e18

08003b7c <memset>:
 8003b7c:	4402      	add	r2, r0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d100      	bne.n	8003b86 <memset+0xa>
 8003b84:	4770      	bx	lr
 8003b86:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8a:	e7f9      	b.n	8003b80 <memset+0x4>

08003b8c <_reclaim_reent>:
 8003b8c:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <_reclaim_reent+0xa8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4283      	cmp	r3, r0
 8003b92:	b570      	push	{r4, r5, r6, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	d04b      	beq.n	8003c30 <_reclaim_reent+0xa4>
 8003b98:	69c3      	ldr	r3, [r0, #28]
 8003b9a:	b143      	cbz	r3, 8003bae <_reclaim_reent+0x22>
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d144      	bne.n	8003c2c <_reclaim_reent+0xa0>
 8003ba2:	69e3      	ldr	r3, [r4, #28]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	b111      	cbz	r1, 8003bae <_reclaim_reent+0x22>
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 f879 	bl	8003ca0 <_free_r>
 8003bae:	6961      	ldr	r1, [r4, #20]
 8003bb0:	b111      	cbz	r1, 8003bb8 <_reclaim_reent+0x2c>
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 f874 	bl	8003ca0 <_free_r>
 8003bb8:	69e1      	ldr	r1, [r4, #28]
 8003bba:	b111      	cbz	r1, 8003bc2 <_reclaim_reent+0x36>
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f000 f86f 	bl	8003ca0 <_free_r>
 8003bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003bc4:	b111      	cbz	r1, 8003bcc <_reclaim_reent+0x40>
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 f86a 	bl	8003ca0 <_free_r>
 8003bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bce:	b111      	cbz	r1, 8003bd6 <_reclaim_reent+0x4a>
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 f865 	bl	8003ca0 <_free_r>
 8003bd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003bd8:	b111      	cbz	r1, 8003be0 <_reclaim_reent+0x54>
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f000 f860 	bl	8003ca0 <_free_r>
 8003be0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003be2:	b111      	cbz	r1, 8003bea <_reclaim_reent+0x5e>
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 f85b 	bl	8003ca0 <_free_r>
 8003bea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003bec:	b111      	cbz	r1, 8003bf4 <_reclaim_reent+0x68>
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 f856 	bl	8003ca0 <_free_r>
 8003bf4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003bf6:	b111      	cbz	r1, 8003bfe <_reclaim_reent+0x72>
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f000 f851 	bl	8003ca0 <_free_r>
 8003bfe:	6a23      	ldr	r3, [r4, #32]
 8003c00:	b1b3      	cbz	r3, 8003c30 <_reclaim_reent+0xa4>
 8003c02:	4620      	mov	r0, r4
 8003c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c08:	4718      	bx	r3
 8003c0a:	5949      	ldr	r1, [r1, r5]
 8003c0c:	b941      	cbnz	r1, 8003c20 <_reclaim_reent+0x94>
 8003c0e:	3504      	adds	r5, #4
 8003c10:	69e3      	ldr	r3, [r4, #28]
 8003c12:	2d80      	cmp	r5, #128	; 0x80
 8003c14:	68d9      	ldr	r1, [r3, #12]
 8003c16:	d1f8      	bne.n	8003c0a <_reclaim_reent+0x7e>
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f000 f841 	bl	8003ca0 <_free_r>
 8003c1e:	e7c0      	b.n	8003ba2 <_reclaim_reent+0x16>
 8003c20:	680e      	ldr	r6, [r1, #0]
 8003c22:	4620      	mov	r0, r4
 8003c24:	f000 f83c 	bl	8003ca0 <_free_r>
 8003c28:	4631      	mov	r1, r6
 8003c2a:	e7ef      	b.n	8003c0c <_reclaim_reent+0x80>
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	e7ef      	b.n	8003c10 <_reclaim_reent+0x84>
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	bf00      	nop
 8003c34:	2000005c 	.word	0x2000005c

08003c38 <__libc_init_array>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	4d0d      	ldr	r5, [pc, #52]	; (8003c70 <__libc_init_array+0x38>)
 8003c3c:	4c0d      	ldr	r4, [pc, #52]	; (8003c74 <__libc_init_array+0x3c>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	2600      	movs	r6, #0
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d109      	bne.n	8003c5c <__libc_init_array+0x24>
 8003c48:	4d0b      	ldr	r5, [pc, #44]	; (8003c78 <__libc_init_array+0x40>)
 8003c4a:	4c0c      	ldr	r4, [pc, #48]	; (8003c7c <__libc_init_array+0x44>)
 8003c4c:	f000 f880 	bl	8003d50 <_init>
 8003c50:	1b64      	subs	r4, r4, r5
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	2600      	movs	r6, #0
 8003c56:	42a6      	cmp	r6, r4
 8003c58:	d105      	bne.n	8003c66 <__libc_init_array+0x2e>
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c60:	4798      	blx	r3
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7ee      	b.n	8003c44 <__libc_init_array+0xc>
 8003c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6a:	4798      	blx	r3
 8003c6c:	3601      	adds	r6, #1
 8003c6e:	e7f2      	b.n	8003c56 <__libc_init_array+0x1e>
 8003c70:	08003d8c 	.word	0x08003d8c
 8003c74:	08003d8c 	.word	0x08003d8c
 8003c78:	08003d8c 	.word	0x08003d8c
 8003c7c:	08003d90 	.word	0x08003d90

08003c80 <__retarget_lock_acquire_recursive>:
 8003c80:	4770      	bx	lr

08003c82 <__retarget_lock_release_recursive>:
 8003c82:	4770      	bx	lr

08003c84 <memcpy>:
 8003c84:	440a      	add	r2, r1
 8003c86:	4291      	cmp	r1, r2
 8003c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c8c:	d100      	bne.n	8003c90 <memcpy+0xc>
 8003c8e:	4770      	bx	lr
 8003c90:	b510      	push	{r4, lr}
 8003c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	d1f9      	bne.n	8003c92 <memcpy+0xe>
 8003c9e:	bd10      	pop	{r4, pc}

08003ca0 <_free_r>:
 8003ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d044      	beq.n	8003d30 <_free_r+0x90>
 8003ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003caa:	9001      	str	r0, [sp, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f1a1 0404 	sub.w	r4, r1, #4
 8003cb2:	bfb8      	it	lt
 8003cb4:	18e4      	addlt	r4, r4, r3
 8003cb6:	f000 f83f 	bl	8003d38 <__malloc_lock>
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <_free_r+0x94>)
 8003cbc:	9801      	ldr	r0, [sp, #4]
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	b933      	cbnz	r3, 8003cd0 <_free_r+0x30>
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	6014      	str	r4, [r2, #0]
 8003cc6:	b003      	add	sp, #12
 8003cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ccc:	f000 b83a 	b.w	8003d44 <__malloc_unlock>
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	d908      	bls.n	8003ce6 <_free_r+0x46>
 8003cd4:	6825      	ldr	r5, [r4, #0]
 8003cd6:	1961      	adds	r1, r4, r5
 8003cd8:	428b      	cmp	r3, r1
 8003cda:	bf01      	itttt	eq
 8003cdc:	6819      	ldreq	r1, [r3, #0]
 8003cde:	685b      	ldreq	r3, [r3, #4]
 8003ce0:	1949      	addeq	r1, r1, r5
 8003ce2:	6021      	streq	r1, [r4, #0]
 8003ce4:	e7ed      	b.n	8003cc2 <_free_r+0x22>
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b10b      	cbz	r3, 8003cf0 <_free_r+0x50>
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	d9fa      	bls.n	8003ce6 <_free_r+0x46>
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	1855      	adds	r5, r2, r1
 8003cf4:	42a5      	cmp	r5, r4
 8003cf6:	d10b      	bne.n	8003d10 <_free_r+0x70>
 8003cf8:	6824      	ldr	r4, [r4, #0]
 8003cfa:	4421      	add	r1, r4
 8003cfc:	1854      	adds	r4, r2, r1
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	d1e0      	bne.n	8003cc6 <_free_r+0x26>
 8003d04:	681c      	ldr	r4, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	6053      	str	r3, [r2, #4]
 8003d0a:	440c      	add	r4, r1
 8003d0c:	6014      	str	r4, [r2, #0]
 8003d0e:	e7da      	b.n	8003cc6 <_free_r+0x26>
 8003d10:	d902      	bls.n	8003d18 <_free_r+0x78>
 8003d12:	230c      	movs	r3, #12
 8003d14:	6003      	str	r3, [r0, #0]
 8003d16:	e7d6      	b.n	8003cc6 <_free_r+0x26>
 8003d18:	6825      	ldr	r5, [r4, #0]
 8003d1a:	1961      	adds	r1, r4, r5
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	bf04      	itt	eq
 8003d20:	6819      	ldreq	r1, [r3, #0]
 8003d22:	685b      	ldreq	r3, [r3, #4]
 8003d24:	6063      	str	r3, [r4, #4]
 8003d26:	bf04      	itt	eq
 8003d28:	1949      	addeq	r1, r1, r5
 8003d2a:	6021      	streq	r1, [r4, #0]
 8003d2c:	6054      	str	r4, [r2, #4]
 8003d2e:	e7ca      	b.n	8003cc6 <_free_r+0x26>
 8003d30:	b003      	add	sp, #12
 8003d32:	bd30      	pop	{r4, r5, pc}
 8003d34:	20003f68 	.word	0x20003f68

08003d38 <__malloc_lock>:
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <__malloc_lock+0x8>)
 8003d3a:	f7ff bfa1 	b.w	8003c80 <__retarget_lock_acquire_recursive>
 8003d3e:	bf00      	nop
 8003d40:	20003f64 	.word	0x20003f64

08003d44 <__malloc_unlock>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__malloc_unlock+0x8>)
 8003d46:	f7ff bf9c 	b.w	8003c82 <__retarget_lock_release_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	20003f64 	.word	0x20003f64

08003d50 <_init>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr

08003d5c <_fini>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	bf00      	nop
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr
