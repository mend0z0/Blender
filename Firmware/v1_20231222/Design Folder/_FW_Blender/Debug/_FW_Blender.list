
_FW_Blender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080031a0  080031a0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a0  080031a0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080031a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f94  2000005c  08003204  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ff0  08003204  00023ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b08  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f1  00000000  00000000  00028bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005fe  00000000  00000000  0002adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a4f  00000000  00000000  0002b3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003491  00000000  00000000  00031e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000021c8  00000000  00000000  000352a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  00037468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003164 	.word	0x08003164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003164 	.word	0x08003164

08000210 <SysTick_Handler>:
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
  void SysTick_Handler (void)
  {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    /* Clear overflow flag */
    SysTick->CTRL;
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <SysTick_Handler+0x1c>)
 8000216:	681b      	ldr	r3, [r3, #0]

    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000218:	f001 ff76 	bl	8002108 <xTaskGetSchedulerState>
 800021c:	4603      	mov	r3, r0
 800021e:	2b01      	cmp	r3, #1
 8000220:	d001      	beq.n	8000226 <SysTick_Handler+0x16>
	/* Call tick handler */
	xPortSysTickHandler();
 8000222:	f002 fc59 	bl	8002ad8 <xPortSysTickHandler>
    }
  }
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	e000e010 	.word	0xe000e010

08000230 <DMA1_Stream0_IRQHandler>:
/*			General-purpose I/Os								*/


/*			Direct memory access controller						*/
void DMA1_Stream0_IRQHandler( void )
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr

0800023e <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler( void )
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0

}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler( void )
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr

0800025a <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler( void )
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler( void )
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
	...

08000278 <DMA1_Stream5_IRQHandler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void DMA1_Stream5_IRQHandler( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]

  DMA1_Stream5->CR &= ~DMA_SxCR_TCIE;				// (1)
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <DMA1_Stream5_IRQHandler+0x50>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <DMA1_Stream5_IRQHandler+0x50>)
 8000288:	f023 0310 	bic.w	r3, r3, #16
 800028c:	6013      	str	r3, [r2, #0]
  FMPI2C1->CR2 |= FMPI2C_CR2_STOP;				// (2)
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <DMA1_Stream5_IRQHandler+0x54>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <DMA1_Stream5_IRQHandler+0x54>)
 8000294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000298:	6053      	str	r3, [r2, #4]
  xSemaphoreGiveFromISR( xBinarySemaphoreDMA1Stream5, &xHigherPriorityTaskWoken);	// (3)
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <DMA1_Stream5_IRQHandler+0x58>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	1d3a      	adds	r2, r7, #4
 80002a0:	4611      	mov	r1, r2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fd65 	bl	8000d72 <xQueueGiveFromISR>

  /* Yield if xHigherPriorityTaskWoken is true.  The actual macro used here is port specific. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d007      	beq.n	80002be <DMA1_Stream5_IRQHandler+0x46>
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <DMA1_Stream5_IRQHandler+0x5c>)
 80002b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	f3bf 8f4f 	dsb	sy
 80002ba:	f3bf 8f6f 	isb	sy
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40026088 	.word	0x40026088
 80002cc:	40006000 	.word	0x40006000
 80002d0:	20000078 	.word	0x20000078
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler( void )
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler( void )
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler( void )
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler( void )
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler( void )
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler( void )
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler( void )
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
	...

0800033c <DMA2_Stream6_IRQHandler>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void DMA2_Stream6_IRQHandler( void )
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  DMA2->HIFCR |= DMA_HIFCR_CTCIF7;	// (1)
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <DMA2_Stream6_IRQHandler+0x28>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <DMA2_Stream6_IRQHandler+0x28>)
 8000346:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800034a:	60d3      	str	r3, [r2, #12]
  DMA2_Stream7->CR &= ~DMA_SxCR_TCIE;	// (2)
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <DMA2_Stream6_IRQHandler+0x2c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <DMA2_Stream6_IRQHandler+0x2c>)
 8000352:	f023 0310 	bic.w	r3, r3, #16
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40026400 	.word	0x40026400
 8000368:	400264b8 	.word	0x400264b8

0800036c <TIM3_IRQHandler>:
*	(2) Giving back the semaphore
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void TIM3_IRQHandler( void ){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  TIM3->SR &= ~TIM_SR_UIF;							// (1)
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <TIM3_IRQHandler+0x74>)
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	4a19      	ldr	r2, [pc, #100]	; (80003e0 <TIM3_IRQHandler+0x74>)
 800037c:	f023 0301 	bic.w	r3, r3, #1
 8000380:	6113      	str	r3, [r2, #16]
  TIM3->CCR3 = ws2812ColorBits[ws2812ColorBitIndexCnt];					// (1)
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <TIM3_IRQHandler+0x78>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <TIM3_IRQHandler+0x7c>)
 800038c:	5c9b      	ldrb	r3, [r3, r2]
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <TIM3_IRQHandler+0x74>)
 8000392:	63da      	str	r2, [r3, #60]	; 0x3c
  ws2812ColorBitIndexCnt++;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <TIM3_IRQHandler+0x78>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	3301      	adds	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <TIM3_IRQHandler+0x78>)
 80003a0:	701a      	strb	r2, [r3, #0]
  if(ws2812ColorBitIndexCnt == WS2812_NO_COLOR_BITS)
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <TIM3_IRQHandler+0x78>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b18      	cmp	r3, #24
 80003aa:	d114      	bne.n	80003d6 <TIM3_IRQHandler+0x6a>
    {
      ws2812ColorBitIndexCnt = 0;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <TIM3_IRQHandler+0x78>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
      xSemaphoreGiveFromISR( xBinarySemaphoreTIM3, &xHigherPriorityTaskWoken);	// (2)
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <TIM3_IRQHandler+0x80>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1d3a      	adds	r2, r7, #4
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fcd9 	bl	8000d72 <xQueueGiveFromISR>
      /* Yield if xHigherPriorityTaskWoken is true.  The actual macro used here is port specific. */
      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d007      	beq.n	80003d6 <TIM3_IRQHandler+0x6a>
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <TIM3_IRQHandler+0x84>)
 80003c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	f3bf 8f4f 	dsb	sy
 80003d2:	f3bf 8f6f 	isb	sy
    }
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40000400 	.word	0x40000400
 80003e4:	200000a4 	.word	0x200000a4
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	2000007c 	.word	0x2000007c
 80003f0:	e000ed04 	.word	0xe000ed04

080003f4 <FMPI2C1_EV_IRQHandler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void FMPI2C1_EV_IRQHandler( void )
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]

  if((FMPI2C1->ISR & FMPI2C_ISR_NACKF) == FMPI2C_ISR_NACKF)	// (1)
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0310 	and.w	r3, r3, #16
 8000406:	2b10      	cmp	r3, #16
 8000408:	d10d      	bne.n	8000426 <FMPI2C1_EV_IRQHandler+0x32>
    {
      FMPI2C1->CR1 &= ~FMPI2C_CR1_NACKIE;			// (2)
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a16      	ldr	r2, [pc, #88]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000410:	f023 0310 	bic.w	r3, r3, #16
 8000414:	6013      	str	r3, [r2, #0]
      xSemaphoreGiveFromISR( xBinarySemaphoreFMPI2C, &xHigherPriorityTaskWoken);	// (3)
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <FMPI2C1_EV_IRQHandler+0x78>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fca7 	bl	8000d72 <xQueueGiveFromISR>
 8000424:	e011      	b.n	800044a <FMPI2C1_EV_IRQHandler+0x56>
    }
  else if((FMPI2C1->ISR & FMPI2C_ISR_TXIS) == FMPI2C_ISR_TXIS)	// (4)
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	2b02      	cmp	r3, #2
 8000430:	d10b      	bne.n	800044a <FMPI2C1_EV_IRQHandler+0x56>
    {
      FMPI2C1->CR1 |= FMPI2C_CR1_TXDMAEN;			// (5)
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800043c:	6013      	str	r3, [r2, #0]
      FMPI2C1->CR1 &= ~FMPI2C_CR1_TXIE;				// (6)
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a09      	ldr	r2, [pc, #36]	; (8000468 <FMPI2C1_EV_IRQHandler+0x74>)
 8000444:	f023 0302 	bic.w	r3, r3, #2
 8000448:	6013      	str	r3, [r2, #0]
    }
  /* Yield if xHigherPriorityTaskWoken is true.  The actual macro used here is port specific. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d007      	beq.n	8000460 <FMPI2C1_EV_IRQHandler+0x6c>
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <FMPI2C1_EV_IRQHandler+0x7c>)
 8000452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	f3bf 8f4f 	dsb	sy
 800045c:	f3bf 8f6f 	isb	sy
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40006000 	.word	0x40006000
 800046c:	20000080 	.word	0x20000080
 8000470:	e000ed04 	.word	0xe000ed04

08000474 <FMPI2C1_ER_IRQHandler>:

void FMPI2C1_ER_IRQHandler( void )
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <USART1_IRQHandler>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void USART1_IRQHandler( void )
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
  USART1->CR1 &= ~USART_CR1_TCIE;						// (1)
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <USART1_IRQHandler+0x44>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <USART1_IRQHandler+0x44>)
 8000494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000498:	60d3      	str	r3, [r2, #12]
  xSemaphoreGiveFromISR( xBinarySemaphoreUSART1, &xHigherPriorityTaskWoken);	// (2)
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <USART1_IRQHandler+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1d3a      	adds	r2, r7, #4
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fc65 	bl	8000d72 <xQueueGiveFromISR>
  /* Yield if xHigherPriorityTaskWoken is true.  The actual macro used here is port specific. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d007      	beq.n	80004be <USART1_IRQHandler+0x3a>
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <USART1_IRQHandler+0x4c>)
 80004b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	f3bf 8f4f 	dsb	sy
 80004ba:	f3bf 8f6f 	isb	sy
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40011000 	.word	0x40011000
 80004cc:	20000084 	.word	0x20000084
 80004d0:	e000ed04 	.word	0xe000ed04

080004d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	db0b      	blt.n	80004fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 021f 	and.w	r2, r3, #31
 80004ec:	4907      	ldr	r1, [pc, #28]	; (800050c <__NVIC_EnableIRQ+0x38>)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	095b      	lsrs	r3, r3, #5
 80004f4:	2001      	movs	r0, #1
 80004f6:	fa00 f202 	lsl.w	r2, r0, r2
 80004fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000e100 	.word	0xe000e100

08000510 <main>:

/****************************************************************************************************
****************************         STATIC FUNTIONS         ****************************************
*****************************************************************************************************/
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af02      	add	r7, sp, #8
  /* 	----------------------   		MCU Configuration				----------------------------
	----------------------   Initialize all configured peripherals  ----------------------------*/
  _init_Peripherals();
 8000516:	f000 f93b 	bl	8000790 <_init_Peripherals>
  /*NVIC_EnableIRQ(SysTick_IRQn);*/				// Enable Interrupts.
  NVIC_EnableIRQ(FMPI2C1_EV_IRQn);			// Enable Required Interrupts.
 800051a:	205f      	movs	r0, #95	; 0x5f
 800051c:	f7ff ffda 	bl	80004d4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USART1_IRQn);			// Enable Required Interrupts.
 8000520:	2025      	movs	r0, #37	; 0x25
 8000522:	f7ff ffd7 	bl	80004d4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM3_IRQn);				// Enable Required Interrupts.
 8000526:	201d      	movs	r0, #29
 8000528:	f7ff ffd4 	bl	80004d4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);			// Enable Required Interrupts.
 800052c:	2010      	movs	r0, #16
 800052e:	f7ff ffd1 	bl	80004d4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);			// Enable Required Interrupts.
 8000532:	2046      	movs	r0, #70	; 0x46
 8000534:	f7ff ffce 	bl	80004d4 <__NVIC_EnableIRQ>

  /* ----------------------   	  Modules Configuration 			----------------------------*/
  SET_BIT( EXT_LDO_EN_PORT, EXT_LDO_EN_PIN);	//Enable the LDO power to turn the modules on
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0x54>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <main+0x54>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6153      	str	r3, [r2, #20]
  _init_PAM8003();
 8000544:	f000 f873 	bl	800062e <_init_PAM8003>
  //Each module init will be a task...

  xTaskCreate( defaultTask,	// Pointer to the function that implements the task.
 8000548:	2300      	movs	r3, #0
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2301      	movs	r3, #1
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <main+0x58>)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x5c>)
 8000558:	f000 fea0 	bl	800129c <xTaskCreate>
  //			NULL,		// This example does not use the task parameter.
  //			4,			// This task will run at priority 2.
  //			NULL		// This example does not use the task handle.
  //		);
  /* Start the created tasks running. */
  vTaskStartScheduler();
 800055c:	f001 f854 	bl	8001608 <vTaskStartScheduler>

  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x50>
 8000562:	bf00      	nop
 8000564:	40020800 	.word	0x40020800
 8000568:	0800317c 	.word	0x0800317c
 800056c:	08000571 	.word	0x08000571

08000570 <defaultTask>:
*************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
void defaultTask( void *pvParameters )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  TickType_t xDelay500ms = pdMS_TO_TICKS( 500UL );
 8000578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800057c:	60fb      	str	r3, [r7, #12]

  NVIC_EnableIRQ(SysTick_IRQn);				// Enable Interrupts.
 800057e:	f04f 30ff 	mov.w	r0, #4294967295
 8000582:	f7ff ffa7 	bl	80004d4 <__NVIC_EnableIRQ>

  while(1)
    {
      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <defaultTask+0x44>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	2b00      	cmp	r3, #0
 8000590:	d006      	beq.n	80005a0 <defaultTask+0x30>
	{
	  CLEAR_BIT(LED_IND_PORT, LED_IND_PIN);	// (5)
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <defaultTask+0x44>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <defaultTask+0x44>)
 8000598:	f023 0304 	bic.w	r3, r3, #4
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	e005      	b.n	80005ac <defaultTask+0x3c>
  	}
      else
	{
  	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <defaultTask+0x44>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <defaultTask+0x44>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6153      	str	r3, [r2, #20]
  	}
      vTaskDelay(xDelay500ms);
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f000 fff7 	bl	80015a0 <vTaskDelay>
      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
 80005b2:	e7e8      	b.n	8000586 <defaultTask+0x16>
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SystemInit+0x20>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SystemInit+0x20>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005e0:	f7ff ffea 	bl	80005b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800060a:	f002 fd1f 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800060e:	f7ff ff7f 	bl	8000510 <main>
  bx  lr    
 8000612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000620:	080031a8 	.word	0x080031a8
  ldr r2, =_sbss
 8000624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000628:	20003ff0 	.word	0x20003ff0

0800062c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>

0800062e <_init_PAM8003>:

/****************************************************************************************************
****************************         GLOBAL FUNTIONS         ****************************************
*****************************************************************************************************/
void _init_PAM8003( void )
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  PAM8003Mute( PAM8003_CMD_UNMUTE );
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f806 	bl	8000644 <PAM8003Mute>
  PAM8003SetVolume( PAM8003_VOL_VAL_DEFAULT );
 8000638:	2314      	movs	r3, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f822 	bl	8000684 <PAM8003SetVolume>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <PAM8003Mute>:

void PAM8003Mute( uint8_t cmd )
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	if(cmd == PAM8003_CMD_MUTE)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d106      	bne.n	8000662 <PAM8003Mute+0x1e>
	{
		SET_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <PAM8003Mute+0x3c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <PAM8003Mute+0x3c>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	6153      	str	r3, [r2, #20]
	}
	else if( cmd == PAM8003_CMD_UNMUTE )
	{
		CLEAR_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
	}
}
 8000660:	e008      	b.n	8000674 <PAM8003Mute+0x30>
	else if( cmd == PAM8003_CMD_UNMUTE )
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d105      	bne.n	8000674 <PAM8003Mute+0x30>
		CLEAR_BIT( PAM8003_PORT_SHDN, PAM8003_PIN_SHDN );
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <PAM8003Mute+0x3c>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <PAM8003Mute+0x3c>)
 800066e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000672:	6153      	str	r3, [r2, #20]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40020000 	.word	0x40020000

08000684 <PAM8003SetVolume>:

void PAM8003SetVolume( uint8_t value /*Percent like 0% to 100%*/)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	//just checking the min and max of input.
	if((value > PAM8003_VOL_VAL_MAX) || (value < PAM8003_VOL_VAL_MIN)){
 800068e:	2264      	movs	r2, #100	; 0x64
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4293      	cmp	r3, r2
 8000694:	d808      	bhi.n	80006a8 <PAM8003SetVolume+0x24>
 8000696:	2200      	movs	r2, #0
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	4293      	cmp	r3, r2
 800069c:	d304      	bcc.n	80006a8 <PAM8003SetVolume+0x24>
		return;
	}
	DACUpdate( value );
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f883 	bl	80007ac <DACUpdate>
 80006a6:	e000      	b.n	80006aa <PAM8003SetVolume+0x26>
		return;
 80006a8:	bf00      	nop
}
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <__NVIC_SetPriorityGrouping>:
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ffc2 	bl	80006f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <_init_Peripherals>:
*	(1) Init all the required peripherals.
*	************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void _init_Peripherals( void ){
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	//_init_PWR();
	_init_RCC();
 8000794:	f000 f838 	bl	8000808 <_init_RCC>
	_init_GPIO();
 8000798:	f000 f8d0 	bl	800093c <_init_GPIO>
	//_init_RTC();
	//_init_FMPI2C1();
	//_init_UART1();
	//_init_I2S();
	//_init_SPDIF();
	_init_SysTick();
 800079c:	f000 f824 	bl	80007e8 <_init_SysTick>

	NVIC_SetPriorityGrouping(4);
 80007a0:	2004      	movs	r0, #4
 80007a2:	f7ff ff85 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <DACUpdate>:
*************************************************************************************************
*	Revision History (Description, author, date: yyyy/mm/dd)
*
****************************************************************************************************/
void DACUpdate( uint8_t dacValue)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	__IO uint16_t tempDACValue = dacValue * DAC_CONSTANT;	// (1)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	fb13 f302 	smulbb	r3, r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	81fb      	strh	r3, [r7, #14]
	_init_DAC();
 80007c4:	f000 f922 	bl	8000a0c <_init_DAC>
	DAC1->DHR12R1 = tempDACValue;				// (2)
 80007c8:	89fb      	ldrh	r3, [r7, #14]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <DACUpdate+0x38>)
 80007ce:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;			// (3)
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <DACUpdate+0x38>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <DACUpdate+0x38>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6053      	str	r3, [r2, #4]

	//No interrupt, it'll work probably :D
	//I can read the DAC1->DOR1 to make sure it's been registered, but maybe later...
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40007400 	.word	0x40007400

080007e8 <_init_SysTick>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_SysTick( void )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	SysTick_Config(SysTickInputClock / 8000);		// (1)
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <_init_SysTick+0x18>)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <_init_SysTick+0x1c>)
 80007f0:	fba3 2302 	umull	r2, r3, r3, r2
 80007f4:	0a5b      	lsrs	r3, r3, #9
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffa8 	bl	800074c <SysTick_Config>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	055d4a80 	.word	0x055d4a80
 8000804:	10624dd3 	.word	0x10624dd3

08000808 <_init_RCC>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_RCC( void )
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  ////--------------Enabling the HSE
  RCC->CR |= RCC_CR_HSEON;				// (1)
 800080c:	4b4a      	ldr	r3, [pc, #296]	; (8000938 <_init_RCC+0x130>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a49      	ldr	r2, [pc, #292]	; (8000938 <_init_RCC+0x130>)
 8000812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000816:	6013      	str	r3, [r2, #0]
  while((RCC->CR & RCC_CR_HSERDY) == 0)			// (2)
 8000818:	bf00      	nop
 800081a:	4b47      	ldr	r3, [pc, #284]	; (8000938 <_init_RCC+0x130>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <_init_RCC+0x12>
    {
      //maybe add a time out later
    }

  ////--------------Configuration for PLLs
  RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;			// (3)
 8000826:	4b44      	ldr	r3, [pc, #272]	; (8000938 <_init_RCC+0x130>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4a43      	ldr	r2, [pc, #268]	; (8000938 <_init_RCC+0x130>)
 800082c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000830:	6053      	str	r3, [r2, #4]

  RCC->PLLCFGR |= ((	RCC_PLLCFGR_PLLN_2 	|	// (4)
 8000832:	4b41      	ldr	r3, [pc, #260]	; (8000938 <_init_RCC+0x130>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	4a40      	ldr	r2, [pc, #256]	; (8000938 <_init_RCC+0x130>)
 8000838:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6053      	str	r3, [r2, #4]
			RCC_PLLCFGR_PLLN_5 	|
			RCC_PLLCFGR_PLLN_7) |
			RCC_PLLCFGR_PLLM_3
  );

  RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_1;			// (5)
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <_init_RCC+0x130>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4a3c      	ldr	r2, [pc, #240]	; (8000938 <_init_RCC+0x130>)
 8000848:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800084c:	6053      	str	r3, [r2, #4]

  RCC->CR |= RCC_CR_PLLON;				// (6)
 800084e:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <_init_RCC+0x130>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a39      	ldr	r2, [pc, #228]	; (8000938 <_init_RCC+0x130>)
 8000854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000858:	6013      	str	r3, [r2, #0]
  while((RCC->CR & RCC_CR_PLLRDY) == 0)			// (7)
 800085a:	bf00      	nop
 800085c:	4b36      	ldr	r3, [pc, #216]	; (8000938 <_init_RCC+0x130>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0f9      	beq.n	800085c <_init_RCC+0x54>
    {
      //maybe add a time out later
    }

  RCC->CFGR |= RCC_CFGR_SW_1;				// (8)
 8000868:	4b33      	ldr	r3, [pc, #204]	; (8000938 <_init_RCC+0x130>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <_init_RCC+0x130>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	6093      	str	r3, [r2, #8]
  while((RCC->CFGR & RCC_CFGR_SWS_1) != RCC_CFGR_SWS_1)	// (9)
 8000874:	bf00      	nop
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <_init_RCC+0x130>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	2b08      	cmp	r3, #8
 8000880:	d1f9      	bne.n	8000876 <_init_RCC+0x6e>
    {
      //maybe add a time out later
    }

  RCC->CFGR |= RCC_CFGR_HPRE_3;				// (10)
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <_init_RCC+0x130>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	4a2c      	ldr	r2, [pc, #176]	; (8000938 <_init_RCC+0x130>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_2; 	// (11)
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <_init_RCC+0x130>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4a29      	ldr	r2, [pc, #164]	; (8000938 <_init_RCC+0x130>)
 8000894:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000898:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_2;			// (12)
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <_init_RCC+0x130>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	4a26      	ldr	r2, [pc, #152]	; (8000938 <_init_RCC+0x130>)
 80008a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a4:	6093      	str	r3, [r2, #8]


  RCC->AHB1ENR |= (	RCC_AHB1ENR_GPIOAEN |		// (13)
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <_init_RCC+0x130>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <_init_RCC+0x130>)
 80008ac:	f043 030f 	orr.w	r3, r3, #15
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
			RCC_AHB1ENR_GPIOBEN |		// (14)
			RCC_AHB1ENR_GPIOCEN |		// (15)
			RCC_AHB1ENR_GPIODEN		// (16)
  );

  RCC->AHB1ENR |= (	RCC_AHB1ENR_DMA1EN	| 	// (17)
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <_init_RCC+0x130>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a20      	ldr	r2, [pc, #128]	; (8000938 <_init_RCC+0x130>)
 80008b8:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
			RCC_AHB1ENR_DMA2EN		// (18)
  );
  //RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;			// (19)
  //RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;			// (20)
  //RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;			// (21)
  RCC->APB1ENR |= RCC_APB1ENR_DACEN;			// (22)
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <_init_RCC+0x130>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <_init_RCC+0x130>)
 80008c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
  RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;			// (23)
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <_init_RCC+0x130>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <_init_RCC+0x130>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// (24)
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <_init_RCC+0x130>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <_init_RCC+0x130>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;			// (25)
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_init_RCC+0x130>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_init_RCC+0x130>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
  RCC->APB1ENR |= RCC_APB1ENR_FMPI2C1EN;		// (26)
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <_init_RCC+0x130>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <_init_RCC+0x130>)
 80008f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;			// (27)
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <_init_RCC+0x130>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <_init_RCC+0x130>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;			// (28)
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <_init_RCC+0x130>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <_init_RCC+0x130>)
 800090c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
  RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_SPDIFRXSEL;		// (29)
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <_init_RCC+0x130>)
 8000914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <_init_RCC+0x130>)
 800091a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800091e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  RCC->APB1ENR |= RCC_APB1ENR_SPDIFRXEN;		// (30)
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <_init_RCC+0x130>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <_init_RCC+0x130>)
 8000928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40023800 	.word	0x40023800

0800093c <_init_GPIO>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_GPIO( void )
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /*		MODER REGs		*/
  GPIOA->MODER |= (	GPIO_MODER_MODER4_0  | GPIO_MODER_MODER4_1 |				// (1)
 8000940:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <_init_GPIO+0xb0>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4929      	ldr	r1, [pc, #164]	; (80009ec <_init_GPIO+0xb0>)
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <_init_GPIO+0xb4>)
 8000948:	4313      	orrs	r3, r2
 800094a:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER3_1  |							// (8)
			GPIO_MODER_MODER5_1  |							// (9)
			GPIO_MODER_MODER15_1							// (10)
  );

  GPIOB->MODER |= (	GPIO_MODER_MODER13_0 |							// (11)
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <_init_GPIO+0xb8>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4928      	ldr	r1, [pc, #160]	; (80009f4 <_init_GPIO+0xb8>)
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <_init_GPIO+0xbc>)
 8000954:	4313      	orrs	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER0_1  |							// (16)
			GPIO_MODER_MODER1_1  |							// (17)
			GPIO_MODER_MODER7_1	 						// (18)
  );

  GPIOC->MODER |= (	GPIO_MODER_MODER0_0  |							// (19)
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <_init_GPIO+0xc0>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4927      	ldr	r1, [pc, #156]	; (80009fc <_init_GPIO+0xc0>)
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <_init_GPIO+0xc4>)
 8000960:	4313      	orrs	r3, r2
 8000962:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER4_1  |							// (22)
			GPIO_MODER_MODER6_1	 |						// (23)
			GPIO_MODER_MODER7_1							// (24)
  );

  GPIOD->MODER |= GPIO_MODER_MODER2_0;								// (25)
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <_init_GPIO+0xc8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <_init_GPIO+0xc8>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]

  /*		OSPEEDR	REGs	*/
  GPIOA->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (26)
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <_init_GPIO+0xb0>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <_init_GPIO+0xb0>)
 8000976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800097a:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 800097e:	6093      	str	r3, [r2, #8]
			GPIO_OSPEEDR_OSPEED5_0	|						// (27)
			GPIO_OSPEEDR_OSPEED15_0							// (28)
  );

  GPIOB->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (29)
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <_init_GPIO+0xb8>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <_init_GPIO+0xb8>)
 8000986:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800098a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800098e:	6093      	str	r3, [r2, #8]
			GPIO_OSPEEDR_OSPEED0_0	| GPIO_OSPEEDR_OSPEED0_1 |			// (31)
			GPIO_OSPEEDR_OSPEED1_0	|						// (32)
			GPIO_OSPEEDR_OSPEED7_0							// (33)
  );
  /*		AFRL REGs		*/
  GPIOA->AFR[0] |= (	GPIO_AFRL_AFSEL3_0   |							// (34)
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <_init_GPIO+0xb0>)
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4a15      	ldr	r2, [pc, #84]	; (80009ec <_init_GPIO+0xb0>)
 8000996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800099a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800099e:	6213      	str	r3, [r2, #32]
			GPIO_AFRL_AFSEL5_0	 						// (35)
  );

  GPIOA->AFR[1] |= (	(GPIO_AFRH_AFSEL9_0  | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2) |	// (36)
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <_init_GPIO+0xb0>)
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <_init_GPIO+0xb0>)
 80009a6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80009aa:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 80009ae:	6253      	str	r3, [r2, #36]	; 0x24
			(GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2) |	// (37)
			(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2)				// (38)
  );

  GPIOB->AFR[0] |= (	(GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_2) |				// (39)
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_init_GPIO+0xb8>)
 80009b2:	6a1a      	ldr	r2, [r3, #32]
 80009b4:	490f      	ldr	r1, [pc, #60]	; (80009f4 <_init_GPIO+0xb8>)
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <_init_GPIO+0xcc>)
 80009b8:	4313      	orrs	r3, r2
 80009ba:	620b      	str	r3, [r1, #32]
			GPIO_AFRL_AFSEL0_1 	|						// (41)
			GPIO_AFRL_AFSEL1_1 	|						// (42)
			GPIO_AFRL_AFSEL7_3							// (43)
  );

  GPIOC->AFR[0] |= (	GPIO_AFRL_AFSEL6_2	|						// (44)
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_init_GPIO+0xc0>)
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <_init_GPIO+0xc0>)
 80009c2:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80009c6:	6213      	str	r3, [r2, #32]
			GPIO_AFRL_AFSEL7_2							// (45)
  );

  /*	RESET VALUE	*/
  GPIOA->ODR = 0;																				// (46)
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_init_GPIO+0xb0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  GPIOB->ODR = 0;																				// (47)
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <_init_GPIO+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  GPIOC->ODR = 0;																				// (48)
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <_init_GPIO+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  GPIOD->ODR = 0;																				// (49)
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <_init_GPIO+0xc8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40020000 	.word	0x40020000
 80009f0:	80281bbf 	.word	0x80281bbf
 80009f4:	40020400 	.word	0x40020400
 80009f8:	5400888a 	.word	0x5400888a
 80009fc:	40020800 	.word	0x40020800
 8000a00:	0005a201 	.word	0x0005a201
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	80505022 	.word	0x80505022

08000a0c <_init_DAC>:
*	************************************************************************************************
*	Revision History (Description (author, date: yyyy/mm/dd))
*
****************************************************************************************************/
static void _init_DAC( void )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  static bool initFlag = pdFALSE;
  if(initFlag == pdTRUE)
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <_init_DAC+0x3c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d112      	bne.n	8000a3e <_init_DAC+0x32>
    {
      return;
    }

  //There is not much of configuration, but the DAC will trigger by software.
  DAC1->CR |= DAC_CR_EN1;		// (1)
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <_init_DAC+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <_init_DAC+0x40>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6013      	str	r3, [r2, #0]
  DAC1->DHR12R1 = 0;			// (2)
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <_init_DAC+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;	// (3)
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_init_DAC+0x40>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <_init_DAC+0x40>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6053      	str	r3, [r2, #4]

  initFlag = pdTRUE;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <_init_DAC+0x3c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e000      	b.n	8000a40 <_init_DAC+0x34>
      return;
 8000a3e:	bf00      	nop
}
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20000088 	.word	0x20000088
 8000a4c:	40007400 	.word	0x40007400

08000a50 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f103 0208 	add.w	r2, r3, #8
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f103 0208 	add.w	r2, r3, #8
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f103 0208 	add.w	r2, r3, #8
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d103      	bne.n	8000aca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e00c      	b.n	8000ae4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3308      	adds	r3, #8
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e002      	b.n	8000ad8 <vListInsert+0x2e>
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d2f6      	bcs.n	8000ad2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6892      	ldr	r2, [r2, #8]
 8000b32:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	6852      	ldr	r2, [r2, #4]
 8000b3c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d103      	bne.n	8000b50 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10a      	bne.n	8000b9e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8c:	f383 8811 	msr	BASEPRI, r3
 8000b90:	f3bf 8f6f 	isb	sy
 8000b94:	f3bf 8f4f 	dsb	sy
 8000b98:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b9a:	bf00      	nop
 8000b9c:	e7fe      	b.n	8000b9c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d05d      	beq.n	8000c60 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d059      	beq.n	8000c60 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d000      	beq.n	8000bc0 <xQueueGenericReset+0x50>
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14c      	bne.n	8000c60 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000bc6:	f001 fef5 	bl	80029b4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	441a      	add	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	2200      	movs	r2, #0
 8000be4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	441a      	add	r2, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d114      	bne.n	8000c46 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d01a      	beq.n	8000c5a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	3310      	adds	r3, #16
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 f853 	bl	8001cd4 <xTaskRemoveFromEventList>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d012      	beq.n	8000c5a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <xQueueGenericReset+0x11c>)
 8000c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	f3bf 8f4f 	dsb	sy
 8000c40:	f3bf 8f6f 	isb	sy
 8000c44:	e009      	b.n	8000c5a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	3310      	adds	r3, #16
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff00 	bl	8000a50 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	3324      	adds	r3, #36	; 0x24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fefb 	bl	8000a50 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000c5a:	f001 fedb 	bl	8002a14 <vPortExitCritical>
 8000c5e:	e001      	b.n	8000c64 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10a      	bne.n	8000c80 <xQueueGenericReset+0x110>
	__asm volatile
 8000c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6e:	f383 8811 	msr	BASEPRI, r3
 8000c72:	f3bf 8f6f 	isb	sy
 8000c76:	f3bf 8f4f 	dsb	sy
 8000c7a:	60bb      	str	r3, [r7, #8]
}
 8000c7c:	bf00      	nop
 8000c7e:	e7fe      	b.n	8000c7e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000c80:	697b      	ldr	r3, [r7, #20]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000ed04 	.word	0xe000ed04

08000c90 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d02e      	beq.n	8000d06 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000ca8:	2100      	movs	r1, #0
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d000      	beq.n	8000cb8 <xQueueGenericCreate+0x28>
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d123      	bne.n	8000d06 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000cc6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000cca:	d81c      	bhi.n	8000d06 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3350      	adds	r3, #80	; 0x50
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 ff8c 	bl	8002bf8 <pvPortMalloc>
 8000ce0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d01c      	beq.n	8000d22 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3350      	adds	r3, #80	; 0x50
 8000cf0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 f814 	bl	8000d2c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000d04:	e00d      	b.n	8000d22 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10a      	bne.n	8000d22 <xQueueGenericCreate+0x92>
	__asm volatile
 8000d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d10:	f383 8811 	msr	BASEPRI, r3
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	f3bf 8f4f 	dsb	sy
 8000d1c:	613b      	str	r3, [r7, #16]
}
 8000d1e:	bf00      	nop
 8000d20:	e7fe      	b.n	8000d20 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000d22:	69fb      	ldr	r3, [r7, #28]
    }
 8000d24:	4618      	mov	r0, r3
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d103      	bne.n	8000d48 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e002      	b.n	8000d4e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	69b8      	ldr	r0, [r7, #24]
 8000d5e:	f7ff ff07 	bl	8000b70 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b090      	sub	sp, #64	; 0x40
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10a      	bne.n	8000d9c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8000d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8a:	f383 8811 	msr	BASEPRI, r3
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	f3bf 8f4f 	dsb	sy
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d98:	bf00      	nop
 8000d9a:	e7fe      	b.n	8000d9a <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00a      	beq.n	8000dba <xQueueGiveFromISR+0x48>
	__asm volatile
 8000da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da8:	f383 8811 	msr	BASEPRI, r3
 8000dac:	f3bf 8f6f 	isb	sy
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	623b      	str	r3, [r7, #32]
}
 8000db6:	bf00      	nop
 8000db8:	e7fe      	b.n	8000db8 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <xQueueGiveFromISR+0x58>
 8000dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <xQueueGiveFromISR+0x5c>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <xQueueGiveFromISR+0x5e>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10a      	bne.n	8000dea <xQueueGiveFromISR+0x78>
	__asm volatile
 8000dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd8:	f383 8811 	msr	BASEPRI, r3
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	f3bf 8f4f 	dsb	sy
 8000de4:	61fb      	str	r3, [r7, #28]
}
 8000de6:	bf00      	nop
 8000de8:	e7fe      	b.n	8000de8 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000dea:	f001 fec5 	bl	8002b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000dee:	f3ef 8211 	mrs	r2, BASEPRI
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	61ba      	str	r2, [r7, #24]
 8000e04:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e06:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d242      	bcs.n	8000ea0 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e2a:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000e2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d112      	bne.n	8000e5c <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d02d      	beq.n	8000e9a <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e40:	3324      	adds	r3, #36	; 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 ff46 	bl	8001cd4 <xTaskRemoveFromEventList>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d025      	beq.n	8000e9a <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d022      	beq.n	8000e9a <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e01e      	b.n	8000e9a <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000e5c:	f000 fd48 	bl	80018f0 <uxTaskGetNumberOfTasks>
 8000e60:	62b8      	str	r0, [r7, #40]	; 0x28
 8000e62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d916      	bls.n	8000e9a <xQueueGiveFromISR+0x128>
 8000e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e70:	2b7f      	cmp	r3, #127	; 0x7f
 8000e72:	d10a      	bne.n	8000e8a <xQueueGiveFromISR+0x118>
	__asm volatile
 8000e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e78:	f383 8811 	msr	BASEPRI, r3
 8000e7c:	f3bf 8f6f 	isb	sy
 8000e80:	f3bf 8f4f 	dsb	sy
 8000e84:	613b      	str	r3, [r7, #16]
}
 8000e86:	bf00      	nop
 8000e88:	e7fe      	b.n	8000e88 <xQueueGiveFromISR+0x116>
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	b25a      	sxtb	r2, r3
 8000e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e9e:	e001      	b.n	8000ea4 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000eae:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3740      	adds	r7, #64	; 0x40
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10a      	bne.n	8000eec <xQueueReceive+0x30>
	__asm volatile
 8000ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	623b      	str	r3, [r7, #32]
}
 8000ee8:	bf00      	nop
 8000eea:	e7fe      	b.n	8000eea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d103      	bne.n	8000efa <xQueueReceive+0x3e>
 8000ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <xQueueReceive+0x42>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <xQueueReceive+0x44>
 8000efe:	2300      	movs	r3, #0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10a      	bne.n	8000f1a <xQueueReceive+0x5e>
	__asm volatile
 8000f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f08:	f383 8811 	msr	BASEPRI, r3
 8000f0c:	f3bf 8f6f 	isb	sy
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	61fb      	str	r3, [r7, #28]
}
 8000f16:	bf00      	nop
 8000f18:	e7fe      	b.n	8000f18 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f1a:	f001 f8f5 	bl	8002108 <xTaskGetSchedulerState>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <xQueueReceive+0x6e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <xQueueReceive+0x72>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <xQueueReceive+0x74>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10a      	bne.n	8000f4a <xQueueReceive+0x8e>
	__asm volatile
 8000f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f38:	f383 8811 	msr	BASEPRI, r3
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	61bb      	str	r3, [r7, #24]
}
 8000f46:	bf00      	nop
 8000f48:	e7fe      	b.n	8000f48 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f4a:	f001 fd33 	bl	80029b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d01f      	beq.n	8000f9a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f5e:	f000 f88d 	bl	800107c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00f      	beq.n	8000f92 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	3310      	adds	r3, #16
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 feac 	bl	8001cd4 <xTaskRemoveFromEventList>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <xQueueReceive+0x1bc>)
 8000f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f92:	f001 fd3f 	bl	8002a14 <vPortExitCritical>
                return pdPASS;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e069      	b.n	800106e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000fa0:	f001 fd38 	bl	8002a14 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e062      	b.n	800106e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 ff66 	bl	8001e84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000fbc:	f001 fd2a 	bl	8002a14 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000fc0:	f000 fb7c 	bl	80016bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000fc4:	f001 fcf6 	bl	80029b4 <vPortEnterCritical>
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d103      	bne.n	8000fde <xQueueReceive+0x122>
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fea:	d103      	bne.n	8000ff4 <xQueueReceive+0x138>
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ff4:	f001 fd0e 	bl	8002a14 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ff8:	1d3a      	adds	r2, r7, #4
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f000 ff55 	bl	8001eb0 <xTaskCheckForTimeOut>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d123      	bne.n	8001054 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800100c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800100e:	f000 f8ad 	bl	800116c <prvIsQueueEmpty>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d017      	beq.n	8001048 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	3324      	adds	r3, #36	; 0x24
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fded 	bl	8001c00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001028:	f000 f84e 	bl	80010c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800102c:	f000 fb54 	bl	80016d8 <xTaskResumeAll>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d189      	bne.n	8000f4a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <xQueueReceive+0x1bc>)
 8001038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	e780      	b.n	8000f4a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800104a:	f000 f83d 	bl	80010c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800104e:	f000 fb43 	bl	80016d8 <xTaskResumeAll>
 8001052:	e77a      	b.n	8000f4a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001056:	f000 f837 	bl	80010c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800105a:	f000 fb3d 	bl	80016d8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800105e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001060:	f000 f884 	bl	800116c <prvIsQueueEmpty>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	f43f af6f 	beq.w	8000f4a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800106c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800106e:	4618      	mov	r0, r3
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000ed04 	.word	0xe000ed04

0800107c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d018      	beq.n	80010c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	441a      	add	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d303      	bcc.n	80010b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68d9      	ldr	r1, [r3, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	461a      	mov	r2, r3
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f001 ffec 	bl	8003098 <memcpy>
    }
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80010d0:	f001 fc70 	bl	80029b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80010dc:	e011      	b.n	8001102 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d012      	beq.n	800110c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3324      	adds	r3, #36	; 0x24
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fdf2 	bl	8001cd4 <xTaskRemoveFromEventList>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80010f6:	f000 ff41 	bl	8001f7c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dce9      	bgt.n	80010de <prvUnlockQueue+0x16>
 800110a:	e000      	b.n	800110e <prvUnlockQueue+0x46>
                    break;
 800110c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001116:	f001 fc7d 	bl	8002a14 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800111a:	f001 fc4b 	bl	80029b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001126:	e011      	b.n	800114c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3310      	adds	r3, #16
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fdcd 	bl	8001cd4 <xTaskRemoveFromEventList>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001140:	f000 ff1c 	bl	8001f7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	3b01      	subs	r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800114c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001150:	2b00      	cmp	r3, #0
 8001152:	dce9      	bgt.n	8001128 <prvUnlockQueue+0x60>
 8001154:	e000      	b.n	8001158 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001156:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	22ff      	movs	r2, #255	; 0xff
 800115c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001160:	f001 fc58 	bl	8002a14 <vPortExitCritical>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001174:	f001 fc1e 	bl	80029b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001180:	2301      	movs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e001      	b.n	800118a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800118a:	f001 fc43 	bl	8002a14 <vPortExitCritical>

    return xReturn;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10a      	bne.n	80011c2 <vQueueAddToRegistry+0x2a>
	__asm volatile
 80011ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b0:	f383 8811 	msr	BASEPRI, r3
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	60fb      	str	r3, [r7, #12]
}
 80011be:	bf00      	nop
 80011c0:	e7fe      	b.n	80011c0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d024      	beq.n	8001212 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e01e      	b.n	800120c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <vQueueAddToRegistry+0x98>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d105      	bne.n	80011ea <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <vQueueAddToRegistry+0x98>)
 80011e4:	4413      	add	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
                    break;
 80011e8:	e013      	b.n	8001212 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10a      	bne.n	8001206 <vQueueAddToRegistry+0x6e>
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <vQueueAddToRegistry+0x98>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d104      	bne.n	8001206 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <vQueueAddToRegistry+0x98>)
 8001202:	4413      	add	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b07      	cmp	r3, #7
 8001210:	d9dd      	bls.n	80011ce <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200000a8 	.word	0x200000a8

08001234 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001244:	f001 fbb6 	bl	80029b4 <vPortEnterCritical>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800124e:	b25b      	sxtb	r3, r3
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d103      	bne.n	800125e <vQueueWaitForMessageRestricted+0x2a>
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001264:	b25b      	sxtb	r3, r3
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126a:	d103      	bne.n	8001274 <vQueueWaitForMessageRestricted+0x40>
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001274:	f001 fbce 	bl	8002a14 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127c:	2b00      	cmp	r3, #0
 800127e:	d106      	bne.n	800128e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3324      	adds	r3, #36	; 0x24
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fcdd 	bl	8001c48 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff1a 	bl	80010c8 <prvUnlockQueue>
    }
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fca1 	bl	8002bf8 <pvPortMalloc>
 80012b6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d013      	beq.n	80012e6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80012be:	20a8      	movs	r0, #168	; 0xa8
 80012c0:	f001 fc9a 	bl	8002bf8 <pvPortMalloc>
 80012c4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80012cc:	22a8      	movs	r2, #168	; 0xa8
 80012ce:	2100      	movs	r1, #0
 80012d0:	69f8      	ldr	r0, [r7, #28]
 80012d2:	f001 fe5d 	bl	8002f90 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
 80012dc:	e005      	b.n	80012ea <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f001 fd44 	bl	8002d6c <vPortFree>
 80012e4:	e001      	b.n	80012ea <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80012f0:	88fa      	ldrh	r2, [r7, #6]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f80e 	bl	8001328 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800130c:	69f8      	ldr	r0, [r7, #28]
 800130e:	f000 f8af 	bl	8001470 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	e002      	b.n	800131e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800131e:	69bb      	ldr	r3, [r7, #24]
    }
 8001320:	4618      	mov	r0, r3
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	461a      	mov	r2, r3
 8001340:	21a5      	movs	r1, #165	; 0xa5
 8001342:	f001 fe25 	bl	8002f90 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001350:	3b01      	subs	r3, #1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f023 0307 	bic.w	r3, r3, #7
 800135e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <prvInitialiseNewTask+0x58>
	__asm volatile
 800136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136e:	f383 8811 	msr	BASEPRI, r3
 8001372:	f3bf 8f6f 	isb	sy
 8001376:	f3bf 8f4f 	dsb	sy
 800137a:	617b      	str	r3, [r7, #20]
}
 800137c:	bf00      	nop
 800137e:	e7fe      	b.n	800137e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d01e      	beq.n	80013c4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e012      	b.n	80013b2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	7819      	ldrb	r1, [r3, #0]
 8001394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	3334      	adds	r3, #52	; 0x34
 800139c:	460a      	mov	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d9e9      	bls.n	800138c <prvInitialiseNewTask+0x64>
 80013b8:	e000      	b.n	80013bc <prvInitialiseNewTask+0x94>
            {
                break;
 80013ba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	2b09      	cmp	r3, #9
 80013c8:	d90a      	bls.n	80013e0 <prvInitialiseNewTask+0xb8>
	__asm volatile
 80013ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ce:	f383 8811 	msr	BASEPRI, r3
 80013d2:	f3bf 8f6f 	isb	sy
 80013d6:	f3bf 8f4f 	dsb	sy
 80013da:	613b      	str	r3, [r7, #16]
}
 80013dc:	bf00      	nop
 80013de:	e7fe      	b.n	80013de <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b09      	cmp	r3, #9
 80013e4:	d901      	bls.n	80013ea <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80013e6:	2309      	movs	r3, #9
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80013ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80013f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013f4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f8:	3304      	adds	r3, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb48 	bl	8000a90 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001402:	3318      	adds	r3, #24
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fb43 	bl	8000a90 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800140e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	f1c3 020a 	rsb	r2, r3, #10
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	3354      	adds	r3, #84	; 0x54
 8001424:	224c      	movs	r2, #76	; 0x4c
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fdb1 	bl	8002f90 <memset>
 800142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <prvInitialiseNewTask+0x13c>)
 8001432:	659a      	str	r2, [r3, #88]	; 0x58
 8001434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <prvInitialiseNewTask+0x140>)
 8001438:	65da      	str	r2, [r3, #92]	; 0x5c
 800143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <prvInitialiseNewTask+0x144>)
 800143e:	661a      	str	r2, [r3, #96]	; 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	69b8      	ldr	r0, [r7, #24]
 8001446:	f001 f98b 	bl	8002760 <pxPortInitialiseStack>
 800144a:	4602      	mov	r2, r0
 800144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <prvInitialiseNewTask+0x134>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800145a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20003eb0 	.word	0x20003eb0
 8001468:	20003f18 	.word	0x20003f18
 800146c:	20003f80 	.word	0x20003f80

08001470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001478:	f001 fa9c 	bl	80029b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <prvAddNewTaskToReadyList+0x114>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a40      	ldr	r2, [pc, #256]	; (8001584 <prvAddNewTaskToReadyList+0x114>)
 8001484:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001486:	4b40      	ldr	r3, [pc, #256]	; (8001588 <prvAddNewTaskToReadyList+0x118>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800148e:	4a3e      	ldr	r2, [pc, #248]	; (8001588 <prvAddNewTaskToReadyList+0x118>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001494:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <prvAddNewTaskToReadyList+0x114>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d110      	bne.n	80014be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800149c:	f000 fd92 	bl	8001fc4 <prvInitialiseTaskLists>
 80014a0:	e00d      	b.n	80014be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <prvAddNewTaskToReadyList+0x11c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <prvAddNewTaskToReadyList+0x118>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d802      	bhi.n	80014be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80014b8:	4a33      	ldr	r2, [pc, #204]	; (8001588 <prvAddNewTaskToReadyList+0x118>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <prvAddNewTaskToReadyList+0x120>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a32      	ldr	r2, [pc, #200]	; (8001590 <prvAddNewTaskToReadyList+0x120>)
 80014c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <prvAddNewTaskToReadyList+0x120>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <prvAddNewTaskToReadyList+0x124>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d903      	bls.n	80014e4 <prvAddNewTaskToReadyList+0x74>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <prvAddNewTaskToReadyList+0x124>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e8:	492b      	ldr	r1, [pc, #172]	; (8001598 <prvAddNewTaskToReadyList+0x128>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	3204      	adds	r2, #4
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1d1a      	adds	r2, r3, #4
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <prvAddNewTaskToReadyList+0x128>)
 8001528:	441a      	add	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001532:	4919      	ldr	r1, [pc, #100]	; (8001598 <prvAddNewTaskToReadyList+0x128>)
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	4815      	ldr	r0, [pc, #84]	; (8001598 <prvAddNewTaskToReadyList+0x128>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4403      	add	r3, r0
 800154e:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001550:	f001 fa60 	bl	8002a14 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <prvAddNewTaskToReadyList+0x11c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00e      	beq.n	800157a <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <prvAddNewTaskToReadyList+0x118>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	429a      	cmp	r2, r3
 8001568:	d207      	bcs.n	800157a <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <prvAddNewTaskToReadyList+0x12c>)
 800156c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f3bf 8f4f 	dsb	sy
 8001576:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000224 	.word	0x20000224
 8001588:	200000e8 	.word	0x200000e8
 800158c:	20000230 	.word	0x20000230
 8001590:	20000240 	.word	0x20000240
 8001594:	2000022c 	.word	0x2000022c
 8001598:	200000ec 	.word	0x200000ec
 800159c:	e000ed04 	.word	0xe000ed04

080015a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d017      	beq.n	80015e2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <vTaskDelay+0x60>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <vTaskDelay+0x30>
	__asm volatile
 80015ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015be:	f383 8811 	msr	BASEPRI, r3
 80015c2:	f3bf 8f6f 	isb	sy
 80015c6:	f3bf 8f4f 	dsb	sy
 80015ca:	60bb      	str	r3, [r7, #8]
}
 80015cc:	bf00      	nop
 80015ce:	e7fe      	b.n	80015ce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80015d0:	f000 f874 	bl	80016bc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fdb4 	bl	8002144 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80015dc:	f000 f87c 	bl	80016d8 <xTaskResumeAll>
 80015e0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d107      	bne.n	80015f8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <vTaskDelay+0x64>)
 80015ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	f3bf 8f4f 	dsb	sy
 80015f4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000024c 	.word	0x2000024c
 8001604:	e000ed04 	.word	0xe000ed04

08001608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <vTaskStartScheduler+0x90>)
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2300      	movs	r3, #0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	4920      	ldr	r1, [pc, #128]	; (800169c <vTaskStartScheduler+0x94>)
 800161c:	4820      	ldr	r0, [pc, #128]	; (80016a0 <vTaskStartScheduler+0x98>)
 800161e:	f7ff fe3d 	bl	800129c <xTaskCreate>
 8001622:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d102      	bne.n	8001630 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800162a:	f000 fdf9 	bl	8002220 <xTimerCreateTimerTask>
 800162e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d11b      	bne.n	800166e <vTaskStartScheduler+0x66>
	__asm volatile
 8001636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163a:	f383 8811 	msr	BASEPRI, r3
 800163e:	f3bf 8f6f 	isb	sy
 8001642:	f3bf 8f4f 	dsb	sy
 8001646:	60bb      	str	r3, [r7, #8]
}
 8001648:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <vTaskStartScheduler+0x9c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3354      	adds	r3, #84	; 0x54
 8001650:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <vTaskStartScheduler+0xa0>)
 8001652:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <vTaskStartScheduler+0xa4>)
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <vTaskStartScheduler+0xa8>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <vTaskStartScheduler+0xac>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001668:	f001 f902 	bl	8002870 <xPortStartScheduler>
 800166c:	e00e      	b.n	800168c <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d10a      	bne.n	800168c <vTaskStartScheduler+0x84>
	__asm volatile
 8001676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167a:	f383 8811 	msr	BASEPRI, r3
 800167e:	f3bf 8f6f 	isb	sy
 8001682:	f3bf 8f4f 	dsb	sy
 8001686:	607b      	str	r3, [r7, #4]
}
 8001688:	bf00      	nop
 800168a:	e7fe      	b.n	800168a <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <vTaskStartScheduler+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000248 	.word	0x20000248
 800169c:	08003188 	.word	0x08003188
 80016a0:	08001f95 	.word	0x08001f95
 80016a4:	200000e8 	.word	0x200000e8
 80016a8:	20000058 	.word	0x20000058
 80016ac:	20000244 	.word	0x20000244
 80016b0:	20000230 	.word	0x20000230
 80016b4:	20000228 	.word	0x20000228
 80016b8:	20000004 	.word	0x20000004

080016bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <vTaskSuspendAll+0x18>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <vTaskSuspendAll+0x18>)
 80016c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	2000024c 	.word	0x2000024c

080016d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80016e6:	4b71      	ldr	r3, [pc, #452]	; (80018ac <xTaskResumeAll+0x1d4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <xTaskResumeAll+0x2c>
	__asm volatile
 80016ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f2:	f383 8811 	msr	BASEPRI, r3
 80016f6:	f3bf 8f6f 	isb	sy
 80016fa:	f3bf 8f4f 	dsb	sy
 80016fe:	607b      	str	r3, [r7, #4]
}
 8001700:	bf00      	nop
 8001702:	e7fe      	b.n	8001702 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001704:	f001 f956 	bl	80029b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <xTaskResumeAll+0x1d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <xTaskResumeAll+0x1d4>)
 8001710:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001712:	4b66      	ldr	r3, [pc, #408]	; (80018ac <xTaskResumeAll+0x1d4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 80c1 	bne.w	800189e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800171c:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <xTaskResumeAll+0x1d8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80bc 	beq.w	800189e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001726:	e08b      	b.n	8001840 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001728:	4b62      	ldr	r3, [pc, #392]	; (80018b4 <xTaskResumeAll+0x1dc>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	6a12      	ldr	r2, [r2, #32]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	69d2      	ldr	r2, [r2, #28]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3318      	adds	r3, #24
 8001752:	429a      	cmp	r2, r3
 8001754:	d103      	bne.n	800175e <xTaskResumeAll+0x86>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	68d2      	ldr	r2, [r2, #12]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	6892      	ldr	r2, [r2, #8]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3304      	adds	r3, #4
 8001790:	429a      	cmp	r2, r3
 8001792:	d103      	bne.n	800179c <xTaskResumeAll+0xc4>
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1e5a      	subs	r2, r3, #1
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <xTaskResumeAll+0x1e0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d903      	bls.n	80017c0 <xTaskResumeAll+0xe8>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <xTaskResumeAll+0x1e0>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	493d      	ldr	r1, [pc, #244]	; (80018bc <xTaskResumeAll+0x1e4>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	3204      	adds	r2, #4
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	1d1a      	adds	r2, r3, #4
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <xTaskResumeAll+0x1e4>)
 8001804:	441a      	add	r2, r3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	492b      	ldr	r1, [pc, #172]	; (80018bc <xTaskResumeAll+0x1e4>)
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1c59      	adds	r1, r3, #1
 800181e:	4827      	ldr	r0, [pc, #156]	; (80018bc <xTaskResumeAll+0x1e4>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4403      	add	r3, r0
 800182a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <xTaskResumeAll+0x1e8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <xTaskResumeAll+0x1ec>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <xTaskResumeAll+0x1dc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f af6f 	bne.w	8001728 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001850:	f000 fc3e 	bl	80020d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <xTaskResumeAll+0x1f0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d010      	beq.n	8001882 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001860:	f000 f852 	bl	8001908 <xTaskIncrementTick>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <xTaskResumeAll+0x1ec>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3b01      	subs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f1      	bne.n	8001860 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <xTaskResumeAll+0x1f0>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <xTaskResumeAll+0x1ec>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <xTaskResumeAll+0x1f4>)
 8001890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800189e:	f001 f8b9 	bl	8002a14 <vPortExitCritical>

    return xAlreadyYielded;
 80018a2:	69bb      	ldr	r3, [r7, #24]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000024c 	.word	0x2000024c
 80018b0:	20000224 	.word	0x20000224
 80018b4:	200001e4 	.word	0x200001e4
 80018b8:	2000022c 	.word	0x2000022c
 80018bc:	200000ec 	.word	0x200000ec
 80018c0:	200000e8 	.word	0x200000e8
 80018c4:	20000238 	.word	0x20000238
 80018c8:	20000234 	.word	0x20000234
 80018cc:	e000ed04 	.word	0xe000ed04

080018d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <xTaskGetTickCount+0x1c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000228 	.word	0x20000228

080018f0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <uxTaskGetNumberOfTasks+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000224 	.word	0x20000224

08001908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001912:	4b7e      	ldr	r3, [pc, #504]	; (8001b0c <xTaskIncrementTick+0x204>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80ed 	bne.w	8001af6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800191c:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <xTaskIncrementTick+0x208>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001924:	4a7a      	ldr	r2, [pc, #488]	; (8001b10 <xTaskIncrementTick+0x208>)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d120      	bne.n	8001972 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001930:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <xTaskIncrementTick+0x20c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <xTaskIncrementTick+0x48>
	__asm volatile
 800193a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	607b      	str	r3, [r7, #4]
}
 800194c:	bf00      	nop
 800194e:	e7fe      	b.n	800194e <xTaskIncrementTick+0x46>
 8001950:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <xTaskIncrementTick+0x20c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <xTaskIncrementTick+0x210>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <xTaskIncrementTick+0x20c>)
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4a6e      	ldr	r2, [pc, #440]	; (8001b18 <xTaskIncrementTick+0x210>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <xTaskIncrementTick+0x214>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a6c      	ldr	r2, [pc, #432]	; (8001b1c <xTaskIncrementTick+0x214>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	f000 fbaf 	bl	80020d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001972:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <xTaskIncrementTick+0x218>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a3a      	ldr	r2, [r7, #32]
 8001978:	429a      	cmp	r2, r3
 800197a:	f0c0 80a7 	bcc.w	8001acc <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800197e:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <xTaskIncrementTick+0x20c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d104      	bne.n	8001992 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <xTaskIncrementTick+0x218>)
 800198a:	f04f 32ff 	mov.w	r2, #4294967295
 800198e:	601a      	str	r2, [r3, #0]
                    break;
 8001990:	e09c      	b.n	8001acc <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001992:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <xTaskIncrementTick+0x20c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80019a2:	6a3a      	ldr	r2, [r7, #32]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d203      	bcs.n	80019b2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80019aa:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <xTaskIncrementTick+0x218>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80019b0:	e08c      	b.n	8001acc <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	68d2      	ldr	r2, [r2, #12]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	6892      	ldr	r2, [r2, #8]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	3304      	adds	r3, #4
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d103      	bne.n	80019e0 <xTaskIncrementTick+0xd8>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1e5a      	subs	r2, r3, #1
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01e      	beq.n	8001a36 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	6a12      	ldr	r2, [r2, #32]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	69d2      	ldr	r2, [r2, #28]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	3318      	adds	r3, #24
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d103      	bne.n	8001a26 <xTaskIncrementTick+0x11e>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <xTaskIncrementTick+0x21c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d903      	bls.n	8001a4a <xTaskIncrementTick+0x142>
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	4a37      	ldr	r2, [pc, #220]	; (8001b24 <xTaskIncrementTick+0x21c>)
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4e:	4936      	ldr	r1, [pc, #216]	; (8001b28 <xTaskIncrementTick+0x220>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	3204      	adds	r2, #4
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1d1a      	adds	r2, r3, #4
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4a26      	ldr	r2, [pc, #152]	; (8001b28 <xTaskIncrementTick+0x220>)
 8001a8e:	441a      	add	r2, r3
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	4923      	ldr	r1, [pc, #140]	; (8001b28 <xTaskIncrementTick+0x220>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1c59      	adds	r1, r3, #1
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <xTaskIncrementTick+0x220>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4403      	add	r3, r0
 8001ab4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <xTaskIncrementTick+0x224>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f67f af5c 	bls.w	800197e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aca:	e758      	b.n	800197e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <xTaskIncrementTick+0x224>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	4915      	ldr	r1, [pc, #84]	; (8001b28 <xTaskIncrementTick+0x220>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d901      	bls.n	8001ae8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <xTaskIncrementTick+0x228>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e004      	b.n	8001b00 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <xTaskIncrementTick+0x22c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <xTaskIncrementTick+0x22c>)
 8001afe:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000024c 	.word	0x2000024c
 8001b10:	20000228 	.word	0x20000228
 8001b14:	200001dc 	.word	0x200001dc
 8001b18:	200001e0 	.word	0x200001e0
 8001b1c:	2000023c 	.word	0x2000023c
 8001b20:	20000244 	.word	0x20000244
 8001b24:	2000022c 	.word	0x2000022c
 8001b28:	200000ec 	.word	0x200000ec
 8001b2c:	200000e8 	.word	0x200000e8
 8001b30:	20000238 	.word	0x20000238
 8001b34:	20000234 	.word	0x20000234

08001b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <vTaskSwitchContext+0xb0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <vTaskSwitchContext+0xb4>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001b4c:	e046      	b.n	8001bdc <vTaskSwitchContext+0xa4>
        xYieldPending = pdFALSE;
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <vTaskSwitchContext+0xb4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <vTaskSwitchContext+0xb8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e010      	b.n	8001b7e <vTaskSwitchContext+0x46>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <vTaskSwitchContext+0x40>
	__asm volatile
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	607b      	str	r3, [r7, #4]
}
 8001b74:	bf00      	nop
 8001b76:	e7fe      	b.n	8001b76 <vTaskSwitchContext+0x3e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	491d      	ldr	r1, [pc, #116]	; (8001bf4 <vTaskSwitchContext+0xbc>)
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0e4      	beq.n	8001b5c <vTaskSwitchContext+0x24>
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <vTaskSwitchContext+0xbc>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d104      	bne.n	8001bc2 <vTaskSwitchContext+0x8a>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <vTaskSwitchContext+0xc0>)
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <vTaskSwitchContext+0xb8>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <vTaskSwitchContext+0xc0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3354      	adds	r3, #84	; 0x54
 8001bd8:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <vTaskSwitchContext+0xc4>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	2000024c 	.word	0x2000024c
 8001bec:	20000238 	.word	0x20000238
 8001bf0:	2000022c 	.word	0x2000022c
 8001bf4:	200000ec 	.word	0x200000ec
 8001bf8:	200000e8 	.word	0x200000e8
 8001bfc:	20000058 	.word	0x20000058

08001c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	60fb      	str	r3, [r7, #12]
}
 8001c22:	bf00      	nop
 8001c24:	e7fe      	b.n	8001c24 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <vTaskPlaceOnEventList+0x44>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3318      	adds	r3, #24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe ff3b 	bl	8000aaa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c34:	2101      	movs	r1, #1
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f000 fa84 	bl	8002144 <prvAddCurrentTaskToDelayedList>
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200000e8 	.word	0x200000e8

08001c48 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	613b      	str	r3, [r7, #16]
}
 8001c6c:	bf00      	nop
 8001c6e:	e7fe      	b.n	8001c6e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	61da      	str	r2, [r3, #28]
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6892      	ldr	r2, [r2, #8]
 8001c86:	621a      	str	r2, [r3, #32]
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	3218      	adds	r2, #24
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f103 0218 	add.w	r2, r3, #24
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <vTaskPlaceOnEventListRestricted+0x88>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	68b8      	ldr	r0, [r7, #8]
 8001cc2:	f000 fa3f 	bl	8002144 <prvAddCurrentTaskToDelayedList>
    }
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200000e8 	.word	0x200000e8

08001cd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	60fb      	str	r3, [r7, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	e7fe      	b.n	8001cfe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	6a3a      	ldr	r2, [r7, #32]
 8001d0c:	6a12      	ldr	r2, [r2, #32]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	69d2      	ldr	r2, [r2, #28]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	3318      	adds	r3, #24
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d103      	bne.n	8001d2e <xTaskRemoveFromEventList+0x5a>
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d3e:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <xTaskRemoveFromEventList+0x198>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d15f      	bne.n	8001e06 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	68d2      	ldr	r2, [r2, #12]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	6a3a      	ldr	r2, [r7, #32]
 8001d5c:	6892      	ldr	r2, [r2, #8]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	3304      	adds	r3, #4
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d103      	bne.n	8001d74 <xTaskRemoveFromEventList+0xa0>
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <xTaskRemoveFromEventList+0x19c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d903      	bls.n	8001d98 <xTaskRemoveFromEventList+0xc4>
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <xTaskRemoveFromEventList+0x19c>)
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <xTaskRemoveFromEventList+0x1a0>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	6a3a      	ldr	r2, [r7, #32]
 8001dc2:	3204      	adds	r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <xTaskRemoveFromEventList+0x1a0>)
 8001ddc:	441a      	add	r2, r3
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	4923      	ldr	r1, [pc, #140]	; (8001e74 <xTaskRemoveFromEventList+0x1a0>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	481f      	ldr	r0, [pc, #124]	; (8001e74 <xTaskRemoveFromEventList+0x1a0>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4403      	add	r3, r0
 8001e02:	6019      	str	r1, [r3, #0]
 8001e04:	e01b      	b.n	8001e3e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <xTaskRemoveFromEventList+0x1a4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	61da      	str	r2, [r3, #28]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	621a      	str	r2, [r3, #32]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	6a3a      	ldr	r2, [r7, #32]
 8001e20:	3218      	adds	r2, #24
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f103 0218 	add.w	r2, r3, #24
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <xTaskRemoveFromEventList+0x1a4>)
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <xTaskRemoveFromEventList+0x1a4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <xTaskRemoveFromEventList+0x1a4>)
 8001e3c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <xTaskRemoveFromEventList+0x1a8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d905      	bls.n	8001e58 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <xTaskRemoveFromEventList+0x1ac>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e001      	b.n	8001e5c <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	372c      	adds	r7, #44	; 0x2c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000024c 	.word	0x2000024c
 8001e70:	2000022c 	.word	0x2000022c
 8001e74:	200000ec 	.word	0x200000ec
 8001e78:	200001e4 	.word	0x200001e4
 8001e7c:	200000e8 	.word	0x200000e8
 8001e80:	20000238 	.word	0x20000238

08001e84 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <vTaskInternalSetTimeOutState+0x24>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <vTaskInternalSetTimeOutState+0x28>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	2000023c 	.word	0x2000023c
 8001eac:	20000228 	.word	0x20000228

08001eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	613b      	str	r3, [r7, #16]
}
 8001ed2:	bf00      	nop
 8001ed4:	e7fe      	b.n	8001ed4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	60fb      	str	r3, [r7, #12]
}
 8001eee:	bf00      	nop
 8001ef0:	e7fe      	b.n	8001ef0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001ef2:	f000 fd5f 	bl	80029b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <xTaskCheckForTimeOut+0xc4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d102      	bne.n	8001f16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e026      	b.n	8001f64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <xTaskCheckForTimeOut+0xc8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d00a      	beq.n	8001f38 <xTaskCheckForTimeOut+0x88>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d305      	bcc.n	8001f38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e015      	b.n	8001f64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d20b      	bcs.n	8001f5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1ad2      	subs	r2, r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff98 	bl	8001e84 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e004      	b.n	8001f64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f64:	f000 fd56 	bl	8002a14 <vPortExitCritical>

    return xReturn;
 8001f68:	69fb      	ldr	r3, [r7, #28]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000228 	.word	0x20000228
 8001f78:	2000023c 	.word	0x2000023c

08001f7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <vTaskMissedYield+0x14>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	20000238 	.word	0x20000238

08001f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f9c:	f000 f852 	bl	8002044 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <prvIdleTask+0x28>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d9f9      	bls.n	8001f9c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <prvIdleTask+0x2c>)
 8001faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001fb8:	e7f0      	b.n	8001f9c <prvIdleTask+0x8>
 8001fba:	bf00      	nop
 8001fbc:	200000ec 	.word	0x200000ec
 8001fc0:	e000ed04 	.word	0xe000ed04

08001fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	e00c      	b.n	8001fea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <prvInitialiseTaskLists+0x60>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fd36 	bl	8000a50 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d9ef      	bls.n	8001fd0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <prvInitialiseTaskLists+0x64>)
 8001ff2:	f7fe fd2d 	bl	8000a50 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <prvInitialiseTaskLists+0x68>)
 8001ff8:	f7fe fd2a 	bl	8000a50 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <prvInitialiseTaskLists+0x6c>)
 8001ffe:	f7fe fd27 	bl	8000a50 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002002:	480c      	ldr	r0, [pc, #48]	; (8002034 <prvInitialiseTaskLists+0x70>)
 8002004:	f7fe fd24 	bl	8000a50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <prvInitialiseTaskLists+0x74>)
 800200a:	f7fe fd21 	bl	8000a50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <prvInitialiseTaskLists+0x78>)
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <prvInitialiseTaskLists+0x64>)
 8002012:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <prvInitialiseTaskLists+0x7c>)
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <prvInitialiseTaskLists+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200000ec 	.word	0x200000ec
 8002028:	200001b4 	.word	0x200001b4
 800202c:	200001c8 	.word	0x200001c8
 8002030:	200001e4 	.word	0x200001e4
 8002034:	200001f8 	.word	0x200001f8
 8002038:	20000210 	.word	0x20000210
 800203c:	200001dc 	.word	0x200001dc
 8002040:	200001e0 	.word	0x200001e0

08002044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800204a:	e019      	b.n	8002080 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800204c:	f000 fcb2 	bl	80029b4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <prvCheckTasksWaitingTermination+0x50>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fd5d 	bl	8000b1c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <prvCheckTasksWaitingTermination+0x54>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3b01      	subs	r3, #1
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <prvCheckTasksWaitingTermination+0x54>)
 800206a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <prvCheckTasksWaitingTermination+0x58>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <prvCheckTasksWaitingTermination+0x58>)
 8002074:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002076:	f000 fccd 	bl	8002a14 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f810 	bl	80020a0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <prvCheckTasksWaitingTermination+0x58>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e1      	bne.n	800204c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200001f8 	.word	0x200001f8
 8002098:	20000224 	.word	0x20000224
 800209c:	2000020c 	.word	0x2000020c

080020a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <prvDeleteTCB+0x2c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3354      	adds	r3, #84	; 0x54
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 ff76 	bl	8002fa0 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fe57 	bl	8002d6c <vPortFree>
            vPortFree( pxTCB );
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fe54 	bl	8002d6c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200000e8 	.word	0x200000e8

080020d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <prvResetNextTaskUnblockTime+0x30>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <prvResetNextTaskUnblockTime+0x34>)
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020e6:	e005      	b.n	80020f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <prvResetNextTaskUnblockTime+0x30>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <prvResetNextTaskUnblockTime+0x34>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200001dc 	.word	0x200001dc
 8002104:	20000244 	.word	0x20000244

08002108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <xTaskGetSchedulerState+0x34>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002116:	2301      	movs	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	e008      	b.n	800212e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <xTaskGetSchedulerState+0x38>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002124:	2302      	movs	r3, #2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	e001      	b.n	800212e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800212e:	687b      	ldr	r3, [r7, #4]
    }
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	20000230 	.word	0x20000230
 8002140:	2000024c 	.word	0x2000024c

08002144 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3304      	adds	r3, #4
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fcde 	bl	8000b1c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002166:	d124      	bne.n	80021b2 <prvAddCurrentTaskToDelayedList+0x6e>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d021      	beq.n	80021b2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	6892      	ldr	r2, [r2, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	3204      	adds	r2, #4
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1d1a      	adds	r2, r3, #4
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a19      	ldr	r2, [pc, #100]	; (8002210 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80021b0:	e026      	b.n	8002200 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d209      	bcs.n	80021de <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <prvAddCurrentTaskToDelayedList+0xd0>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f7fe fc67 	bl	8000aaa <vListInsert>
}
 80021dc:	e010      	b.n	8002200 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <prvAddCurrentTaskToDelayedList+0xd4>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <prvAddCurrentTaskToDelayedList+0xc8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7fe fc5d 	bl	8000aaa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <prvAddCurrentTaskToDelayedList+0xd8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d202      	bcs.n	8002200 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <prvAddCurrentTaskToDelayedList+0xd8>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000228 	.word	0x20000228
 800220c:	200000e8 	.word	0x200000e8
 8002210:	20000210 	.word	0x20000210
 8002214:	200001e0 	.word	0x200001e0
 8002218:	200001dc 	.word	0x200001dc
 800221c:	20000244 	.word	0x20000244

08002220 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800222a:	f000 fa63 	bl	80026f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <xTimerCreateTimerTask+0x54>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <xTimerCreateTimerTask+0x58>)
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2302      	movs	r3, #2
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002244:	490d      	ldr	r1, [pc, #52]	; (800227c <xTimerCreateTimerTask+0x5c>)
 8002246:	480e      	ldr	r0, [pc, #56]	; (8002280 <xTimerCreateTimerTask+0x60>)
 8002248:	f7ff f828 	bl	800129c <xTaskCreate>
 800224c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	603b      	str	r3, [r7, #0]
}
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800226a:	687b      	ldr	r3, [r7, #4]
    }
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000280 	.word	0x20000280
 8002278:	20000284 	.word	0x20000284
 800227c:	08003190 	.word	0x08003190
 8002280:	08002329 	.word	0x08002329

08002284 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002290:	e008      	b.n	80022a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	18d1      	adds	r1, r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8dd 	bl	8002470 <prvInsertTimerInActiveList>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ea      	bne.n	8002292 <prvReloadTimer+0xe>
        }
    }
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <prvProcessExpiredTimer+0x5c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3304      	adds	r3, #4
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fc1b 	bl	8000b1c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff ffc3 	bl	8002284 <prvReloadTimer>
 80022fe:	e008      	b.n	8002312 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	4798      	blx	r3
    }
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000278 	.word	0x20000278

08002328 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f857 	bl	80023e8 <prvGetNextExpireTime>
 800233a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4619      	mov	r1, r3
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f803 	bl	800234c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002346:	f000 f8d5 	bl	80024f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800234a:	e7f1      	b.n	8002330 <prvTimerTask+0x8>

0800234c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002356:	f7ff f9b1 	bl	80016bc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f866 	bl	8002430 <prvSampleTimeNow>
 8002364:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d130      	bne.n	80023ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <prvProcessTimerOrBlockTask+0x3c>
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	d806      	bhi.n	8002388 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800237a:	f7ff f9ad 	bl	80016d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800237e:	68f9      	ldr	r1, [r7, #12]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ffa1 	bl	80022c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002386:	e024      	b.n	80023d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <prvProcessTimerOrBlockTask+0x90>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <prvProcessTimerOrBlockTask+0x50>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <prvProcessTimerOrBlockTask+0x52>
 800239c:	2300      	movs	r3, #0
 800239e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <prvProcessTimerOrBlockTask+0x94>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe ff41 	bl	8001234 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023b2:	f7ff f991 	bl	80016d8 <xTaskResumeAll>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <prvProcessTimerOrBlockTask+0x98>)
 80023be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	f3bf 8f6f 	isb	sy
    }
 80023cc:	e001      	b.n	80023d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80023ce:	f7ff f983 	bl	80016d8 <xTaskResumeAll>
    }
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000027c 	.word	0x2000027c
 80023e0:	20000280 	.word	0x20000280
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <prvGetNextExpireTime+0x44>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <prvGetNextExpireTime+0x16>
 80023fa:	2201      	movs	r2, #1
 80023fc:	e000      	b.n	8002400 <prvGetNextExpireTime+0x18>
 80023fe:	2200      	movs	r2, #0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <prvGetNextExpireTime+0x44>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e001      	b.n	800241c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800241c:	68fb      	ldr	r3, [r7, #12]
    }
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000278 	.word	0x20000278

08002430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002438:	f7ff fa4a 	bl	80018d0 <xTaskGetTickCount>
 800243c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <prvSampleTimeNow+0x3c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d205      	bcs.n	8002454 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002448:	f000 f92e 	bl	80026a8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e002      	b.n	800245a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <prvSampleTimeNow+0x3c>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002460:	68fb      	ldr	r3, [r7, #12]
    }
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000288 	.word	0x20000288

08002470 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d812      	bhi.n	80024bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	1ad2      	subs	r2, r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e01b      	b.n	80024e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <prvInsertTimerInActiveList+0x7c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7fe faf8 	bl	8000aaa <vListInsert>
 80024ba:	e012      	b.n	80024e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d206      	bcs.n	80024d2 <prvInsertTimerInActiveList+0x62>
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d302      	bcc.n	80024d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e007      	b.n	80024e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <prvInsertTimerInActiveList+0x80>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3304      	adds	r3, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7fe fae4 	bl	8000aaa <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024e2:	697b      	ldr	r3, [r7, #20]
    }
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000027c 	.word	0x2000027c
 80024f0:	20000278 	.word	0x20000278

080024f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024fa:	e0c2      	b.n	8002682 <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da18      	bge.n	8002534 <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	3304      	adds	r3, #4
 8002506:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	61bb      	str	r3, [r7, #24]
}
 8002520:	bf00      	nop
 8002522:	e7fe      	b.n	8002522 <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	6850      	ldr	r0, [r2, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	4611      	mov	r1, r2
 8002532:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f2c0 80a3 	blt.w	8002682 <prvProcessReceivedCommands+0x18e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	3304      	adds	r3, #4
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fae5 	bl	8000b1c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002552:	463b      	mov	r3, r7
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff6b 	bl	8002430 <prvSampleTimeNow>
 800255a:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 808d 	bhi.w	8002680 <prvProcessReceivedCommands+0x18c>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <prvProcessReceivedCommands+0x78>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	08002591 	.word	0x08002591
 8002570:	08002591 	.word	0x08002591
 8002574:	080025f9 	.word	0x080025f9
 8002578:	0800260d 	.word	0x0800260d
 800257c:	08002657 	.word	0x08002657
 8002580:	08002591 	.word	0x08002591
 8002584:	08002591 	.word	0x08002591
 8002588:	080025f9 	.word	0x080025f9
 800258c:	0800260d 	.word	0x0800260d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	18d1      	adds	r1, r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	6a38      	ldr	r0, [r7, #32]
 80025b0:	f7ff ff5e 	bl	8002470 <prvInsertTimerInActiveList>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	4619      	mov	r1, r3
 80025d4:	6a38      	ldr	r0, [r7, #32]
 80025d6:	f7ff fe55 	bl	8002284 <prvReloadTimer>
 80025da:	e008      	b.n	80025ee <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	6a38      	ldr	r0, [r7, #32]
 80025f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80025f6:	e044      	b.n	8002682 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800260a:	e03a      	b.n	8002682 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	617b      	str	r3, [r7, #20]
}
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	18d1      	adds	r1, r2, r3
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	6a38      	ldr	r0, [r7, #32]
 8002650:	f7ff ff0e 	bl	8002470 <prvInsertTimerInActiveList>
                        break;
 8002654:	e015      	b.n	8002682 <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 8002664:	6a38      	ldr	r0, [r7, #32]
 8002666:	f000 fb81 	bl	8002d6c <vPortFree>
 800266a:	e00a      	b.n	8002682 <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800267e:	e000      	b.n	8002682 <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002680:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <prvProcessReceivedCommands+0x1b0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1d39      	adds	r1, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fc16 	bl	8000ebc <xQueueReceive>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	f47f af32 	bne.w	80024fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000280 	.word	0x20000280

080026a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026ae:	e009      	b.n	80026c4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <prvSwitchTimerLists+0x44>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80026ba:	f04f 31ff 	mov.w	r1, #4294967295
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	f7ff fe02 	bl	80022c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <prvSwitchTimerLists+0x44>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <prvSwitchTimerLists+0x44>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <prvSwitchTimerLists+0x48>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <prvSwitchTimerLists+0x44>)
 80026da:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <prvSwitchTimerLists+0x48>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
    }
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000278 	.word	0x20000278
 80026f0:	2000027c 	.word	0x2000027c

080026f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80026f8:	f000 f95c 	bl	80029b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <prvCheckForValidListAndQueue+0x54>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11d      	bne.n	8002740 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002704:	4811      	ldr	r0, [pc, #68]	; (800274c <prvCheckForValidListAndQueue+0x58>)
 8002706:	f7fe f9a3 	bl	8000a50 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800270a:	4811      	ldr	r0, [pc, #68]	; (8002750 <prvCheckForValidListAndQueue+0x5c>)
 800270c:	f7fe f9a0 	bl	8000a50 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <prvCheckForValidListAndQueue+0x60>)
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <prvCheckForValidListAndQueue+0x58>)
 8002714:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <prvCheckForValidListAndQueue+0x64>)
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <prvCheckForValidListAndQueue+0x5c>)
 800271a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800271c:	2200      	movs	r2, #0
 800271e:	2110      	movs	r1, #16
 8002720:	200a      	movs	r0, #10
 8002722:	f7fe fab5 	bl	8000c90 <xQueueGenericCreate>
 8002726:	4603      	mov	r3, r0
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <prvCheckForValidListAndQueue+0x54>)
 800272a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <prvCheckForValidListAndQueue+0x54>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <prvCheckForValidListAndQueue+0x54>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4908      	ldr	r1, [pc, #32]	; (800275c <prvCheckForValidListAndQueue+0x68>)
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fd2c 	bl	8001198 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002740:	f000 f968 	bl	8002a14 <vPortExitCritical>
    }
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000280 	.word	0x20000280
 800274c:	20000250 	.word	0x20000250
 8002750:	20000264 	.word	0x20000264
 8002754:	20000278 	.word	0x20000278
 8002758:	2000027c 	.word	0x2000027c
 800275c:	08003198 	.word	0x08003198

08002760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3b04      	subs	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3b04      	subs	r3, #4
 800277e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f023 0201 	bic.w	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3b04      	subs	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <pxPortInitialiseStack+0x64>)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3b14      	subs	r3, #20
 800279a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b04      	subs	r3, #4
 80027a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f06f 0202 	mvn.w	r2, #2
 80027ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b20      	subs	r3, #32
 80027b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	080027c9 	.word	0x080027c9

080027c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <prvTaskExitError+0x54>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d00a      	beq.n	80027f2 <prvTaskExitError+0x2a>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60fb      	str	r3, [r7, #12]
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <prvTaskExitError+0x28>
	__asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	60bb      	str	r3, [r7, #8]
}
 8002804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002806:	bf00      	nop
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0fc      	beq.n	8002808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	20000008 	.word	0x20000008

08002820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <pxCurrentTCBConst2>)
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	6808      	ldr	r0, [r1, #0]
 8002826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282a:	f380 8809 	msr	PSP, r0
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f380 8811 	msr	BASEPRI, r0
 800283a:	4770      	bx	lr
 800283c:	f3af 8000 	nop.w

08002840 <pxCurrentTCBConst2>:
 8002840:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop

08002848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <prvPortStartFirstTask+0x24>)
 800284a:	6800      	ldr	r0, [r0, #0]
 800284c:	6800      	ldr	r0, [r0, #0]
 800284e:	f380 8808 	msr	MSP, r0
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f380 8814 	msr	CONTROL, r0
 800285a:	b662      	cpsie	i
 800285c:	b661      	cpsie	f
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	df00      	svc	0
 8002868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800286a:	bf00      	nop
 800286c:	e000ed08 	.word	0xe000ed08

08002870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <xPortStartScheduler+0x120>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a46      	ldr	r2, [pc, #280]	; (8002994 <xPortStartScheduler+0x124>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10a      	bne.n	8002896 <xPortStartScheduler+0x26>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	613b      	str	r3, [r7, #16]
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002896:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <xPortStartScheduler+0x120>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a3f      	ldr	r2, [pc, #252]	; (8002998 <xPortStartScheduler+0x128>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10a      	bne.n	80028b6 <xPortStartScheduler+0x46>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	60fb      	str	r3, [r7, #12]
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <xPortStartScheduler+0x12c>)
 80028b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	22ff      	movs	r2, #255	; 0xff
 80028c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <xPortStartScheduler+0x130>)
 80028dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <xPortStartScheduler+0x134>)
 80028e0:	2207      	movs	r2, #7
 80028e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028e4:	e009      	b.n	80028fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <xPortStartScheduler+0x134>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	4a2d      	ldr	r2, [pc, #180]	; (80029a4 <xPortStartScheduler+0x134>)
 80028ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d0ef      	beq.n	80028e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <xPortStartScheduler+0x134>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	d00a      	beq.n	8002928 <xPortStartScheduler+0xb8>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	60bb      	str	r3, [r7, #8]
}
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <xPortStartScheduler+0x134>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <xPortStartScheduler+0x134>)
 8002930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <xPortStartScheduler+0x134>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800293a:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <xPortStartScheduler+0x134>)
 800293c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <xPortStartScheduler+0x138>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <xPortStartScheduler+0x138>)
 800294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <xPortStartScheduler+0x138>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <xPortStartScheduler+0x138>)
 8002958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800295c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800295e:	f000 f8dd 	bl	8002b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <xPortStartScheduler+0x13c>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002968:	f000 f8fc 	bl	8002b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <xPortStartScheduler+0x140>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <xPortStartScheduler+0x140>)
 8002972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002978:	f7ff ff66 	bl	8002848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800297c:	f7ff f8dc 	bl	8001b38 <vTaskSwitchContext>
	prvTaskExitError();
 8002980:	f7ff ff22 	bl	80027c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00
 8002994:	410fc271 	.word	0x410fc271
 8002998:	410fc270 	.word	0x410fc270
 800299c:	e000e400 	.word	0xe000e400
 80029a0:	2000028c 	.word	0x2000028c
 80029a4:	20000290 	.word	0x20000290
 80029a8:	e000ed20 	.word	0xe000ed20
 80029ac:	20000008 	.word	0x20000008
 80029b0:	e000ef34 	.word	0xe000ef34

080029b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
	__asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	607b      	str	r3, [r7, #4]
}
 80029cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <vPortEnterCritical+0x58>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <vPortEnterCritical+0x58>)
 80029d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <vPortEnterCritical+0x58>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10f      	bne.n	8002a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <vPortEnterCritical+0x5c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	603b      	str	r3, [r7, #0]
}
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <vPortEnterCritical+0x4a>
	}
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	e000ed04 	.word	0xe000ed04

08002a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <vPortExitCritical+0x50>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <vPortExitCritical+0x24>
	__asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	607b      	str	r3, [r7, #4]
}
 8002a34:	bf00      	nop
 8002a36:	e7fe      	b.n	8002a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <vPortExitCritical+0x50>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <vPortExitCritical+0x50>)
 8002a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <vPortExitCritical+0x50>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <vPortExitCritical+0x42>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f383 8811 	msr	BASEPRI, r3
}
 8002a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000008 	.word	0x20000008
	...

08002a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a70:	f3ef 8009 	mrs	r0, PSP
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <pxCurrentTCBConst>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	f01e 0f10 	tst.w	lr, #16
 8002a80:	bf08      	it	eq
 8002a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8a:	6010      	str	r0, [r2, #0]
 8002a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a94:	f380 8811 	msr	BASEPRI, r0
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f7ff f84a 	bl	8001b38 <vTaskSwitchContext>
 8002aa4:	f04f 0000 	mov.w	r0, #0
 8002aa8:	f380 8811 	msr	BASEPRI, r0
 8002aac:	bc09      	pop	{r0, r3}
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	6808      	ldr	r0, [r1, #0]
 8002ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab6:	f01e 0f10 	tst.w	lr, #16
 8002aba:	bf08      	it	eq
 8002abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ac0:	f380 8809 	msr	PSP, r0
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w

08002ad0 <pxCurrentTCBConst>:
 8002ad0:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop

08002ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
}
 8002af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002af2:	f7fe ff09 	bl	8001908 <xTaskIncrementTick>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <xPortSysTickHandler+0x40>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f383 8811 	msr	BASEPRI, r3
}
 8002b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <vPortSetupTimerInterrupt+0x34>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <vPortSetupTimerInterrupt+0x38>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <vPortSetupTimerInterrupt+0x3c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <vPortSetupTimerInterrupt+0x40>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <vPortSetupTimerInterrupt+0x44>)
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <vPortSetupTimerInterrupt+0x34>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010
 8002b54:	e000e018 	.word	0xe000e018
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	10624dd3 	.word	0x10624dd3
 8002b60:	e000e014 	.word	0xe000e014

08002b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b74 <vPortEnableVFP+0x10>
 8002b68:	6801      	ldr	r1, [r0, #0]
 8002b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b6e:	6001      	str	r1, [r0, #0]
 8002b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b72:	bf00      	nop
 8002b74:	e000ed88 	.word	0xe000ed88

08002b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002b7e:	f3ef 8305 	mrs	r3, IPSR
 8002b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	d914      	bls.n	8002bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <vPortValidateInterruptPriority+0x70>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <vPortValidateInterruptPriority+0x74>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	7afa      	ldrb	r2, [r7, #11]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20a      	bcs.n	8002bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	607b      	str	r3, [r7, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <vPortValidateInterruptPriority+0x78>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <vPortValidateInterruptPriority+0x7c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d90a      	bls.n	8002bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	603b      	str	r3, [r7, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <vPortValidateInterruptPriority+0x60>
	}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e3f0 	.word	0xe000e3f0
 8002bec:	2000028c 	.word	0x2000028c
 8002bf0:	e000ed0c 	.word	0xe000ed0c
 8002bf4:	20000290 	.word	0x20000290

08002bf8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002c04:	f7fe fd5a 	bl	80016bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <pvPortMalloc+0x160>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002c10:	f000 f908 	bl	8002e24 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d012      	beq.n	8002c40 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	3308      	adds	r3, #8
 8002c26:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d804      	bhi.n	8002c3c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e001      	b.n	8002c40 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db70      	blt.n	8002d28 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d06d      	beq.n	8002d28 <pvPortMalloc+0x130>
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <pvPortMalloc+0x164>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d868      	bhi.n	8002d28 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c56:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <pvPortMalloc+0x168>)
 8002c58:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <pvPortMalloc+0x168>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c60:	e004      	b.n	8002c6c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d903      	bls.n	8002c7e <pvPortMalloc+0x86>
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f1      	bne.n	8002c62 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <pvPortMalloc+0x160>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d04f      	beq.n	8002d28 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4413      	add	r3, r2
 8002c90:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1ad2      	subs	r2, r2, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d91f      	bls.n	8002cea <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <pvPortMalloc+0xda>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	613b      	str	r3, [r7, #16]
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad2      	subs	r2, r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ce4:	6978      	ldr	r0, [r7, #20]
 8002ce6:	f000 f8f9 	bl	8002edc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <pvPortMalloc+0x164>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <pvPortMalloc+0x164>)
 8002cf6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <pvPortMalloc+0x164>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <pvPortMalloc+0x16c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d203      	bcs.n	8002d0c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <pvPortMalloc+0x164>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <pvPortMalloc+0x16c>)
 8002d0a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <pvPortMalloc+0x170>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <pvPortMalloc+0x170>)
 8002d26:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002d28:	f7fe fcd6 	bl	80016d8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <pvPortMalloc+0x154>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60fb      	str	r3, [r7, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <pvPortMalloc+0x152>
    return pvReturn;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20003e9c 	.word	0x20003e9c
 8002d5c:	20003ea0 	.word	0x20003ea0
 8002d60:	20003e94 	.word	0x20003e94
 8002d64:	20003ea4 	.word	0x20003ea4
 8002d68:	20003ea8 	.word	0x20003ea8

08002d6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d049      	beq.n	8002e12 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002d7e:	2308      	movs	r3, #8
 8002d80:	425b      	negs	r3, r3
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4413      	add	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <vPortFree+0x3e>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	60fb      	str	r3, [r7, #12]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <vPortFree+0x5c>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	60bb      	str	r3, [r7, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0fdb      	lsrs	r3, r3, #31
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d118      	bne.n	8002e12 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002dec:	f7fe fc66 	bl	80016bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <vPortFree+0xb0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <vPortFree+0xb0>)
 8002dfc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dfe:	6938      	ldr	r0, [r7, #16]
 8002e00:	f000 f86c 	bl	8002edc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <vPortFree+0xb4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <vPortFree+0xb4>)
 8002e0c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002e0e:	f7fe fc63 	bl	80016d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20003ea0 	.word	0x20003ea0
 8002e20:	20003eac 	.word	0x20003eac

08002e24 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002e2e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <prvHeapInit+0xa4>)
 8002e32:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3307      	adds	r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0307 	bic.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <prvHeapInit+0xa4>)
 8002e54:	4413      	add	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <prvHeapInit+0xa8>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <prvHeapInit+0xa8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002e70:	2208      	movs	r2, #8
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <prvHeapInit+0xac>)
 8002e84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <prvHeapInit+0xac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <prvHeapInit+0xac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <prvHeapInit+0xac>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <prvHeapInit+0xb0>)
 8002eb2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <prvHeapInit+0xb4>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000294 	.word	0x20000294
 8002ecc:	20003e94 	.word	0x20003e94
 8002ed0:	20003e9c 	.word	0x20003e9c
 8002ed4:	20003ea4 	.word	0x20003ea4
 8002ed8:	20003ea0 	.word	0x20003ea0

08002edc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <prvInsertBlockIntoFreeList+0xac>)
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e002      	b.n	8002ef0 <prvInsertBlockIntoFreeList+0x14>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d8f7      	bhi.n	8002eea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4413      	add	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d108      	bne.n	8002f1e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	441a      	add	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	441a      	add	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d118      	bne.n	8002f64 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <prvInsertBlockIntoFreeList+0xb0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d00d      	beq.n	8002f5a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e008      	b.n	8002f6c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <prvInsertBlockIntoFreeList+0xb0>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e003      	b.n	8002f6c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d002      	beq.n	8002f7a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20003e94 	.word	0x20003e94
 8002f8c:	20003e9c 	.word	0x20003e9c

08002f90 <memset>:
 8002f90:	4402      	add	r2, r0
 8002f92:	4603      	mov	r3, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <_reclaim_reent>:
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <_reclaim_reent+0xa8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4283      	cmp	r3, r0
 8002fa6:	b570      	push	{r4, r5, r6, lr}
 8002fa8:	4604      	mov	r4, r0
 8002faa:	d04b      	beq.n	8003044 <_reclaim_reent+0xa4>
 8002fac:	69c3      	ldr	r3, [r0, #28]
 8002fae:	b143      	cbz	r3, 8002fc2 <_reclaim_reent+0x22>
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d144      	bne.n	8003040 <_reclaim_reent+0xa0>
 8002fb6:	69e3      	ldr	r3, [r4, #28]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	b111      	cbz	r1, 8002fc2 <_reclaim_reent+0x22>
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 f879 	bl	80030b4 <_free_r>
 8002fc2:	6961      	ldr	r1, [r4, #20]
 8002fc4:	b111      	cbz	r1, 8002fcc <_reclaim_reent+0x2c>
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 f874 	bl	80030b4 <_free_r>
 8002fcc:	69e1      	ldr	r1, [r4, #28]
 8002fce:	b111      	cbz	r1, 8002fd6 <_reclaim_reent+0x36>
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f000 f86f 	bl	80030b4 <_free_r>
 8002fd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002fd8:	b111      	cbz	r1, 8002fe0 <_reclaim_reent+0x40>
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 f86a 	bl	80030b4 <_free_r>
 8002fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fe2:	b111      	cbz	r1, 8002fea <_reclaim_reent+0x4a>
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f000 f865 	bl	80030b4 <_free_r>
 8002fea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fec:	b111      	cbz	r1, 8002ff4 <_reclaim_reent+0x54>
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f000 f860 	bl	80030b4 <_free_r>
 8002ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002ff6:	b111      	cbz	r1, 8002ffe <_reclaim_reent+0x5e>
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f000 f85b 	bl	80030b4 <_free_r>
 8002ffe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003000:	b111      	cbz	r1, 8003008 <_reclaim_reent+0x68>
 8003002:	4620      	mov	r0, r4
 8003004:	f000 f856 	bl	80030b4 <_free_r>
 8003008:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800300a:	b111      	cbz	r1, 8003012 <_reclaim_reent+0x72>
 800300c:	4620      	mov	r0, r4
 800300e:	f000 f851 	bl	80030b4 <_free_r>
 8003012:	6a23      	ldr	r3, [r4, #32]
 8003014:	b1b3      	cbz	r3, 8003044 <_reclaim_reent+0xa4>
 8003016:	4620      	mov	r0, r4
 8003018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800301c:	4718      	bx	r3
 800301e:	5949      	ldr	r1, [r1, r5]
 8003020:	b941      	cbnz	r1, 8003034 <_reclaim_reent+0x94>
 8003022:	3504      	adds	r5, #4
 8003024:	69e3      	ldr	r3, [r4, #28]
 8003026:	2d80      	cmp	r5, #128	; 0x80
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	d1f8      	bne.n	800301e <_reclaim_reent+0x7e>
 800302c:	4620      	mov	r0, r4
 800302e:	f000 f841 	bl	80030b4 <_free_r>
 8003032:	e7c0      	b.n	8002fb6 <_reclaim_reent+0x16>
 8003034:	680e      	ldr	r6, [r1, #0]
 8003036:	4620      	mov	r0, r4
 8003038:	f000 f83c 	bl	80030b4 <_free_r>
 800303c:	4631      	mov	r1, r6
 800303e:	e7ef      	b.n	8003020 <_reclaim_reent+0x80>
 8003040:	2500      	movs	r5, #0
 8003042:	e7ef      	b.n	8003024 <_reclaim_reent+0x84>
 8003044:	bd70      	pop	{r4, r5, r6, pc}
 8003046:	bf00      	nop
 8003048:	20000058 	.word	0x20000058

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4d0d      	ldr	r5, [pc, #52]	; (8003084 <__libc_init_array+0x38>)
 8003050:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	2600      	movs	r6, #0
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	4d0b      	ldr	r5, [pc, #44]	; (800308c <__libc_init_array+0x40>)
 800305e:	4c0c      	ldr	r4, [pc, #48]	; (8003090 <__libc_init_array+0x44>)
 8003060:	f000 f880 	bl	8003164 <_init>
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	2600      	movs	r6, #0
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	080031a0 	.word	0x080031a0
 8003088:	080031a0 	.word	0x080031a0
 800308c:	080031a0 	.word	0x080031a0
 8003090:	080031a4 	.word	0x080031a4

08003094 <__retarget_lock_acquire_recursive>:
 8003094:	4770      	bx	lr

08003096 <__retarget_lock_release_recursive>:
 8003096:	4770      	bx	lr

08003098 <memcpy>:
 8003098:	440a      	add	r2, r1
 800309a:	4291      	cmp	r1, r2
 800309c:	f100 33ff 	add.w	r3, r0, #4294967295
 80030a0:	d100      	bne.n	80030a4 <memcpy+0xc>
 80030a2:	4770      	bx	lr
 80030a4:	b510      	push	{r4, lr}
 80030a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030ae:	4291      	cmp	r1, r2
 80030b0:	d1f9      	bne.n	80030a6 <memcpy+0xe>
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <_free_r>:
 80030b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030b6:	2900      	cmp	r1, #0
 80030b8:	d044      	beq.n	8003144 <_free_r+0x90>
 80030ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030be:	9001      	str	r0, [sp, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f1a1 0404 	sub.w	r4, r1, #4
 80030c6:	bfb8      	it	lt
 80030c8:	18e4      	addlt	r4, r4, r3
 80030ca:	f000 f83f 	bl	800314c <__malloc_lock>
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <_free_r+0x94>)
 80030d0:	9801      	ldr	r0, [sp, #4]
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	b933      	cbnz	r3, 80030e4 <_free_r+0x30>
 80030d6:	6063      	str	r3, [r4, #4]
 80030d8:	6014      	str	r4, [r2, #0]
 80030da:	b003      	add	sp, #12
 80030dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030e0:	f000 b83a 	b.w	8003158 <__malloc_unlock>
 80030e4:	42a3      	cmp	r3, r4
 80030e6:	d908      	bls.n	80030fa <_free_r+0x46>
 80030e8:	6825      	ldr	r5, [r4, #0]
 80030ea:	1961      	adds	r1, r4, r5
 80030ec:	428b      	cmp	r3, r1
 80030ee:	bf01      	itttt	eq
 80030f0:	6819      	ldreq	r1, [r3, #0]
 80030f2:	685b      	ldreq	r3, [r3, #4]
 80030f4:	1949      	addeq	r1, r1, r5
 80030f6:	6021      	streq	r1, [r4, #0]
 80030f8:	e7ed      	b.n	80030d6 <_free_r+0x22>
 80030fa:	461a      	mov	r2, r3
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b10b      	cbz	r3, 8003104 <_free_r+0x50>
 8003100:	42a3      	cmp	r3, r4
 8003102:	d9fa      	bls.n	80030fa <_free_r+0x46>
 8003104:	6811      	ldr	r1, [r2, #0]
 8003106:	1855      	adds	r5, r2, r1
 8003108:	42a5      	cmp	r5, r4
 800310a:	d10b      	bne.n	8003124 <_free_r+0x70>
 800310c:	6824      	ldr	r4, [r4, #0]
 800310e:	4421      	add	r1, r4
 8003110:	1854      	adds	r4, r2, r1
 8003112:	42a3      	cmp	r3, r4
 8003114:	6011      	str	r1, [r2, #0]
 8003116:	d1e0      	bne.n	80030da <_free_r+0x26>
 8003118:	681c      	ldr	r4, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	6053      	str	r3, [r2, #4]
 800311e:	440c      	add	r4, r1
 8003120:	6014      	str	r4, [r2, #0]
 8003122:	e7da      	b.n	80030da <_free_r+0x26>
 8003124:	d902      	bls.n	800312c <_free_r+0x78>
 8003126:	230c      	movs	r3, #12
 8003128:	6003      	str	r3, [r0, #0]
 800312a:	e7d6      	b.n	80030da <_free_r+0x26>
 800312c:	6825      	ldr	r5, [r4, #0]
 800312e:	1961      	adds	r1, r4, r5
 8003130:	428b      	cmp	r3, r1
 8003132:	bf04      	itt	eq
 8003134:	6819      	ldreq	r1, [r3, #0]
 8003136:	685b      	ldreq	r3, [r3, #4]
 8003138:	6063      	str	r3, [r4, #4]
 800313a:	bf04      	itt	eq
 800313c:	1949      	addeq	r1, r1, r5
 800313e:	6021      	streq	r1, [r4, #0]
 8003140:	6054      	str	r4, [r2, #4]
 8003142:	e7ca      	b.n	80030da <_free_r+0x26>
 8003144:	b003      	add	sp, #12
 8003146:	bd30      	pop	{r4, r5, pc}
 8003148:	20003fec 	.word	0x20003fec

0800314c <__malloc_lock>:
 800314c:	4801      	ldr	r0, [pc, #4]	; (8003154 <__malloc_lock+0x8>)
 800314e:	f7ff bfa1 	b.w	8003094 <__retarget_lock_acquire_recursive>
 8003152:	bf00      	nop
 8003154:	20003fe8 	.word	0x20003fe8

08003158 <__malloc_unlock>:
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <__malloc_unlock+0x8>)
 800315a:	f7ff bf9c 	b.w	8003096 <__retarget_lock_release_recursive>
 800315e:	bf00      	nop
 8003160:	20003fe8 	.word	0x20003fe8

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
