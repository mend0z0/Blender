
_LIB_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000083c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a00  08000a00  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a00  08000a00  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000a00  08000a00  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a00  08000a00  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a00  08000a00  00010a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a04  08000a04  00010a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000008  08000a10  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000a10  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d4f  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000639  00000000  00000000  00021dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00022408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000172  00000000  00000000  00022610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3ef  00000000  00000000  00022782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000245d  00000000  00000000  00041b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c13e0  00000000  00000000  00043fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000670  00000000  00000000  001053b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00105a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009e8 	.word	0x080009e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	080009e8 	.word	0x080009e8

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	6039      	str	r1, [r7, #0]
 800024a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	db0a      	blt.n	800026a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	b2da      	uxtb	r2, r3
 8000258:	490c      	ldr	r1, [pc, #48]	; (800028c <__NVIC_SetPriority+0x4c>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000268:	e00a      	b.n	8000280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4908      	ldr	r1, [pc, #32]	; (8000290 <__NVIC_SetPriority+0x50>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 030f 	and.w	r3, r3, #15
 8000276:	3b04      	subs	r3, #4
 8000278:	0112      	lsls	r2, r2, #4
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	440b      	add	r3, r1
 800027e:	761a      	strb	r2, [r3, #24]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <DMA1_Stream7_IRQHandler>:
  uint8_t colorRed;
  uint8_t colorBlue;
}ws2812_string[WS2812_MAX_PIXEL_NO];

void DMA1_Stream7_IRQHandler( void )
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
  static uint8_t ws2812PixelCnt = 0;
  static bool ws2812PixelIndex = 0;
  uint8_t cnt;

  if(DMA1->HISR & DMA_HISR_HTIF7)
 800029a:	4b7c      	ldr	r3, [pc, #496]	; (800048c <DMA1_Stream7_IRQHandler+0x1f8>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d006      	beq.n	80002b4 <DMA1_Stream7_IRQHandler+0x20>
    {
      DMA1->HIFCR |= DMA_HIFCR_CHTIF7;
 80002a6:	4b79      	ldr	r3, [pc, #484]	; (800048c <DMA1_Stream7_IRQHandler+0x1f8>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	4a78      	ldr	r2, [pc, #480]	; (800048c <DMA1_Stream7_IRQHandler+0x1f8>)
 80002ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002b0:	60d3      	str	r3, [r2, #12]
 80002b2:	e00b      	b.n	80002cc <DMA1_Stream7_IRQHandler+0x38>
    }
  else if(DMA1->HISR & DMA_HISR_TCIF7)
 80002b4:	4b75      	ldr	r3, [pc, #468]	; (800048c <DMA1_Stream7_IRQHandler+0x1f8>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d005      	beq.n	80002cc <DMA1_Stream7_IRQHandler+0x38>
    {
      DMA1->HIFCR |= DMA_HIFCR_CTCIF7;
 80002c0:	4b72      	ldr	r3, [pc, #456]	; (800048c <DMA1_Stream7_IRQHandler+0x1f8>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a71      	ldr	r2, [pc, #452]	; (800048c <DMA1_Stream7_IRQHandler+0x1f8>)
 80002c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002ca:	60d3      	str	r3, [r2, #12]
    }


  if(ws2812PixelCnt == WS2812_MAX_PIXEL_NO)
 80002cc:	4b70      	ldr	r3, [pc, #448]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	d117      	bne.n	8000304 <DMA1_Stream7_IRQHandler+0x70>
    {
      ws2812PixelCnt = 0;
 80002d4:	4b6e      	ldr	r3, [pc, #440]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
      DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 80002da:	4b6e      	ldr	r3, [pc, #440]	; (8000494 <DMA1_Stream7_IRQHandler+0x200>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a6d      	ldr	r2, [pc, #436]	; (8000494 <DMA1_Stream7_IRQHandler+0x200>)
 80002e0:	f023 0301 	bic.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]
      TIM3->CR1 &= ~TIM_CR1_CEN;
 80002e6:	4b6c      	ldr	r3, [pc, #432]	; (8000498 <DMA1_Stream7_IRQHandler+0x204>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a6b      	ldr	r2, [pc, #428]	; (8000498 <DMA1_Stream7_IRQHandler+0x204>)
 80002ec:	f023 0301 	bic.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
      for(uint32_t i = 0; i < 250; ++i);
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	e002      	b.n	80002fe <DMA1_Stream7_IRQHandler+0x6a>
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	603b      	str	r3, [r7, #0]
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	2bf9      	cmp	r3, #249	; 0xf9
 8000302:	d9f9      	bls.n	80002f8 <DMA1_Stream7_IRQHandler+0x64>
    }

  for(cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt)
 8000304:	2300      	movs	r3, #0
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	e0a4      	b.n	8000454 <DMA1_Stream7_IRQHandler+0x1c0>
    {
      ws2812_pixel[ws2812PixelIndex].green[cnt] = WS2812_T_0H;
 800030a:	4b64      	ldr	r3, [pc, #400]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	79fa      	ldrb	r2, [r7, #7]
 8000312:	4963      	ldr	r1, [pc, #396]	; (80004a0 <DMA1_Stream7_IRQHandler+0x20c>)
 8000314:	4603      	mov	r3, r0
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	4403      	add	r3, r0
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	4413      	add	r3, r2
 800031e:	2206      	movs	r2, #6
 8000320:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      ws2812_pixel[ws2812PixelIndex].red[cnt] = WS2812_T_0H;
 8000324:	4b5d      	ldr	r3, [pc, #372]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	495c      	ldr	r1, [pc, #368]	; (80004a0 <DMA1_Stream7_IRQHandler+0x20c>)
 800032e:	4603      	mov	r3, r0
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	4403      	add	r3, r0
 8000334:	00db      	lsls	r3, r3, #3
 8000336:	4413      	add	r3, r2
 8000338:	3308      	adds	r3, #8
 800033a:	2206      	movs	r2, #6
 800033c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      ws2812_pixel[ws2812PixelIndex].blue[cnt] = WS2812_T_0H;
 8000340:	4b56      	ldr	r3, [pc, #344]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	79fa      	ldrb	r2, [r7, #7]
 8000348:	4955      	ldr	r1, [pc, #340]	; (80004a0 <DMA1_Stream7_IRQHandler+0x20c>)
 800034a:	4603      	mov	r3, r0
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	4403      	add	r3, r0
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	4413      	add	r3, r2
 8000354:	3310      	adds	r3, #16
 8000356:	2206      	movs	r2, #6
 8000358:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if((ws2812_string[ws2812PixelCnt].colorGreen & (1 << (7 - cnt))) == (1 << (7 - cnt)))
 800035c:	4b4c      	ldr	r3, [pc, #304]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	4a50      	ldr	r2, [pc, #320]	; (80004a4 <DMA1_Stream7_IRQHandler+0x210>)
 8000364:	460b      	mov	r3, r1
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	440b      	add	r3, r1
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	f1c3 0307 	rsb	r3, r3, #7
 8000376:	2201      	movs	r2, #1
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	ea01 0203 	and.w	r2, r1, r3
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f1c3 0307 	rsb	r3, r3, #7
 8000386:	2101      	movs	r1, #1
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	429a      	cmp	r2, r3
 800038e:	d10c      	bne.n	80003aa <DMA1_Stream7_IRQHandler+0x116>
	{
	  ws2812_pixel[ws2812PixelIndex].green[cnt] = WS2812_T_1H;
 8000390:	4b42      	ldr	r3, [pc, #264]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	4618      	mov	r0, r3
 8000396:	79fa      	ldrb	r2, [r7, #7]
 8000398:	4941      	ldr	r1, [pc, #260]	; (80004a0 <DMA1_Stream7_IRQHandler+0x20c>)
 800039a:	4603      	mov	r3, r0
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4403      	add	r3, r0
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	4413      	add	r3, r2
 80003a4:	220b      	movs	r2, #11
 80003a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
      if((ws2812_string[ws2812PixelCnt].colorRed & (1 << (7 - cnt))) == (1 << (7 - cnt)))
 80003aa:	4b39      	ldr	r3, [pc, #228]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4a3c      	ldr	r2, [pc, #240]	; (80004a4 <DMA1_Stream7_IRQHandler+0x210>)
 80003b2:	460b      	mov	r3, r1
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	440b      	add	r3, r1
 80003b8:	4413      	add	r3, r2
 80003ba:	3301      	adds	r3, #1
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	4619      	mov	r1, r3
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f1c3 0307 	rsb	r3, r3, #7
 80003c6:	2201      	movs	r2, #1
 80003c8:	fa02 f303 	lsl.w	r3, r2, r3
 80003cc:	ea01 0203 	and.w	r2, r1, r3
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f1c3 0307 	rsb	r3, r3, #7
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	429a      	cmp	r2, r3
 80003de:	d10d      	bne.n	80003fc <DMA1_Stream7_IRQHandler+0x168>
	{
	  ws2812_pixel[ws2812PixelIndex].red[cnt] = WS2812_T_1H;
 80003e0:	4b2e      	ldr	r3, [pc, #184]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	492d      	ldr	r1, [pc, #180]	; (80004a0 <DMA1_Stream7_IRQHandler+0x20c>)
 80003ea:	4603      	mov	r3, r0
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4403      	add	r3, r0
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	4413      	add	r3, r2
 80003f4:	3308      	adds	r3, #8
 80003f6:	220b      	movs	r2, #11
 80003f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
      if((ws2812_string[ws2812PixelCnt].colorBlue & (1 << (7 - cnt))) == (1 << (7 - cnt)))
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <DMA1_Stream7_IRQHandler+0x210>)
 8000404:	460b      	mov	r3, r1
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	440b      	add	r3, r1
 800040a:	4413      	add	r3, r2
 800040c:	3302      	adds	r3, #2
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4619      	mov	r1, r3
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f1c3 0307 	rsb	r3, r3, #7
 8000418:	2201      	movs	r2, #1
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	ea01 0203 	and.w	r2, r1, r3
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f1c3 0307 	rsb	r3, r3, #7
 8000428:	2101      	movs	r1, #1
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	429a      	cmp	r2, r3
 8000430:	d10d      	bne.n	800044e <DMA1_Stream7_IRQHandler+0x1ba>
	{
	  ws2812_pixel[ws2812PixelIndex].blue[cnt] = WS2812_T_1H;
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	4919      	ldr	r1, [pc, #100]	; (80004a0 <DMA1_Stream7_IRQHandler+0x20c>)
 800043c:	4603      	mov	r3, r0
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4403      	add	r3, r0
 8000442:	00db      	lsls	r3, r3, #3
 8000444:	4413      	add	r3, r2
 8000446:	3310      	adds	r3, #16
 8000448:	220b      	movs	r2, #11
 800044a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	3301      	adds	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b07      	cmp	r3, #7
 8000458:	f67f af57 	bls.w	800030a <DMA1_Stream7_IRQHandler+0x76>
	}
    }

  ws2812PixelCnt++;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <DMA1_Stream7_IRQHandler+0x1fc>)
 8000466:	701a      	strb	r2, [r3, #0]
  ws2812PixelIndex ^= 1;	// toggle the index between odd and evens.
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	f083 0301 	eor.w	r3, r3, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	bf14      	ite	ne
 8000476:	2301      	movne	r3, #1
 8000478:	2300      	moveq	r3, #0
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <DMA1_Stream7_IRQHandler+0x208>)
 800047e:	701a      	strb	r2, [r3, #0]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40026000 	.word	0x40026000
 8000490:	20000090 	.word	0x20000090
 8000494:	400260b8 	.word	0x400260b8
 8000498:	40000400 	.word	0x40000400
 800049c:	20000091 	.word	0x20000091
 80004a0:	20000024 	.word	0x20000024
 80004a4:	20000084 	.word	0x20000084

080004a8 <main>:
static void _init_GPIO( void );

void _init_WS2812( void );

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  _init_RCC();
 80004ae:	f000 f82d 	bl	800050c <_init_RCC>
  _init_GPIO();
 80004b2:	f000 f893 	bl	80005dc <_init_GPIO>

  SET_BIT( EXT_LDO_EN_PORT, EXT_LDO_EN_PIN);	//Enable the LDO power to turn the modules on
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <main+0x5c>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a12      	ldr	r2, [pc, #72]	; (8000504 <main+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6153      	str	r3, [r2, #20]

  while (1)
  {
      _init_WS2812();
 80004c2:	f000 f9d3 	bl	800086c <_init_WS2812>

      if(READ_BIT(LED_IND_PORT, LED_IND_PIN))	// (4)
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <main+0x60>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 0304 	and.w	r3, r3, #4
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d006      	beq.n	80004e0 <main+0x38>
	{
	  CLEAR_BIT(LED_IND_PORT, LED_IND_PIN);	// (5)
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <main+0x60>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <main+0x60>)
 80004d8:	f023 0304 	bic.w	r3, r3, #4
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	e005      	b.n	80004ec <main+0x44>
  	}
      else
	{
  	  SET_BIT( LED_IND_PORT, LED_IND_PIN);	// (6)
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <main+0x60>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a08      	ldr	r2, [pc, #32]	; (8000508 <main+0x60>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6153      	str	r3, [r2, #20]
  	}
      for(uint32_t i = 0; i < 9000; ++i);
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	e002      	b.n	80004f8 <main+0x50>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f242 3227 	movw	r2, #8999	; 0x2327
 80004fe:	4293      	cmp	r3, r2
 8000500:	d9f7      	bls.n	80004f2 <main+0x4a>
      _init_WS2812();
 8000502:	e7de      	b.n	80004c2 <main+0x1a>
 8000504:	40020800 	.word	0x40020800
 8000508:	40020c00 	.word	0x40020c00

0800050c <_init_RCC>:
  }
}

static void _init_RCC( void )
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  ////--------------Enabling the HSE
  RCC->CR |= RCC_CR_HSEON;				// (1)
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <_init_RCC+0xcc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <_init_RCC+0xcc>)
 8000516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800051a:	6013      	str	r3, [r2, #0]
  while((RCC->CR & RCC_CR_HSERDY) == 0)			// (2)
 800051c:	bf00      	nop
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <_init_RCC+0xcc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <_init_RCC+0x12>
    {
      //maybe add a time out later
    }

  ////--------------Configuration for PLLs
  RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;			// (3)
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <_init_RCC+0xcc>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <_init_RCC+0xcc>)
 8000530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000534:	6053      	str	r3, [r2, #4]
  // PLLM = 10
  // PLLN = 200
  // PLLP = 2
  // Fpll = (16 * (240 / 6)) / 4 = 160 MHz

  RCC->PLLCFGR |= 0x0A | (0xC8 << 6);
 8000536:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <_init_RCC+0xcc>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <_init_RCC+0xcc>)
 800053c:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
 8000540:	f043 030a 	orr.w	r3, r3, #10
 8000544:	6053      	str	r3, [r2, #4]

  RCC->PLLCFGR |= RCC_PLLCFGR_PLLR_1;			// (5)
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <_init_RCC+0xcc>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	4a23      	ldr	r2, [pc, #140]	; (80005d8 <_init_RCC+0xcc>)
 800054c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000550:	6053      	str	r3, [r2, #4]


  RCC->CR |= RCC_CR_PLLON;				// (6)
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <_init_RCC+0xcc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <_init_RCC+0xcc>)
 8000558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055c:	6013      	str	r3, [r2, #0]

  while((RCC->CR & RCC_CR_PLLRDY) == 0)			// (7)
 800055e:	bf00      	nop
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <_init_RCC+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <_init_RCC+0x54>
    {
      //maybe add a time out later
    }

  RCC->CFGR |= RCC_CFGR_HPRE_3;				// 80MHz
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <_init_RCC+0xcc>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <_init_RCC+0xcc>)
 8000572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000576:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_2; 	// 40MHz
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <_init_RCC+0xcc>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <_init_RCC+0xcc>)
 800057e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000582:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_PPRE2_2;			// 80MHz
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <_init_RCC+0xcc>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <_init_RCC+0xcc>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6093      	str	r3, [r2, #8]

  RCC->CFGR |= RCC_CFGR_SW_1;				// (8)
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <_init_RCC+0xcc>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <_init_RCC+0xcc>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	6093      	str	r3, [r2, #8]
  while((RCC->CFGR & RCC_CFGR_SWS_1) != RCC_CFGR_SWS_1)	// (9)
 800059c:	bf00      	nop
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <_init_RCC+0xcc>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	2b08      	cmp	r3, #8
 80005a8:	d1f9      	bne.n	800059e <_init_RCC+0x92>
    {
      //maybe add a time out later
    }

  RCC->AHB1ENR |= (	RCC_AHB1ENR_GPIOAEN |		// (13)
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <_init_RCC+0xcc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <_init_RCC+0xcc>)
 80005b0:	f043 030f 	orr.w	r3, r3, #15
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
			RCC_AHB1ENR_GPIOBEN |		// (14)
			RCC_AHB1ENR_GPIOCEN |		// (15)
			RCC_AHB1ENR_GPIODEN		// (16)
  );

  RCC->AHB1ENR |= (	RCC_AHB1ENR_DMA1EN	| 	// (17)
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <_init_RCC+0xcc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <_init_RCC+0xcc>)
 80005bc:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
			RCC_AHB1ENR_DMA2EN		// (18)
  );

  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;			// (25)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <_init_RCC+0xcc>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <_init_RCC+0xcc>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800

080005dc <_init_GPIO>:

static void _init_GPIO( void )
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /*		MODER REGs		*/
  GPIOA->MODER |= (	GPIO_MODER_MODER4_0  | GPIO_MODER_MODER4_1 |				// (1)
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <_init_GPIO+0xb8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	492b      	ldr	r1, [pc, #172]	; (8000694 <_init_GPIO+0xb8>)
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <_init_GPIO+0xbc>)
 80005e8:	4313      	orrs	r3, r2
 80005ea:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER3_1  |							// (8)
			GPIO_MODER_MODER5_1  |							// (9)
			GPIO_MODER_MODER15_1							// (10)
  );

  GPIOB->MODER |= (	GPIO_MODER_MODER13_0 |							// (11)
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <_init_GPIO+0xc0>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	492a      	ldr	r1, [pc, #168]	; (800069c <_init_GPIO+0xc0>)
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <_init_GPIO+0xc4>)
 80005f4:	4313      	orrs	r3, r2
 80005f6:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER0_1  |							// (16)
			GPIO_MODER_MODER1_1  |							// (17)
			GPIO_MODER_MODER7_1	 						// (18)
  );

  GPIOC->MODER |= (	GPIO_MODER_MODER0_0  |							// (19)
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <_init_GPIO+0xc8>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4929      	ldr	r1, [pc, #164]	; (80006a4 <_init_GPIO+0xc8>)
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <_init_GPIO+0xcc>)
 8000600:	4313      	orrs	r3, r2
 8000602:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER4_1  |							// (22)
			GPIO_MODER_MODER6_1	 |						// (23)
			GPIO_MODER_MODER7_1							// (24)
  );

  GPIOD->MODER |= GPIO_MODER_MODER2_0;								// (25)
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <_init_GPIO+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <_init_GPIO+0xd0>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]

  /*		OSPEEDR	REGs	*/
  GPIOA->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (26)
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <_init_GPIO+0xb8>)
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	491f      	ldr	r1, [pc, #124]	; (8000694 <_init_GPIO+0xb8>)
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <_init_GPIO+0xd4>)
 8000618:	4313      	orrs	r3, r2
 800061a:	608b      	str	r3, [r1, #8]
			GPIO_OSPEEDR_OSPEED5_0	|						// (27)
			GPIO_OSPEEDR_OSPEED15_0	|
			GPIO_OSPEEDR_OSPEED9_0  | GPIO_OSPEEDR_OSPEED9_1
  );

  GPIOB->OSPEEDR |= (	GPIO_OSPEEDR_OSPEED3_0	|						// (29)
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <_init_GPIO+0xc0>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <_init_GPIO+0xc0>)
 8000622:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8000626:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800062a:	6093      	str	r3, [r2, #8]
			GPIO_OSPEEDR_OSPEED0_0	| GPIO_OSPEEDR_OSPEED0_1 |			// (31)
			GPIO_OSPEEDR_OSPEED1_0	|						// (32)
			GPIO_OSPEEDR_OSPEED7_0							// (33)
  );

  GPIOA->PUPDR |= GPIO_PUPDR_PUPDR9_1;	// internal pull down resistor
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <_init_GPIO+0xb8>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <_init_GPIO+0xb8>)
 8000632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000636:	60d3      	str	r3, [r2, #12]


  /*		AFRL REGs		*/
  GPIOA->AFR[0] |= (	GPIO_AFRL_AFSEL3_0   |							// (34)
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <_init_GPIO+0xb8>)
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <_init_GPIO+0xb8>)
 800063e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000646:	6213      	str	r3, [r2, #32]
			GPIO_AFRL_AFSEL5_0	 						// (35)
  );

  GPIOA->AFR[1] |= (	(GPIO_AFRH_AFSEL9_0  | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2) |	// (36)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <_init_GPIO+0xb8>)
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <_init_GPIO+0xb8>)
 800064e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000652:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000656:	6253      	str	r3, [r2, #36]	; 0x24
			(GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2) |	// (37)
			(GPIO_AFRH_AFSEL15_0 | GPIO_AFRH_AFSEL15_2)				// (38)
  );

  GPIOB->AFR[0] |= (	(GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_2) |				// (39)
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <_init_GPIO+0xc0>)
 800065a:	6a1a      	ldr	r2, [r3, #32]
 800065c:	490f      	ldr	r1, [pc, #60]	; (800069c <_init_GPIO+0xc0>)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_init_GPIO+0xd8>)
 8000660:	4313      	orrs	r3, r2
 8000662:	620b      	str	r3, [r1, #32]
			GPIO_AFRL_AFSEL0_1 	|						// (41)
			GPIO_AFRL_AFSEL1_1 	|						// (42)
			GPIO_AFRL_AFSEL7_3							// (43)
  );

  GPIOC->AFR[0] |= (	GPIO_AFRL_AFSEL6_2	|						// (44)
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <_init_GPIO+0xc8>)
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <_init_GPIO+0xc8>)
 800066a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800066e:	6213      	str	r3, [r2, #32]
			GPIO_AFRL_AFSEL7_2							// (45)
  );

  /*	RESET VALUE	*/
  GPIOA->ODR = 0;										// (46)
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_init_GPIO+0xb8>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  GPIOB->ODR = 0;										// (47)
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <_init_GPIO+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  GPIOC->ODR = 0;										// (48)
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <_init_GPIO+0xc8>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  GPIOD->ODR = 0;										// (49)
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <_init_GPIO+0xd0>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000
 8000698:	80281bbf 	.word	0x80281bbf
 800069c:	40020400 	.word	0x40020400
 80006a0:	5400888a 	.word	0x5400888a
 80006a4:	40020800 	.word	0x40020800
 80006a8:	0005a201 	.word	0x0005a201
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	400c0440 	.word	0x400c0440
 80006b4:	80505022 	.word	0x80505022

080006b8 <_init_DMA>:

void _init_DMA( void )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  static bool initFlag = false;	// To check if it's already initialized!
  if(initFlag == true)		// if it's been initialized
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <_init_DMA+0xbc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d151      	bne.n	800076a <_init_DMA+0xb2>
    {
      return;				// simply return from the function
    }

  for(uint8_t cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt){
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	e025      	b.n	8000718 <_init_DMA+0x60>
      ws2812_pixel[0].green[cnt] = WS2812_T_0H;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <_init_DMA+0xc0>)
 80006d0:	2106      	movs	r1, #6
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      ws2812_pixel[0].red[cnt] = WS2812_T_0H;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <_init_DMA+0xc0>)
 80006da:	3308      	adds	r3, #8
 80006dc:	2106      	movs	r1, #6
 80006de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      ws2812_pixel[0].blue[cnt] = WS2812_T_0H;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4a24      	ldr	r2, [pc, #144]	; (8000778 <_init_DMA+0xc0>)
 80006e6:	3310      	adds	r3, #16
 80006e8:	2106      	movs	r1, #6
 80006ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      ws2812_pixel[1].green[cnt] = WS2812_T_0H;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <_init_DMA+0xc0>)
 80006f2:	3318      	adds	r3, #24
 80006f4:	2106      	movs	r1, #6
 80006f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      ws2812_pixel[1].red[cnt] = WS2812_T_0H;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <_init_DMA+0xc0>)
 80006fe:	3320      	adds	r3, #32
 8000700:	2106      	movs	r1, #6
 8000702:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      ws2812_pixel[1].blue[cnt] = WS2812_T_0H;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <_init_DMA+0xc0>)
 800070a:	3328      	adds	r3, #40	; 0x28
 800070c:	2106      	movs	r1, #6
 800070e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint8_t cnt = 0; cnt < WS2812_COLOR_BITS; ++cnt){
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	3301      	adds	r3, #1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d9d6      	bls.n	80006cc <_init_DMA+0x14>
  }

  DMA1_Stream7->CR |= DMA_SxCR_CHSEL_2	| DMA_SxCR_CHSEL_0 |
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <_init_DMA+0xc4>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4916      	ldr	r1, [pc, #88]	; (800077c <_init_DMA+0xc4>)
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <_init_DMA+0xc8>)
 8000726:	4313      	orrs	r3, r2
 8000728:	600b      	str	r3, [r1, #0]
		      DMA_SxCR_CIRC	|
  		      DMA_SxCR_DIR_0	|
		      DMA_SxCR_TCIE	|
		      DMA_SxCR_HTIE;

  DMA1_Stream7->PAR = (uint32_t)&TIM3->DMAR;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <_init_DMA+0xc4>)
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <_init_DMA+0xcc>)
 800072e:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->M0AR = (uint32_t)&ws2812_pixel[0].green[0];	// (11)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <_init_DMA+0xc4>)
 8000732:	4a11      	ldr	r2, [pc, #68]	; (8000778 <_init_DMA+0xc0>)
 8000734:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->NDTR = DMA_TRANSFER_NO;				// 2 pixels would be 48 transfers
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <_init_DMA+0xc4>)
 8000738:	2230      	movs	r2, #48	; 0x30
 800073a:	605a      	str	r2, [r3, #4]

  NVIC_SetPriority(DMA1_Stream7_IRQn, 1);			// Set Interrupts priority.
 800073c:	2101      	movs	r1, #1
 800073e:	202f      	movs	r0, #47	; 0x2f
 8000740:	f7ff fd7e 	bl	8000240 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000744:	202f      	movs	r0, #47	; 0x2f
 8000746:	f7ff fd5d 	bl	8000204 <__NVIC_EnableIRQ>

  DMA1->HIFCR |= DMA_HIFCR_CTCIF7 | DMA_HIFCR_CHTIF7;		// clearing the DMA flag before enabling the DMA
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <_init_DMA+0xd0>)
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <_init_DMA+0xd0>)
 8000750:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000754:	60d3      	str	r3, [r2, #12]

  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <_init_DMA+0xc4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <_init_DMA+0xc4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6013      	str	r3, [r2, #0]

  initFlag = true;
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <_init_DMA+0xbc>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e000      	b.n	800076c <_init_DMA+0xb4>
      return;				// simply return from the function
 800076a:	bf00      	nop
}
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000092 	.word	0x20000092
 8000778:	20000024 	.word	0x20000024
 800077c:	400260b8 	.word	0x400260b8
 8000780:	0a032d58 	.word	0x0a032d58
 8000784:	4000044c 	.word	0x4000044c
 8000788:	40026000 	.word	0x40026000

0800078c <_init_TIM3>:

static void _init_TIM3( void )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  static bool initFlag = false;

  if(initFlag == true)
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <_init_TIM3+0x70>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d12f      	bne.n	80007f8 <_init_TIM3+0x6c>
    {
      return;
    }

  TIM3->CR1 |= TIM_CR1_ARPE;					// (6)
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <_init_TIM3+0x74>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a18      	ldr	r2, [pc, #96]	; (8000800 <_init_TIM3+0x74>)
 800079e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a2:	6013      	str	r3, [r2, #0]

  TIM3->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 |		// PWM Mode 1
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <_init_TIM3+0x74>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <_init_TIM3+0x74>)
 80007aa:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80007ae:	61d3      	str	r3, [r2, #28]
		  TIM_CCMR2_OC3PE				// (2)
  );


  TIM3->CCER |= TIM_CCER_CC3E;					// (3)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <_init_TIM3+0x74>)
 80007b2:	6a1b      	ldr	r3, [r3, #32]
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <_init_TIM3+0x74>)
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	6213      	str	r3, [r2, #32]

  TIM3->ARR = WS2812_T_BIT;					// (4)
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_init_TIM3+0x74>)
 80007be:	2212      	movs	r2, #18
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM3->CCR3 = 10U;						// (5)

  TIM3->DCR = (uint8_t)((((uint32_t)(&TIM3->CCR3)) - ((uint32_t)(&TIM3->CR1))) >> 2);	// 1 transfer and the base is TIM3->CCR3 (it's the 14th register from TIMx->CR1)
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <_init_TIM3+0x74>)
 80007c4:	220f      	movs	r2, #15
 80007c6:	649a      	str	r2, [r3, #72]	; 0x48

  TIM3->CR2 |= TIM_CR2_CCDS;					// CCx DMA requests sent when update event occurs
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <_init_TIM3+0x74>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <_init_TIM3+0x74>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6053      	str	r3, [r2, #4]

  TIM3->DIER |= TIM_DIER_CC3DE;					// CC3 DMA request enabled.
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <_init_TIM3+0x74>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	4a09      	ldr	r2, [pc, #36]	; (8000800 <_init_TIM3+0x74>)
 80007da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007de:	60d3      	str	r3, [r2, #12]

  _init_DMA();
 80007e0:	f7ff ff6a 	bl	80006b8 <_init_DMA>

  TIM3->CR1 |= TIM_CR1_CEN;	// (2)
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <_init_TIM3+0x74>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <_init_TIM3+0x74>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

  initFlag = true;
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <_init_TIM3+0x70>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e000      	b.n	80007fa <_init_TIM3+0x6e>
      return;
 80007f8:	bf00      	nop
}
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000093 	.word	0x20000093
 8000800:	40000400 	.word	0x40000400

08000804 <WS2812UpdatePixels>:

void WS2812UpdatePixels( __IO uint32_t *colors, uint8_t numOfPixels)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
  ws2812_string[numOfPixels].colorGreen = (*colors & 0X0000FF00) >> 8;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	78fa      	ldrb	r2, [r7, #3]
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	4913      	ldr	r1, [pc, #76]	; (8000868 <WS2812UpdatePixels+0x64>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	440b      	add	r3, r1
 8000824:	4602      	mov	r2, r0
 8000826:	701a      	strb	r2, [r3, #0]
  ws2812_string[numOfPixels].colorRed = (*colors & 0X00FF0000) >> 16;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	78fa      	ldrb	r2, [r7, #3]
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <WS2812UpdatePixels+0x64>)
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	440b      	add	r3, r1
 800083c:	3301      	adds	r3, #1
 800083e:	4602      	mov	r2, r0
 8000840:	701a      	strb	r2, [r3, #0]
  ws2812_string[numOfPixels].colorBlue = (*colors & 0X000000FF);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	78fa      	ldrb	r2, [r7, #3]
 8000848:	b2d8      	uxtb	r0, r3
 800084a:	4907      	ldr	r1, [pc, #28]	; (8000868 <WS2812UpdatePixels+0x64>)
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	440b      	add	r3, r1
 8000854:	3302      	adds	r3, #2
 8000856:	4602      	mov	r2, r0
 8000858:	701a      	strb	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000084 	.word	0x20000084

0800086c <_init_WS2812>:

void _init_WS2812( void )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  __IO static uint32_t color = 0x00f000;

  _init_TIM3();
 8000872:	f7ff ff8b 	bl	800078c <_init_TIM3>

  for(uint8_t cnt = 0; cnt < WS2812_MAX_PIXEL_NO; ++cnt)
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e007      	b.n	800088c <_init_WS2812+0x20>
    {
      WS2812UpdatePixels( &color, cnt);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4619      	mov	r1, r3
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <_init_WS2812+0x3c>)
 8000882:	f7ff ffbf 	bl	8000804 <WS2812UpdatePixels>
  for(uint8_t cnt = 0; cnt < WS2812_MAX_PIXEL_NO; ++cnt)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3301      	adds	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d9f4      	bls.n	800087c <_init_WS2812+0x10>
    }

  color = (color << 1) | 0X0A;
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <_init_WS2812+0x3c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	f043 030a 	orr.w	r3, r3, #10
 800089c:	4a02      	ldr	r2, [pc, #8]	; (80008a8 <_init_WS2812+0x3c>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f83e 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000928:	f7ff ffea 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000952:	f000 f825 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000956:	f7ff fda7 	bl	80004a8 <main>
  bx  lr    
 800095a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000968:	08000a08 	.word	0x08000a08
  ldr r2, =_sbss
 800096c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000970:	20000098 	.word	0x20000098

08000974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC_IRQHandler>
	...

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000004 	.word	0x20000004
 800099c:	20000094 	.word	0x20000094

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4d0d      	ldr	r5, [pc, #52]	; (80009d8 <__libc_init_array+0x38>)
 80009a4:	4c0d      	ldr	r4, [pc, #52]	; (80009dc <__libc_init_array+0x3c>)
 80009a6:	1b64      	subs	r4, r4, r5
 80009a8:	10a4      	asrs	r4, r4, #2
 80009aa:	2600      	movs	r6, #0
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	4d0b      	ldr	r5, [pc, #44]	; (80009e0 <__libc_init_array+0x40>)
 80009b2:	4c0c      	ldr	r4, [pc, #48]	; (80009e4 <__libc_init_array+0x44>)
 80009b4:	f000 f818 	bl	80009e8 <_init>
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	2600      	movs	r6, #0
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08000a00 	.word	0x08000a00
 80009dc:	08000a00 	.word	0x08000a00
 80009e0:	08000a00 	.word	0x08000a00
 80009e4:	08000a04 	.word	0x08000a04

080009e8 <_init>:
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ea:	bf00      	nop
 80009ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ee:	bc08      	pop	{r3}
 80009f0:	469e      	mov	lr, r3
 80009f2:	4770      	bx	lr

080009f4 <_fini>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	bf00      	nop
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr
